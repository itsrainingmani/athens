{"version":3,"sources":["athens/views/node_page.cljs"],"mappings":"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","names":["athens.views.node-page/page-style","athens.views.node-page/title-style","athens.style.color","garden.selectors/+","athens.views.node-page/references-style","athens.views.node-page/references-heading-style","athens.views.node-page/references-list-style","athens.views.node-page/references-group-title-style","athens.views.node-page/references-group-style","athens.views.node-page/reference-breadcrumbs-style","athens.views.node-page/references-group-block-style","athens.views.node-page/page-menu-toggle-style","athens.views.node-page/handle-new-first-child-block-click","parent-uid","new-uid","athens.util/gen-block-uid","now","athens.util/now-ts","re-frame.core/dispatch","athens.views.node-page/handle-enter","e","uid","_state","children","map__61987","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","node-page","block-page","start","value","athens.keybindings/destruct-key-down","cljs.core/empty?","athens.views.node-page/handle-page-arrow-key","state","map__61989","map__61990","cljs.core/deref","map__61991","key-code","target","start?","athens.keybindings/block-start?","end?","athens.keybindings/block-end?","caret-position","textarea-height","top","height","rows","js/Math.round","row","js/Math.ceil","top-row?","cljs.core._EQ_","bottom-row?","up?","goog.events.KeyCodes/UP","down?","goog.events.KeyCodes/DOWN","left?","goog.events.KeyCodes/LEFT","right?","goog.events.KeyCodes/RIGHT","athens.views.node-page/handle-key-down","map__61995","shift","athens.util/get-caret-position","cljs.core.swap_BANG_","cljs.core/assoc","athens.keybindings/arrow-key-direction","cljs.core/not","goog.events.KeyCodes/ENTER","athens.views.node-page/handle-change","athens.views.node-page/map-new-refs","linked-refs","old-title","new-title","cljs.core.map","p__61997","map__61998","string","new-str","clojure.string/replace","athens.patterns/linked","athens.views.node-page/get-existing-page","local-title","G__62000","G__62001","G__62002","datascript.core/q","athens.db/dsdb","athens.views.node-page/existing-block-count","cljs.core/count","G__62003","G__62004","G__62005","athens.views.node-page/handle-blur","node","map__62006","map__62007","dbid","initial","local","cljs.core.not_EQ_","existing-page","linked-ref-blocks","cljs.core.mapcat","cljs.core/second","new-linked-refs","new-page","new-datoms","cljs.core.concat","new-parent-uid","existing-page-block-count","reindex","p__62010","map__62011","order","delete-page","cancel-fn","cljs.core/merge","athens.views.node-page/init-state","confirm-fn","athens.router.navigate_uid","athens.views.node-page/placeholder-block-el","stylefy.core.use_style","athens.views.blocks/bullet-style","athens.views.node-page/sync-title","title","athens.views.node-page/menu-dropdown","_node","ref","cljs.core.atom","handle-click-outside","and__4115__auto__","reagent.core/create-class","_this","goog.events/listen","js/document","goog.events/unlisten","map__62014","map__62015","sidebar","show","x","y","daily-notes?","re_frame.core.subscribe","cljs.core.merge","p1__62013#","athens.views.dropdown/dropdown-style","cljs.core/reset!","athens.views.dropdown/menu-style","athens.views.buttons/button","js/module$node_modules$$material_ui$icons$index.BookmarkBorder","js/module$node_modules$$material_ui$icons$index.Bookmark","athens.views.dropdown/menu-separator-style","athens.router/navigate","js/module$node_modules$$material_ui$icons$index.Delete","athens.views.node-page/ref-comp","block","reagent.core.atom","cljs.core/rest","linked-ref-data","cljs.core/set","_","map__62018","parents","athens.db/get-block-document","athens.views.breadcrumbs/breadcrumbs-list","cljs.core.doall","iter__4529__auto__","s__62021","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","b__62023","cljs.core/chunk-buffer","i__62022","map__62024","cljs.core/-nth","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__62020","cljs.core/chunk-rest","map__62026","cljs.core/first","cljs.core/cons","athens.views.breadcrumbs/breadcrumb","new-B","new-P","cljs.core.drop_last","athens.parse-renderer/parse-and-render","or__4126__auto__","athens.views.blocks/block-el","athens.views.node-page/linked-ref-el","linked?","cljs.core/not-empty","cljs.core/update","js/module$node_modules$$material_ui$icons$index.KeyboardArrowDown","js/module$node_modules$$material_ui$icons$index.ChevronRight","reagent.core/adapt-react-class","js/module$node_modules$$material_ui$icons$index.Link","s__62029","b__62031","i__62030","vec__62032","cljs.core.nth","iter__62028","vec__62039","group-title","group","athens.parse-renderer/pull-node-from-string","s__62036","b__62038","i__62037","iter__62035","s__62043","b__62045","i__62044","iter__62042","athens.views.node-page/unlinked-ref-el","unlinked-refs","unlinked?","un-refs","athens.db/get-unlinked-references","athens.util/escape-str","s__62048","b__62050","i__62049","vec__62051","iter__62047","vec__62064","s__62055","b__62057","i__62056","iter__62054","s__62068","b__62070","i__62069","iter__62067","hm","cljs.core.into","cljs.core/PersistentHashMap","new-unlinked-refs","p1__62046#","cljs.core.update_in","cljs.core.filter","p__62058","map__62059","p__62061","map__62062","p__62071","map__62072","p__62074","map__62075","athens.views.node-page/node-page-el","editing-uid","map__62077","map__62078","message","alert-show","timeline-page?","athens.util/is-timeline-page","athens.views.alerts/alert-component","komponentit.autosize/textarea","rect","js/module$node_modules$$material_ui$icons$index.MoreHoriz","s__62082","b__62084","i__62083","map__62085","iter__62081","map__62087","child","athens.views.node-page/node-page-component","ident","map__62089","athens.db/get-node-document","athens.db/get-linked-references","cljs.core/chunk-first"],"sourcesContent":["(ns athens.views.node-page\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.db :as db :refer [get-linked-references get-unlinked-references]]\n    [athens.keybindings :refer [destruct-key-down arrow-key-direction block-start? block-end?]]\n    [athens.parse-renderer :as parse-renderer :refer [pull-node-from-string parse-and-render]]\n    [athens.patterns :as patterns]\n    [athens.router :refer [navigate-uid navigate]]\n    [athens.style :refer [color]]\n    [athens.util :refer [now-ts gen-block-uid escape-str is-timeline-page get-caret-position]]\n    [athens.views.alerts :refer [alert-component]]\n    [athens.views.blocks :refer [block-el bullet-style]]\n    [athens.views.breadcrumbs :refer [breadcrumbs-list breadcrumb]]\n    [athens.views.buttons :refer [button]]\n    [athens.views.dropdown :refer [dropdown-style menu-style menu-separator-style]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [clojure.string :as str]\n    [datascript.core :as d]\n    [garden.selectors :as selectors]\n    [goog.events :refer [listen unlisten]]\n    [komponentit.autosize :as autosize]\n    [re-frame.core :refer [dispatch subscribe]]\n    [reagent.core :as r]\n    [stylefy.core :as stylefy :refer [use-style]])\n  (:import\n    (goog.events\n      KeyCodes)))\n\n;;; Styles\n\n\n(def page-style\n  {:margin \"2rem auto\"\n   :padding \"1rem 2rem 10rem 2rem\"\n   :flex-basis \"100%\"\n   :max-width \"55rem\"})\n\n\n(def title-style\n  {:position \"relative\"\n   :overflow \"visible\"\n   :flex-grow \"1\"\n   :margin \"0.10em 0 0.10em 1rem\"\n   :letter-spacing \"-0.03em\"\n   :white-space \"pre-line\"\n   :word-break \"break-word\"\n   :line-height \"1.40em\"\n   ::stylefy/manual [[:textarea {:display \"none\"}]\n                     [:&:hover [:textarea {:display \"block\"\n                                           :z-index 1}]]\n                     [:textarea {:-webkit-appearance \"none\"\n                                 :cursor \"text\"\n                                 :resize \"none\"\n                                 :transform \"translate3d(0,0,0)\"\n                                 :color \"inherit\"\n                                 :font-weight \"inherit\"\n                                 :padding \"0\"\n                                 :letter-spacing \"inherit\"\n                                 :position \"absolute\"\n                                 :top \"0\"\n                                 :left \"0\"\n                                 :right \"0\"\n                                 :width \"100%\"\n                                 :min-height \"100%\"\n                                 :caret-color (color :link-color)\n                                 :background \"transparent\"\n                                 :margin \"0\"\n                                 :font-size \"inherit\"\n                                 :line-height \"inherit\"\n                                 :border-radius \"0.25rem\"\n                                 :transition \"opacity 0.15s ease\"\n                                 :border \"0\"\n                                 :opacity \"0\"\n                                 :font-family \"inherit\"}]\n                     [:textarea:focus\n                      :.is-editing {:outline \"none\"\n                                    :z-index 3\n                                    :display \"block\"\n                                    :opacity \"1\"}]\n                     [(selectors/+ :.is-editing :span) {:opacity 0}]]})\n\n\n(def references-style {:margin-top \"3em\"})\n\n\n(def references-heading-style\n  {:font-weight \"normal\"\n   :display \"flex\"\n   :padding \"0 0.5rem 0 0\"\n   :align-items \"center\"\n   ::stylefy/manual [[:svg {:margin-right \"0.25em\"\n                            :font-size \"1rem\"}]]})\n\n\n(def references-list-style\n  {:font-size \"14px\"})\n\n\n(def references-group-title-style\n  {:color (color :link-color)\n   :margin \"0 1.5rem\"\n   :font-weight \"500\"\n   ::stylefy/manual [[:a:hover {:cursor \"pointer\"\n                                :text-decoration \"underline\"}]]})\n\n\n(def references-group-style\n  {:background (color :background-minus-2 :opacity-med)\n   :padding \"1rem 0.5rem\"\n   :border-radius \"0.25rem\"\n   :margin \"0.5em 0\"})\n\n\n(def reference-breadcrumbs-style\n  {:font-size \"12px\"\n   :padding \"0.25rem calc(2rem - 0.5em)\"})\n\n\n(def references-group-block-style\n  {:border-top [[\"1px solid \" (color :border-color)]]\n   :padding-block-start \"1em\"\n   :margin-block-start \"1em\"\n   ::stylefy/manual [[:&:first-of-type {:border-top \"0\"\n                                        :margin-block-start \"0\"}]]})\n\n\n(def page-menu-toggle-style\n  {:position \"absolute\"\n   :left \"-0.5rem\"\n   :border-radius \"1000px\"\n   :padding \"0.375rem 0.5rem\"\n   :color (color :body-text-color :opacity-high)\n   :top \"50%\"\n   :transform \"translate(-100%, -50%)\"})\n\n\n;;; Helpers\n\n\n(defn handle-new-first-child-block-click\n  [parent-uid]\n  (let [new-uid   (gen-block-uid)\n        now       (now-ts)]\n    (dispatch [:transact [{:block/uid       parent-uid\n                           :edit/time       now\n                           :block/children  [{:block/order  0\n                                              :block/uid    new-uid\n                                              :block/open   true\n                                              :block/string \"\"}]}]])\n    (dispatch [:editing/uid new-uid])))\n\n\n(defn handle-enter\n  [e uid _state children]\n  (.. e preventDefault)\n  (let [node-page  (.. e -target (closest \".node-page\"))\n        block-page (.. e -target (closest \".block-page\"))\n        {:keys [start value]} (destruct-key-down e)]\n    (cond\n      block-page (dispatch [:split-block-to-children uid value start])\n      node-page (if (empty? children)\n                  (handle-new-first-child-block-click uid)\n                  (dispatch [:down uid])))))\n\n\n(defn handle-page-arrow-key\n  [e uid state]\n  (let [{:keys [key-code target]} (destruct-key-down e)\n        start?          (block-start? e)\n        end?            (block-end? e)\n        {caret-position :caret-position} @state\n        textarea-height (.. target -offsetHeight)\n        {:keys [top height]} caret-position\n        rows            (js/Math.round (/ textarea-height height))\n        row             (js/Math.ceil (/ top height))\n        top-row?        (= row 1)\n        bottom-row?     (= row rows)\n        up?             (= key-code KeyCodes.UP)\n        down?           (= key-code KeyCodes.DOWN)\n        left?           (= key-code KeyCodes.LEFT)\n        right?          (= key-code KeyCodes.RIGHT)]\n\n    (cond\n      (or (and up? top-row?)\n          (and left? start?)) (do (.. e preventDefault)\n                                  (dispatch [:up uid]))\n      (or (and down? bottom-row?)\n          (and right? end?)) (do (.. e preventDefault)\n                                 (dispatch [:down uid])))))\n\n\n(defn handle-key-down\n  [e uid state children]\n  (let [{:keys [key-code shift]} (destruct-key-down e)\n        caret-position (get-caret-position (.. e -target))]\n    (swap! state assoc :caret-position caret-position)\n    (cond\n      (arrow-key-direction e) (handle-page-arrow-key e uid state)\n      (and (not shift) (= key-code KeyCodes.ENTER)) (handle-enter e uid state children))))\n\n\n(defn handle-change\n  [e state]\n  (let [value (.. e -target -value)]\n    (swap! state assoc :title/local value)))\n\n\n(defn map-new-refs\n  \"Find and replace linked ref with new linked ref, based on title change.\"\n  [linked-refs old-title new-title]\n  (map (fn [{:block/keys [uid string]}]\n         (let [new-str (str/replace string\n                                    (patterns/linked old-title)\n                                    (str \"$1$3$4\" new-title \"$2$5\"))]\n           {:db/id [:block/uid uid]\n            :block/string new-str}))\n       linked-refs))\n\n\n(defn get-existing-page\n  \"?uid used for navigate-uid. Go to existing page following the merge.\"\n  [local-title]\n  (d/q '[:find ?uid .\n         :in $ ?t\n         :where\n         [?e :node/title ?t]\n         [?e :block/uid ?uid]]\n       @db/dsdb local-title))\n\n\n(defn existing-block-count\n  \"Count is used to reindex blocks after merge.\"\n  [local-title]\n  (count (d/q '[:find [?ch ...]\n                :in $ ?t\n                :where\n                [?e :node/title ?t]\n                [?e :block/children ?ch]]\n              @db/dsdb local-title)))\n\n\n(declare init-state)\n\n\n(defn handle-blur\n  \"When textarea blurs and its value is different from initial page title:\n   - if no other page exists, rewrite page title and linked refs\n   - else page with same title does exists: prompt to merge\n     - confirm-fn: delete current page, rewrite linked refs, merge blocks, and navigate to existing page\n     - cancel-fn: reset state\n  The current blocks will be at the end of the existing page.\"\n  [node state linked-refs]\n  (let [{dbid :db/id children :block/children} node\n        {:keys [title/initial title/local]} @state]\n    (when (not= initial local)\n      (let [existing-page     (get-existing-page local)\n            linked-ref-blocks (mapcat second linked-refs)\n            new-linked-refs   (map-new-refs linked-ref-blocks initial local)]\n        (if (empty? existing-page)\n          (let [new-page   {:db/id dbid :node/title local}\n                new-datoms (concat [new-page] new-linked-refs)]\n            (swap! state assoc :title/initial local)\n            (dispatch [:transact new-datoms]))\n          (let [new-parent-uid            existing-page\n                existing-page-block-count (existing-block-count local)\n                reindex                   (map (fn [{:block/keys [order uid]}]\n                                                 {:db/id           [:block/uid uid]\n                                                  :block/order     (+ order existing-page-block-count)\n                                                  :block/_children [:block/uid new-parent-uid]})\n                                               children)\n                delete-page               [:db/retractEntity dbid]\n                new-datoms                (concat [delete-page]\n                                                  new-linked-refs\n                                                  reindex)\n                cancel-fn                 #(swap! state merge init-state)\n                confirm-fn                (fn []\n                                            (navigate-uid new-parent-uid)\n                                            (dispatch [:transact new-datoms])\n                                            (cancel-fn))]\n            (swap! state assoc\n                   :alert/show true\n                   :alert/message (str \"\\\"\" local \"\\\"\" \" already exists, merge pages?\")\n                   :alert/confirm-fn confirm-fn\n                   :alert/cancel-fn cancel-fn)))))))\n\n\n;;; Components\n\n(defn placeholder-block-el\n  [parent-uid]\n  [:div {:class \"block-container\"}\n   [:div {:style {:display \"flex\"}}\n    [:span (use-style bullet-style)]\n    [:span {:on-click #(handle-new-first-child-block-click parent-uid)} \"Click here to add content...\"]]])\n\n\n(defn sync-title\n  \"Ensures :title/initial is synced to node/title.\n  Cases:\n  - User opens a page for the first time.\n  - User navigates from a page to another page.\n  - User merges current page with existing page, navigating to existing page.\"\n  [title state]\n  (when (not= title (:title/initial @state))\n    (swap! state assoc :title/initial title :title/local title)))\n\n\n(def init-state\n  {:menu/show            false\n   :menu/x               nil\n   :menu/y               nil\n   :title/initial        nil\n   :title/local          nil\n   :alert/show           nil\n   :alert/message        nil\n   :alert/confirm-fn     nil\n   :alert/cancel-fn      nil\n   \"Linked References\"   true\n   \"Unlinked References\" false})\n\n\n(defn menu-dropdown\n  [_node state]\n  (let [ref                  (atom nil)\n        handle-click-outside (fn [e]\n                               (when (and (:menu/show @state)\n                                          (not (.. @ref (contains (.. e -target)))))\n                                 (swap! state assoc :menu/show false)))]\n    (r/create-class\n      {:display-name \"node-page-menu\"\n       :component-did-mount (fn [_this] (listen js/document \"mousedown\" handle-click-outside))\n       :component-will-unmount (fn [_this] (unlisten js/document \"mousedown\" handle-click-outside))\n       :reagent-render   (fn [node state]\n                           (let [{:block/keys [uid] sidebar :page/sidebar title :node/title} node\n                                 {:menu/keys [show x y]} @state\n                                 daily-notes? (= :home @(subscribe [:current-route/name]))]\n                             (when show\n                               [:div (merge (use-style dropdown-style\n                                                       {:ref #(reset! ref %)})\n                                            {:style {:font-size \"14px\"\n                                                     :position \"fixed\"\n                                                     :left (str x \"px\")\n                                                     :top (str y \"px\")}})\n                                [:div (use-style menu-style)\n                                 (if sidebar\n                                   [button {:on-click #(dispatch [:page/remove-shortcut uid])}\n                                    [:<>\n                                     [:> mui-icons/BookmarkBorder]\n                                     [:span \"Remove Shortcut\"]]]\n                                   [button {:on-click #(dispatch [:page/add-shortcut uid])}\n                                    [:<>\n                                     [:> mui-icons/Bookmark]\n                                     [:span \"Add Shortcut\"]]])\n                                 [:hr (use-style menu-separator-style)]\n                                 [button {:on-click #(if daily-notes?\n                                                       (dispatch [:daily-note/delete uid title])\n                                                       (do\n                                                         (navigate :pages)\n                                                         (dispatch [:page/delete uid title])))}\n                                  [:<> [:> mui-icons/Delete] [:span \"Delete Page\"]]]]])))})))\n\n\n(defn ref-comp\n  [block]\n  (let [state           (r/atom {:block   block\n                                 :parents (rest (:block/parents block))})\n        linked-ref-data {:linked-ref     true\n                         :initial-open   true\n                         :linked-ref-uid (:block/uid block)\n                         :parent-uids    (set (map :block/uid (:block/parents block)))}]\n    (fn [_]\n      (let [{:keys [block parents]} @state\n            block (db/get-block-document (:db/id block))]\n        [:<>\n         [breadcrumbs-list {:style reference-breadcrumbs-style}\n          (doall\n            (for [{:keys [node/title block/string block/uid]} parents]\n              [breadcrumb {:key      (str \"breadcrumb-\" uid)\n                           :on-click #(do (let [new-B (db/get-block-document [:block/uid uid])\n                                                new-P (drop-last parents)]\n                                            (swap! state assoc :block new-B :parents new-P)))}\n               [parse-and-render (or title string) (:block/uid block)]]))]\n         [block-el block linked-ref-data]]))))\n\n\n(defn linked-ref-el\n  [state daily-notes? linked-refs]\n  (let [linked? \"Linked References\"]\n    (when (or (and daily-notes? (not-empty linked-refs))\n              (not daily-notes?))\n      [:section (use-style references-style)\n       [:h4 (use-style references-heading-style)\n        [button {:on-click (fn [] (swap! state update linked? not))}\n         (if (get @state linked?)\n           [:> mui-icons/KeyboardArrowDown]\n           [:> mui-icons/ChevronRight])]\n        [(r/adapt-react-class mui-icons/Link)]\n        [:div {:style {:display \"flex\"\n                       :flex \"1 1 100%\"\n                       :justify-content \"space-between\"}}\n         [:span linked?]]]\n       (when (get @state linked?)\n         [:div (use-style references-list-style)\n          (doall\n            (for [[group-title group] linked-refs]\n              [:div (use-style references-group-style {:key (str \"group-\" group-title)})\n               [:h4 (use-style references-group-title-style)\n                [:a {:on-click #(navigate-uid (:block/uid @(pull-node-from-string group-title)))} group-title]]\n               (doall\n                 (for [block group]\n                   ^{:key (str \"ref-\" (:block/uid block))}\n                   [:div {:style {:display \"flex\"\n                                  :flex \"1 1 100%\"\n                                  :justify-content \"space-between\"\n                                  :align-items \"flex-start\"}}\n                    [:div (use-style references-group-block-style)\n                     [ref-comp block]]]))]))])])))\n\n\n(defn unlinked-ref-el\n  [state daily-notes? unlinked-refs title]\n  (let [unlinked? \"Unlinked References\"]\n    (when (not daily-notes?)\n      [:section (use-style references-style)\n       [:h4 (use-style references-heading-style)\n        [button {:on-click (fn []\n                             (if (get @state unlinked?)\n                               (swap! state assoc unlinked? false)\n                               (let [un-refs (get-unlinked-references (escape-str title))]\n                                 (swap! state assoc unlinked? true)\n                                 (reset! unlinked-refs un-refs))))}\n         (if (get @state unlinked?)\n           [:> mui-icons/KeyboardArrowDown]\n           [:> mui-icons/ChevronRight])]\n        [(r/adapt-react-class mui-icons/Link)]\n        [:div {:style {:display         \"flex\"\n                       :flex            \"1 1 100%\"\n                       :justify-content \"space-between\"}}\n         [:span unlinked?]\n         (when (and unlinked? (not-empty @unlinked-refs))\n           [button {:style    {:font-size \"14px\"}\n                    :on-click (fn []\n                                (dispatch [:unlinked-references/link-all @unlinked-refs title])\n                                (swap! state assoc unlinked? false)\n                                (reset! unlinked-refs []))}\n            \"Link All\"])]]\n       (when (get @state unlinked?)\n         [:div (use-style references-list-style)\n          (doall\n            (for [[group-title group] @unlinked-refs]\n              [:div (use-style references-group-style {:key (str \"group-\" group-title)})\n               [:h4 (use-style references-group-title-style)\n                [:a {:on-click #(navigate-uid (:block/uid @(pull-node-from-string group-title)))} group-title]]\n               (doall\n                 (for [block group]\n                   ^{:key (str \"ref-\" (:block/uid block))}\n                   [:div {:style {:display         \"flex\"\n                                  :flex            \"1 1 100%\"\n                                  :justify-content \"space-between\"\n                                  :align-items     \"flex-start\"}}\n                    [:div (use-style references-group-block-style)\n                     [ref-comp block]]\n                    (when unlinked?\n                      [button {:style    {:margin-top \"1.5em\"}\n                               :on-click (fn []\n                                           (let [hm                (into (hash-map) @unlinked-refs)\n                                                 new-unlinked-refs (->> (update-in hm [group-title] #(filter (fn [{:keys [block/uid]}]\n                                                                                                               (= uid (:block/uid block)))\n                                                                                                             %))\n                                                                        seq)]\n                                             ;; ctrl-z doesn't work though, because Unlinked Refs aren't reactive to datascript.\n                                             (reset! unlinked-refs new-unlinked-refs)\n                                             (dispatch [:unlinked-references/link block title])))}\n                       \"Link\"])]))]))])])))\n\n;; TODO: where to put page-level link filters?\n(defn node-page-el\n  \"title/initial is the title when a page is first loaded.\n  title/local is the value of the textarea.\n  We have both, because we want to be able to change the local title without transacting to the db until user confirms.\n  Similar to atom-string in blocks. Hacky, but state consistency is hard!\"\n  [_ _ _ _]\n  (let [state         (r/atom init-state)\n        unlinked-refs (r/atom [])]\n    (fn [node editing-uid linked-refs]\n      (let [{:block/keys [children uid] title :node/title} node\n            {:menu/keys [show] :alert/keys [message confirm-fn cancel-fn] alert-show :alert/show} @state\n            timeline-page? (is-timeline-page uid)\n            daily-notes?   (= :home @(subscribe [:current-route/name]))]\n\n\n        (sync-title title state)\n\n        [:div (use-style page-style {:class [\"node-page\"]\n                                     :data-uid uid})\n\n         (when alert-show\n           [:div (use-style {:position \"absolute\"\n                             :top \"50px\"\n                             :left \"35%\"})\n            [alert-component message confirm-fn cancel-fn]])\n\n         ;; Header\n         [:h1 (use-style title-style\n                         {:data-uid uid\n                          :class    \"page-header\"\n                          :on-click (fn [e] (navigate-uid uid e))})\n          ;; Prevent editable textarea if a node/title is a date\n          ;; Don't allow title editing from daily notes, right sidebar, or node-page itself.\n          (when-not timeline-page?\n            [autosize/textarea\n             {:value         (:title/local @state)\n              :id            (str \"editable-uid-\" uid)\n              :class         (when (= editing-uid uid) \"is-editing\")\n              :on-blur       (fn [_] (handle-blur node state linked-refs))\n              :on-key-down   (fn [e] (handle-key-down e uid state children))\n              :on-change     (fn [e] (handle-change e state))}])\n          [button {:class    [(when show \"active\")]\n                   :on-click (fn [e]\n                               (.. e stopPropagation)\n                               (if show\n                                 (swap! state assoc :menu/show false)\n                                 (let [rect (.. e -target getBoundingClientRect)]\n                                   (swap! state merge {:menu/show true\n                                                       :menu/x    (.. rect -left)\n                                                       :menu/y    (.. rect -bottom)}))))\n                   :style    page-menu-toggle-style}\n           [:> mui-icons/MoreHoriz]]\n          (:title/local @state)]\n          ;;(parse-renderer/parse-and-render title uid)]\n\n         ;; Dropdown\n         [menu-dropdown node state]\n\n         ;; Children\n         (if (empty? children)\n           [placeholder-block-el uid]\n           [:div\n            (for [{:block/keys [uid] :as child} children]\n              ^{:key uid}\n              [block-el child])])\n\n         ;; References\n         [linked-ref-el state daily-notes? linked-refs]\n         [unlinked-ref-el state daily-notes? unlinked-refs title]]))))\n\n\n(defn node-page-component\n  [ident]\n  (let [{:keys [#_block/uid node/title] :as node} (db/get-node-document ident)\n        editing-uid   @(subscribe [:editing/uid])\n        linked-refs   (get-linked-references title)]\n    [node-page-el node editing-uid linked-refs]))\n"]}