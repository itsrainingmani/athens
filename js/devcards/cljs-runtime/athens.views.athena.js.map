{"version":3,"sources":["athens/views/athena.cljs"],"mappings":"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","names":["athens.views.athena/container-style","athens.style/DEPTH-SHADOWS","athens.style.color.cljs$core$IFn$_invoke$arity$2","athens.style.color.cljs$core$IFn$_invoke$arity$1","athens.style/ZINDICES","athens.views.athena/athena-input-style","athens.views.athena/results-list-style","athens.views.athena/results-heading-style","athens.views.athena/result-style","athens.views.athena/result-highlight-style","athens.views.athena/hint-style","athens.style/OPACITIES","athens.views.athena/highlight-match","query","txt","query-pattern","athens.db/re-case-insensitive","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","i","part","cljs.core/re-find","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$2","clojure.string.split.cljs$core$IFn$_invoke$arity$2","athens.views.athena/create-search-handler","state","clojure.string/blank?","cljs.core/reset!","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","athens.db/search-exact-node-title","cljs.core.take.cljs$core$IFn$_invoke$arity$2","athens.db/search-in-node-title","athens.db/search-in-block-content","cljs.core/vec","athens.views.athena/key-down-handler","e","map__56021","cljs.core/deref","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","key","shift","index","results","item","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","goog.events.KeyCodes/ESC","G__56023","re-frame.core/dispatch","and__4174__auto__","goog.events.KeyCodes/ENTER","uid","athens.util/gen-block-uid","G__56024","G__56025","G__56026","G__56027","G__56028","G__56029","athens.router.navigate_uid.cljs$core$IFn$_invoke$arity$1","G__56030","or__4185__auto__","goog.events.KeyCodes/UP","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/update","cljs.core/dec","goog.events.KeyCodes/DOWN","cljs.core/inc","athens.views.athena/athena-prompt-el","athens.views.buttons/button-primary","G__56031","js/module$node_modules$$material_ui$icons$index.Search","athens.views.athena/results-el","query?","recent-items","G__56032","re-frame.core/subscribe","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$1","iter__4582__auto__","s__56034","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__56036","cljs.core/chunk-buffer","i__56035","vec__56037","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__56033","cljs.core/chunk-rest","vec__56042","cljs.core/first","cljs.core/cons","cljs.core/rest","x","cljs.core/list","map__56040","title","string","map__56045","stylefy.core.use_sub_style.cljs$core$IFn$_invoke$arity$2","reagent.core/adapt-react-class","js/module$node_modules$$material_ui$icons$index.ArrowForward","athens.views.athena/athena-component","open?","G__56047","s","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","search-handler","G__56048","G__56049","goog.functions/debounce","G__56050","map__56051","s__56054","b__56056","i__56055","vec__56057","iter__56053","vec__56063","parent","_","G__56060","G__56066","G__56061","G__56067","js/module$node_modules$$material_ui$icons$index.Create","selected-page","G__56062","G__56068","cljs.core/chunk-first"],"sourcesContent":["(ns athens.views.athena\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.db :as db :refer [search-in-block-content search-exact-node-title search-in-node-title re-case-insensitive]]\n    [athens.router :refer [navigate-uid]]\n    [athens.style :refer [color DEPTH-SHADOWS OPACITIES ZINDICES]]\n    [athens.subs]\n    [athens.util :refer [gen-block-uid]]\n    [athens.views.buttons :refer [button-primary]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [clojure.string :as str]\n    [goog.functions :refer [debounce]]\n    [re-frame.core :refer [subscribe dispatch]]\n    [reagent.core :as r]\n    [stylefy.core :as stylefy :refer [use-style use-sub-style]])\n  (:import\n    (goog.events\n      KeyCodes)))\n\n\n;;; Styles\n\n\n(def container-style\n  {:width         \"49rem\"\n   :border-radius \"0.25rem\"\n   :box-shadow    [[(:64 DEPTH-SHADOWS) \", 0 0 0 1px \" (color :body-text-color :opacity-lower)]]\n   :display       \"flex\"\n   :flex-direction \"column\"\n   :background    (color :background-plus-1)\n   :position      \"fixed\"\n   :overflow      \"hidden\"\n   :max-height    \"60vh\"\n   :z-index       (:zindex-modal ZINDICES)\n   :top           \"50%\"\n   :left          \"50%\"\n   :transform     \"translate(-50%, -50%)\"})\n\n\n(def athena-input-style\n  {:width \"100%\"\n   :border 0\n   :font-size      \"2.375rem\"\n   :font-weight    \"300\"\n   :line-height    \"1.3\"\n   :letter-spacing \"-0.03em\"\n   :border-radius  \"0.25rem 0.25rem 0 0\"\n   :background     (color :background-plus-2)\n   :color          (color :body-text-color)\n   :caret-color    (color :link-color)\n   :padding        \"1.5rem\"\n   :cursor         \"text\"\n   ::stylefy/mode {:focus {:outline \"none\"}\n                   \"::placeholder\" {:color (color :body-text-color :opacity-low)}}})\n\n\n(def results-list-style\n  {:background    (color :background-color)\n   :overflow-y \"auto\"\n   :max-height \"100%\"})\n\n\n(def results-heading-style\n  {:padding \"0.25rem 1.125rem\"\n   :background (color :background-plus-2)\n   :display \"flex\"\n   :position \"sticky\"\n   :top \"0\"\n   :justify-content \"space-between\"\n   :box-shadow [[\"0 1px 0 0 \" (color :border-color)]]\n   :border-top [[\"1px solid\" (color :border-color)]]})\n\n\n(def result-style\n  {:display \"grid\"\n   :grid-template \"\\\"title icon\\\" \\\"preview icon\\\"\"\n   :grid-gap \"0 0.75rem\"\n   :grid-template-columns \"1fr auto\"\n   :padding \"0.75rem 2rem\"\n   :background (color :background-plus-1)\n   :color (color :body-text-color)\n   :transition \"all .05s ease\"\n   :border-top [[\"1px solid \" (color :border-color)]]\n   ::stylefy/sub-styles {:title {:grid-area \"title\"\n                                 :font-size \"1rem\"\n                                 :margin \"0\"\n                                 :color (color :header-text-color)\n                                 :font-weight \"500\"}\n                         :preview {:grid-area \"preview\"\n                                   :white-space \"wrap\"\n                                   :word-break \"break-word\"\n                                   :color (color :body-text-color :opacity-low)}\n                         :link-leader {:grid-area \"icon\"\n                                       :color \"transparent\"\n                                       :margin \"auto auto\"}}\n   ::stylefy/manual [[:&.selected :&:hover {:background (color :link-color)\n                                            :color \"#fff\"} ;; Intentionally not a theme value, because we don't have a semantic way to contrast with :link-color \n                      [:.title :.preview :.link-leader :.result-highlight {:color \"inherit\"}]]]})\n\n\n(def result-highlight-style\n  {:color (color :body-text-color)\n   :font-weight \"500\"})\n\n\n(def hint-style\n  {:color \"inherit\"\n   :opacity (:opacity-med OPACITIES)\n   :font-size \"14px\"})\n\n\n;;; Utilities\n\n\n(defn highlight-match\n  [query txt]\n  (let [query-pattern (re-case-insensitive (str \"((?<=\" query \")|(?=\" query \"))\"))]\n    (doall\n      (map-indexed (fn [i part]\n                     (if (re-find query-pattern part)\n                       [:span.result-highlight (use-style result-highlight-style {:key i}) part]\n                       part))\n                   (clojure.string/split txt query-pattern)))))\n\n\n(defn create-search-handler\n  [state]\n  (fn [query]\n    (if (str/blank? query)\n      (reset! state {:index   0\n                     :query   nil\n                     :results []})\n      (reset! state {:index   0\n                     :query   query\n                     :results (->> (concat [(search-exact-node-title query)]\n                                           (take 20 (search-in-node-title query))\n                                           (take 20 (search-in-block-content query)))\n                                   vec)}))))\n\n\n(defn key-down-handler\n  [e state]\n  (let [key (.. e -keyCode)\n        shift (.. e -shiftKey)\n        {:keys [index query results]} @state\n        item (get results index)]\n\n    (cond\n      ;; FIXME: why does this only work in Devcards?\n      (= key KeyCodes.ESC)\n      (dispatch [:athena/toggle])\n\n      (and shift (= KeyCodes.ENTER key) (zero? index) (nil? item))\n      (let [uid (gen-block-uid)]\n        (dispatch [:athena/toggle])\n        (dispatch [:right-sidebar/open-item uid]))\n\n      (and shift (= key KeyCodes.ENTER))\n      (do\n        (dispatch [:athena/toggle])\n        (dispatch [:right-sidebar/open-item (:block/uid item)]))\n\n      (and (= KeyCodes.ENTER key) (zero? index) (nil? item))\n      (let [uid (gen-block-uid)]\n        (dispatch [:athena/toggle])\n        (dispatch [:page/create query uid])\n        (navigate-uid uid))\n\n      (= key KeyCodes.ENTER)\n      (do (dispatch [:athena/toggle])\n          (navigate-uid (or (:block/uid (:block/parent item)) (:block/uid item))))\n\n      ;; TODO: change scroll as user reaches top or bottom\n      ;; TODO: what happens when user goes to -1? or past end of list?\n      (= key KeyCodes.UP)\n      (swap! state update :index dec)\n\n      (= key KeyCodes.DOWN)\n      (swap! state update :index inc)\n\n      :else nil)))\n\n\n;;; Components\n\n\n(defn athena-prompt-el\n  []\n  [button-primary {:on-click-fn #(dispatch [:athena/toggle])\n                   :label [:<>\n                           [:> mui-icons/Search]\n                           [:span \"Find or Create a Page\"]]\n                   :style {:font-size \"11px\"}}])\n\n\n(defn results-el\n  [state]\n  (let [query? (str/blank? (:query @state))\n        recent-items @(subscribe [:athena/get-recent])]\n    [:<> [:div (use-style results-heading-style)\n          [:h5 (if query? \"Recent\" \"Results\")]\n          [:span (use-style hint-style)\n           \"Press \"\n           [:kbd \"shift + enter\"]\n           \" to open in right sidebar.\"]]\n     (when query?\n       [:div (use-style results-list-style)\n        (doall\n          (for [[i x] (map-indexed list recent-items)]\n            (when x\n              (let [{:keys [query :node/title :block/uid :block/string]} x]\n                [:div (use-style result-style {:key      i\n                                               :on-click #(navigate-uid uid)})\n                 [:h4.title (use-sub-style result-style :title) (highlight-match query title)]\n                 (when string\n                   [:span.preview (use-sub-style result-style :preview) (highlight-match query string)])\n                 [:span.link-leader (use-sub-style result-style :link-leader) [(r/adapt-react-class mui-icons/ArrowForward)]]]))))])]))\n\n\n(defn athena-component\n  []\n  (let [open? @(subscribe [:athena/open])\n        s (r/atom {:index 0\n                   :query nil\n                   :results []})\n        search-handler (debounce (create-search-handler s) 500)]\n    (when open?\n      [:div.athena (use-style container-style)\n       [:input (use-style athena-input-style\n                          {:type        \"search\"\n                           :auto-focus  true\n                           :placeholder \"Find or Create Page\"\n                           :on-change   (fn [e] (search-handler (.. e -target -value)))\n                           :on-key-down (fn [e] (key-down-handler e s))})]\n       [results-el s]\n       [(fn []\n          (let [{:keys [results query index]} @s]\n            [:div (use-style results-list-style)\n             (doall\n               (for [[i x] (map-indexed list results)\n                     :let [parent (:block/parent x)\n                           title  (or (:node/title parent) (:node/title x))\n                           uid    (or (:block/uid parent) (:block/uid x))\n                           string (:block/string x)]]\n                 (if (nil? x)\n                   ^{:key i}\n                   [:div (use-style result-style {:on-click (fn [_]\n                                                              (let [uid (gen-block-uid)]\n                                                                (dispatch [:athena/toggle])\n                                                                (dispatch [:page/create query uid])\n                                                                (navigate-uid uid)))\n                                                  :class (when (= i index) \"selected\")})\n                    [:h4.title (use-sub-style result-style :title)\n                     [:b \"Create Page: \"]\n                     query]\n                    [:span.link-leader (use-sub-style result-style :link-leader) [(r/adapt-react-class mui-icons/Create)]]]\n                   [:div (use-style result-style {:key      i\n                                                  :on-click (fn []\n                                                              (let [selected-page {:node/title   title\n                                                                                   :block/uid    uid\n                                                                                   :block/string string\n                                                                                   :query        query}]\n                                                                (dispatch [:athena/update-recent-items selected-page])\n                                                                (navigate-uid uid)))\n                                                  :class    (when (= i index) \"selected\")})\n                    [:h4.title (use-sub-style result-style :title) (highlight-match query title)]\n                    (when string\n                      [:span.preview (use-sub-style result-style :preview) (highlight-match query string)])\n                    [:span.link-leader (use-sub-style result-style :link-leader) [(r/adapt-react-class mui-icons/ArrowForward)]]])))]))]])))\n"]}