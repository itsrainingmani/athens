{"version":3,"sources":["shadow/remote/runtime/cljs/browser.cljs"],"mappings":"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","names":["shadow.remote.runtime.cljs.browser/transit-read","data","t","cognitect.transit.reader","cognitect.transit/read","shadow.remote.runtime.cljs.browser/transit-str","obj","w","cognitect.transit.writer","cognitect.transit/write","p__60033","map__60034","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","shadow.remote.runtime.cljs.browser/abort!","callback","state","action","ex","cljs.core.assoc","G__60036","p__60037","p__60038","map__60039","map__60040","shadow.remote.runtime.cljs.browser/interpret-action","runtime","type","G__60043","cljs.core/Keyword","js/Error","map__60044","js","e60046","res","cljs.core.update","cljs.core/conj","G__60047","shadow.remote.runtime.cljs.browser/interpret-actions","p__60048","map__60049","actions","cljs.core/empty?","fexpr__60051","map__60052","cljs.core/first","cljs.core/rest","this__4380__auto__","k__4381__auto__","this__4382__auto__","k60055","else__4383__auto__","G__60062","ws","state-ref","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__60063","vec__60064","k__4403__auto__","cljs.core.nth","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__60054","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","cljs.core/count","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this60056","other60057","cljs.core._EQ_","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__60067","cljs.core/keyword-identical?","expr__60068","this__4392__auto__","cljs.core/seq","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","shadow.remote.runtime.cljs.browser/BrowserRuntime","this__4423__auto__","cljs.core/List","writer__4424__auto__","cljs.core/-write","G__60058","extmap__4419__auto__","G__60070","cljs.core/record?","shadow.remote.runtime.cljs.browser/->BrowserRuntime","shadow.remote.runtime.cljs.browser/map->BrowserRuntime","msg","key","spec","shadow.remote.runtime.shared/add-extension","shadow.remote.runtime.shared/del-extension","this","code","goog.net.XhrIo/send","shadow.cljs.devtools.client.env/get-url-base","shadow.cljs.devtools.client.env/build-id","shadow.cljs.devtools.client.env/proc-id","req","map__60059","result","G__60061","shadow.remote.runtime.cljs.browser/start","temp__5737__auto__","cljs.core/deref","map__60072","stop","shadow.remote.runtime.cljs.env/runtime-ref","cljs.core/reset!","js/setTimeout","ws-url","shadow.cljs.devtools.client.env/get-ws-url-base","socket","js/WebSocket","cljs.core.atom","G__60071","shadow.remote.runtime.shared/add-defaults","obj-support","shadow.remote.runtime.obj-support/start","tap-support","shadow.remote.runtime.tap-support/start","eval-support","shadow.remote.runtime.eval-support/start","shadow.remote.runtime.tap-support/stop","shadow.remote.runtime.obj-support/stop","shadow.remote.runtime.eval-support/stop","shadow.remote.runtime.cljs.env/init-runtime!","e","shadow.remote.runtime.shared/process","js/console.warn"],"sourcesContent":["(ns shadow.remote.runtime.cljs.browser\n  (:require\n    [cognitect.transit :as transit]\n    ;; this will eventually replace shadow.cljs.devtools.client completely\n    [shadow.cljs.devtools.client.env :as env]\n    [goog.net.XhrIo :as xhr]\n    [shadow.remote.runtime.api :as api]\n    [shadow.remote.runtime.shared :as shared]\n    [shadow.remote.runtime.cljs.env :as renv]\n    [shadow.remote.runtime.cljs.js-builtins]\n    [shadow.remote.runtime.tap-support :as tap-support]\n    [shadow.remote.runtime.obj-support :as obj-support]\n    [shadow.remote.runtime.eval-support :as eval-support]\n    ))\n\n(defn transit-read [data]\n  (let [t (transit/reader :json)]\n    (transit/read t data)))\n\n(defn transit-str [obj]\n  (let [w (transit/writer :json)]\n    (transit/write w obj)))\n\n(declare interpret-actions)\n\n(defn abort! [{:keys [callback] :as state} action ex]\n  (-> state\n      (assoc :failed true\n             :completed false\n             :ex ex\n             :ex-action action)\n      (callback)))\n\n(defn interpret-action [{:keys [^BrowserRuntime runtime] :as state} {:keys [type] :as action}]\n  (case type\n    :repl/invoke\n    (let [{:keys [js]} action]\n      (try\n        (let [res (.eval-js runtime js)]\n          (-> state\n              (update :eval-results conj {:value res :action action})\n              (interpret-actions)))\n        (catch :default ex\n          (abort! state action ex))))))\n\n(defn interpret-actions [{:keys [actions] :as state}]\n  (if (empty? actions)\n    ((:callback state) state)\n    (let [{:keys [type] :as action} (first actions)\n          state (update state :actions rest)]\n      (interpret-action state action))))\n\n(defrecord BrowserRuntime [ws state-ref]\n  api/IRuntime\n  (relay-msg [runtime msg]\n    (.send ws (transit-str msg)))\n  (add-extension [runtime key spec]\n    (shared/add-extension runtime key spec))\n  (del-extension [runtime key]\n    (shared/del-extension runtime key))\n\n  Object\n  (eval-js [this code]\n    (js* \"(0,eval)(~{})\" code))\n\n  (eval-cljs [this msg callback]\n    ;; FIXME: define that msg is supposed to look like\n    ;; {:code \"(some-cljs)\" :ns foo.bar}\n    ;; FIXME: transit?\n    (xhr/send\n      (str (env/get-url-base) \"/worker/compile/\" env/build-id \"/\" env/proc-id \"/browser\")\n      (fn [res]\n        (this-as ^goog req\n          (let [{:keys [type] :as result}\n                (transit-read (.getResponseText req))]\n\n            (if-not (= :repl/actions type)\n              (callback {:failed true :result result})\n              (interpret-actions {:runtime this\n                                  :callback callback\n                                  :input msg\n                                  :actions (:actions result)\n                                  :eval-results []\n                                  :errors []})))))\n      \"POST\"\n      (transit-str msg)\n      #js {\"content-type\" \"application/transit+json; charset=utf-8\"})))\n\n(defn start []\n  (if-some [{:keys [stop]} @renv/runtime-ref]\n    ;; if already connected. cleanup and call restart async\n    ;; need to give the websocket a chance to close\n    ;; only need this to support hot-reload this code\n    ;; can't use :dev/before-load-async hooks since they always run\n    (do (stop)\n        (reset! renv/runtime-ref nil)\n        (js/setTimeout start 10))\n\n    (let [ws-url (str (env/get-ws-url-base) \"/api/runtime\")\n          socket (js/WebSocket. ws-url)\n\n          state-ref\n          (atom {})\n\n          runtime\n          (doto (BrowserRuntime. socket state-ref)\n            (shared/add-defaults))\n\n          obj-support\n          (obj-support/start runtime)\n\n          tap-support\n          (tap-support/start runtime obj-support)\n\n          eval-support\n          (eval-support/start runtime obj-support)\n\n          stop\n          (fn []\n            (tap-support/stop tap-support)\n            (obj-support/stop obj-support)\n            (eval-support/stop eval-support)\n            (.close socket))]\n\n      (renv/init-runtime!\n        {:runtime runtime\n         :obj-support obj-support\n         :tap-support tap-support\n         :eval-support eval-support\n         :stop stop})\n\n      (.addEventListener socket \"message\"\n        (fn [e]\n          (shared/process runtime (transit-read (.-data e)))\n          ))\n\n      (.addEventListener socket \"open\"\n        (fn [e]\n          ;; allow shared/process to send messages directly to relay\n          ;; without being coupled to the implementation of exactly how\n          ))\n\n      (.addEventListener socket \"close\"\n        (fn [e]\n          (stop)))\n\n      (.addEventListener socket \"error\"\n        (fn [e]\n          (js/console.warn \"tap-socket error\" e)\n          (stop)\n          )))))\n\n;; want things to start when this ns is in :preloads\n(start)\n"]}