{"version":3,"sources":["athens/parse_renderer.cljs"],"mappings":"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","names":["athens.parse-renderer/page-link","athens.style.color.cljs$core$IFn$_invoke$arity$1","athens.style/OPACITIES","athens.style.color.cljs$core$IFn$_invoke$arity$2","athens.parse-renderer/hashtag","athens.parse-renderer/image","athens.parse-renderer/url-link","athens.parse-renderer/block-ref","athens.parse-renderer/render-page-link","title","node","G__58317","G__58318","G__58319","posh.reagent/pull","athens.db/dsdb","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/+","cljs.core.map.cljs$core$IFn$_invoke$arity$2","el","clojure.string.join.cljs$core$IFn$_invoke$arity$1","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$2","e","athens.router.navigate_uid.cljs$core$IFn$_invoke$arity$2","cljs.core/deref","cljs.core.concat.cljs$core$IFn$_invoke$arity$1","athens.parse-renderer/transform","tree","uid","G__58320","G__58321","instaparse.core/transform","contents","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","athens.components/render-component","cljs.core/first","block","G__58325","G__58326","G__58327","athens.router.navigate_uid.cljs$core$IFn$_invoke$arity$1","G__58328","G__58329","athens.parse-renderer/parse-and-render","tag-name","G__58330","G__58331","G__58332","p__58322","map__58323","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","url","alt","p__58333","map__58334","text","string","result","athens.parser/parse-to-ast","instaparse.core/failure?","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","instaparse.core/get-failure","cljs.core/vec"],"sourcesContent":["(ns athens.parse-renderer\n  (:require\n    [athens.components :as components]\n    [athens.db :as db]\n    [athens.parser :as parser]\n    [athens.router :refer [navigate-uid]]\n    [athens.style :refer [color OPACITIES]]\n    [instaparse.core :as insta]\n    [posh.reagent :refer [pull #_q]]\n    [stylefy.core :as stylefy :refer [use-style]]))\n\n\n(declare parse-and-render)\n\n\n;;; Styles\n\n(def page-link {:cursor \"pointer\"\n                :text-decoration \"none\"\n                :color (color :link-color)\n                :position \"relative\"\n                ::stylefy/manual [[:.formatting {:color (color :body-text-color)\n                                                 :opacity (:opacity-low OPACITIES)}]\n                                  [:&:after {:content \"''\"\n                                             :display \"inline-block\"\n                                             :position \"absolute\"\n                                             :top \"-1px\"\n                                             :right \"-0.2em\"\n                                             :left \"-0.2em\"\n                                             :bottom \"-1px\"\n                                             :z-index -1\n                                             :opacity \"0\"\n                                             :border-radius \"0.25rem\"\n                                             :transition \"all 0.05s ease\"\n                                             :background (color :link-color 0.1)}]\n                                  [:&:hover:after {:opacity \"1\"}]\n                                  [:&:hover {\n                                             :z-index 1}]]})\n\n\n(def hashtag {::stylefy/mode [[:hover {:text-decoration \"underline\"}]]\n              ::stylefy/manual [[:.formatting {:opacity (:opacity-low OPACITIES)}]]})\n\n\n(def image {:border-radius \"0.125rem\"})\n\n\n(def url-link {:cursor \"pointer\"\n               :text-decoration \"none\"\n               :color (color :link-color)\n               ::stylefy/mode [[:hover {:text-decoration \"underline\"}]]})\n\n\n(def block-ref {:font-size \"0.9em\"\n                :transition \"background 0.05s ease\"\n                :border-bottom [[\"1px\" \"solid\" (color :highlight-color)]]\n                ::stylefy/mode [[:hover {:background-color (color :highlight-color :opacity-lower)\n                                         :cursor \"alias\"}]]})\n\n;;; Helper functions for recursive link rendering\n(defn render-page-link\n  \"Renders a page link given the title of the page.\"\n  [title]\n  ;; This method feels a bit hacky: it extracts the DOM tree of its children components and re-wrap the content in double parentheses. Should we do something about it?\n  ;; TODO: touch from inner content should navigate to the inner (children) page, but in this implementation doesn't work\n  (let [node (pull db/dsdb '[*] [:node/title (str \"\" (apply + (map (fn [el]\n                                                             (if (string? el)\n                                                               el\n                                                               (str \"[[\" (clojure.string/join (get-in el [3 2])) \"]]\"))) title)))])]\n    [:span (use-style page-link {:class \"page-link\"})\n     [:span {:class \"formatting\"} \"[[\"]\n     [:span {:on-click (fn [e] (navigate-uid (:block/uid @node) e))} (concat title)]\n     [:span {:class \"formatting\"} \"]]\"]]))\n\n\n;;; Components\n\n\n;; Instaparse transforming docs: https://github.com/Engelberg/instaparse#transforming-the-tree\n(defn transform\n  \"Transforms Instaparse output to Hiccup.\"\n  [tree uid]\n  (insta/transform\n    {:block         (fn [& contents]\n                      (concat [:span {:class \"block\" :style {:white-space \"pre-line\"}}] contents))\n     ;; for more information regarding how custom components are parsed, see `doc/components.md`\n     :component     (fn [& contents]\n                      (components/render-component (first contents) uid))\n     :page-link     (fn [& title] (render-page-link title))\n     :block-ref     (fn [uid]\n                      (let [block (pull db/dsdb '[*] [:block/uid uid])]\n                        [:span (use-style block-ref {:class \"block-ref\"})\n                         [:span {:class \"contents\" :on-click #(navigate-uid uid)} (parse-and-render (:block/string @block) uid)]]))\n     :hashtag       (fn [tag-name]\n                      (let [node (pull db/dsdb '[*] [:node/title tag-name])]\n                        [:span (use-style hashtag {:class    \"hashtag\"\n                                                   :on-click #(navigate-uid (:block/uid @node))}) \n                         [:span {:class \"formatting\"} \"#\"]\n                         [:span {:class \"contents\"} tag-name]]))\n     :url-image     (fn [{url :url alt :alt}]\n                      [:img (use-style image {:class \"url-image\"\n                                              :alt   alt\n                                              :src   url})])\n     :url-link      (fn [{url :url} text]\n                      [:a (use-style url-link {:class \"url-link\"\n                                               :href  url})\n                       text])\n     :bold          (fn [text]\n                      [:strong {:class \"contents bold\"} text])\n     :pre-formatted (fn [text]\n                      [:code text])}\n   tree))\n\n\n(defn parse-and-render\n  \"Converts a string of block syntax to Hiccup, with fallback formatting if it can\u2019t be parsed.\"\n  [string uid]\n  (let [result (parser/parse-to-ast string)]\n    (if (insta/failure? result)\n      [:span\n       {:title (pr-str (insta/get-failure result))\n        :style {:color \"red\"}}\n       string]\n      [vec (transform result uid)])))\n"]}