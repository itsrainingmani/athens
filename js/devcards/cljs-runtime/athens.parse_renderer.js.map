{"version":3,"sources":["athens/parse_renderer.cljs"],"mappings":"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","names":["athens.parse-renderer/page-link","athens.style.color","athens.style/OPACITIES","athens.parse-renderer/hashtag","athens.parse-renderer/image","athens.parse-renderer/url-link","athens.parse-renderer/block-ref","athens.parse-renderer/pull-node-from-string","string","posh.reagent/pull","athens.db/dsdb","cljs.core.apply","cljs.core/+","cljs.core.map","el","clojure.string.join","cljs.core.get_in","athens.parse-renderer/render-page-link","title","node","stylefy.core.use_style","e","athens.router.navigate_uid","cljs.core/deref","cljs.core.concat","athens.parse-renderer/transform","tree","uid","G__56982","G__56983","instaparse.core/transform","contents","athens.components/render-component","cljs.core/first","block","G__56987","G__56988","athens.parse-renderer/parse-and-render","tag-name","parsed-name","p__56984","map__56985","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","url","alt","p__56989","map__56990","text","result","athens.parser/parse-to-ast","instaparse.core/failure?","cljs.core.pr_str","instaparse.core/get-failure","cljs.core/vec"],"sourcesContent":["(ns athens.parse-renderer\n  (:require\n    [athens.components :as components]\n    [athens.db :as db]\n    [athens.parser :as parser]\n    [athens.router :refer [navigate-uid]]\n    [athens.style :refer [color OPACITIES]]\n    [instaparse.core :as insta]\n    [posh.reagent :refer [pull #_q]]\n    [stylefy.core :as stylefy :refer [use-style]]))\n\n\n(declare parse-and-render)\n\n\n;;; Styles\n\n(def page-link {:cursor \"pointer\"\n                :text-decoration \"none\"\n                :color (color :link-color)\n                :position \"relative\"\n                ::stylefy/manual [[:.formatting {:color (color :body-text-color)\n                                                 :opacity (:opacity-low OPACITIES)}]\n                                  [:&:after {:content \"''\"\n                                             :display \"inline-block\"\n                                             :position \"absolute\"\n                                             :top \"-1px\"\n                                             :right \"-0.2em\"\n                                             :left \"-0.2em\"\n                                             :bottom \"-1px\"\n                                             :z-index -1\n                                             :opacity \"0\"\n                                             :border-radius \"0.25rem\"\n                                             :transition \"all 0.05s ease\"\n                                             :background (color :link-color 0.1)}]\n                                  [:&:hover:after {:opacity \"1\"}]\n                                  [:&:hover {:z-index 1}]]})\n\n\n(def hashtag {::stylefy/mode [[:hover {:text-decoration \"underline\"}]]\n              ::stylefy/manual [[:.formatting {:opacity (:opacity-low OPACITIES)}]]})\n\n\n(def image {:border-radius \"0.125rem\"})\n\n\n(def url-link {:cursor \"pointer\"\n               :text-decoration \"none\"\n               :color (color :link-color)\n               ::stylefy/mode [[:hover {:text-decoration \"underline\"}]]})\n\n\n(def block-ref {:font-size \"0.9em\"\n                :transition \"background 0.05s ease\"\n                :border-bottom [[\"1px\" \"solid\" (color :highlight-color)]]\n                ::stylefy/mode [[:hover {:background-color (color :highlight-color :opacity-lower)\n                                         :cursor \"alias\"}]]})\n\n;;; Helper functions for recursive link rendering\n(defn pull-node-from-string\n  \"Gets a block's node from the display string name (or partially parsed string tree)\"\n  [string]\n  (pull db/dsdb '[*] [:node/title (str \"\" (apply + (map (fn [el]\n                                                          (if (string? el)\n                                                            el\n                                                            (str \"[[\" (clojure.string/join (get-in el [3 2])) \"]]\"))) string)))]))\n\n\n(defn render-page-link\n  \"Renders a page link given the title of the page.\"\n  [title]\n  ;; This method feels a bit hacky: it extracts the DOM tree of its children components and re-wrap the content in double parentheses. Should we do something about it?\n  ;; TODO: touch from inner content should navigate to the inner (children) page, but in this implementation doesn't work\n  (let [node (pull-node-from-string title)]\n    [:span (use-style page-link {:class \"page-link\"})\n     [:span {:class \"formatting\"} \"[[\"]\n     [:span {:on-click (fn [e] (.. e stopPropagation) (navigate-uid (:block/uid @node) e))} (concat title)]\n     [:span {:class \"formatting\"} \"]]\"]]))\n\n\n;;; Components\n\n\n;; Instaparse transforming docs: https://github.com/Engelberg/instaparse#transforming-the-tree\n(defn transform\n  \"Transforms Instaparse output to Hiccup.\"\n  [tree uid]\n  (insta/transform\n    {:block         (fn [& contents]\n                      (concat [:span {:class \"block\" :style {:white-space \"pre-line\"}}] contents))\n      ;; for more information regarding how custom components are parsed, see `doc/components.md`\n     :component     (fn [& contents]\n                      (components/render-component (first contents) uid))\n     :page-link     (fn [& title] (render-page-link title))\n     :block-ref     (fn [uid]\n                      (let [block (pull db/dsdb '[*] [:block/uid uid])]\n                        [:span (use-style block-ref {:class \"block-ref\"})\n                         [:span {:class \"contents\" :on-click #(navigate-uid uid)} (parse-and-render (:block/string @block) uid)]]))\n     :hashtag       (fn [& tag-name]\n                      (let [parsed-name (concat tag-name)\n                            node        (pull db/dsdb '[*] [:node/title parsed-name])]\n                        [:span (use-style hashtag {:class    \"hashtag\"\n                                                   :on-click #(navigate-uid (:block/uid @node))})\n                         [:span {:class \"formatting\"} \"#\"]\n                         [:span {:class \"contents\"} parsed-name]]))\n     :url-image     (fn [{url :url alt :alt}]\n                      [:img (use-style image {:class \"url-image\"\n                                              :alt   alt\n                                              :src   url})])\n     :url-link      (fn [{url :url} text]\n                      [:a (use-style url-link {:class \"url-link\"\n                                               :href  url})\n                       text])\n     :bold          (fn [text]\n                      [:strong {:class \"contents bold\"} text])\n     :pre-formatted (fn [text]\n                      [:code text])}\n   tree))\n\n\n(defn parse-and-render\n  \"Converts a string of block syntax to Hiccup, with fallback formatting if it can\u2019t be parsed.\"\n  [string uid]\n  (let [result (parser/parse-to-ast string)]\n    (if (insta/failure? result)\n      [:span\n       {:title (pr-str (insta/get-failure result))\n        :style {:color \"red\"}}\n       string]\n      [vec (transform result uid)])))\n"]}