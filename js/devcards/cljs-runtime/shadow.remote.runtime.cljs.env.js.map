{"version":3,"sources":["shadow/remote/runtime/cljs/env.cljs"],"mappings":";;;AAGA,AAAA,AAAAA,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC;AAAA;AAAA,AAAA,AAASC,AAAY,AAAA,AAACC;;AACtB,AAAA,AAAAP,AAAAC,AAAAC,AAAAC,AAAAC,AAAAI;AAAA;AAAA,AAAA,AAASC,AAAe,AAAA,AAACF;;AAEzB,AAAA,AAAMG;AAAN,AACE,AAAME,AAAY,AAACC,AAAI,AAAA,AAAAF,AAACG,AAAMR;AAA9B,AAAAK,AACMI,AAAMN;AACNO,AAAQ,AAACH,AAAI,AAACC,AAAKC;AACnBE,AAAY,AAACC,AAAeF,AAAQJ;AAH1C,AAOE,AAAOK,AAAYA;;AAAnB,AACE,AACE,AAACE,AAAOF;AADV;;AAAA,AAKM,AAACG,AACC,AASF;AATOH,AAAYI;AAAjB,AACE,AAAAC,AAA2C,AAACI,AAAIX,AAAKM;AAArDC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAAA,AAAsCO;AAAtC,AAAAH,AAAAJ,AAAA,AAAcK;AAAd,AAAAD,AAAAJ,AAAA,AAAyBM;AAAzB,AACE,AAAI,AAACE,AAAKb,AAAYU;AACpBV;;AACA,AAAMc,AAAQ,AAAAC,AAAA,AAAArB,AAAUL;AAAV,AAAA,AAAA0B,AAAAA,AAACJ,AAAAA,AAAAA;;AAAf,AACE,AAACK,AAAM3B,AAAY4B,AAAMb,AAAOU;;AAChC,AAACI,AAAKlB,AAAYI;;;AAC1BJ,AACAA;;;;;;;;AAGd,AAAA,AAAMmB,AAAeC;AAArB,AACE,AAACC,AAAOhC,AAAY+B;;AAGpB,AAAM,AAAA,AAAA1B,AAAC4B,AAAK9B;AAAZ,AACE,AAACC;;AADH;;;AAGF,AAAA,AAAM8B,AAAiBnB,AAAOM,AAAWC,AAAQa;AAAjD,AACE,AAAAC,AAAoB,AAAA,AAAA/B,AAACe,AAAKpB,AAAYe;AAAtC,AAAA,AAAA,AAAAqB,AAAA;AAAA;AAAA,AAAAA,AAAYX;AAAZ,AACE,AAAAY,AAAgC,AAAA,AAAAhC,AAACe,AAAKjB,AAAeY;AAArDsB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApB,AAAA,AAAAoB,AAAA,AAAA,AAAA,AAAA,AAAAnB,AAAAC,AAAAkB,AAAAA;AAAAA,AAA2BC;AAA3B,AAAAlB,AAAAiB,AAAA,AAAcF;AAAd,AACE,AAACA,AAAAA,AAAAA,AAAQV,AAAAA;;AACT,AAACE,AAAM3B,AAAYuC,AAAOxB;;;AAE9B,AAAA,AAAA,AAAA,AAAA,AAAA,AAACY,AAAMxB,AAAeyB,AAAMb,AAAgBA,AACIM,AACHC,AACAa;;AAE7C,AAAA,AAAA9B,AAAOL;AAAP,AACE,AAACI;;AADH","names":["js/shadow","js/shadow.remote","js/shadow.remote.runtime","js/shadow.remote.runtime.cljs","js/shadow.remote.runtime.cljs.env","js/shadow.remote.runtime.cljs.env.runtime-ref","shadow.remote.runtime.cljs.env/runtime-ref","cljs.core.atom","js/shadow.remote.runtime.cljs.env.extensions-ref","shadow.remote.runtime.cljs.env/extensions-ref","shadow.remote.runtime.cljs.env/start-all-extensions!","cljs.core/deref","started-set","cljs.core/set","cljs.core/keys","exts","ext-set","pending-set","clojure.set.difference","cljs.core/empty?","cljs.core.reduce","ext-id","map__59816","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","depends-on","init-fn","ext","cljs.core/some","started","G__59818","cljs.core.swap_BANG_","cljs.core/assoc","cljs.core.disj","shadow.remote.runtime.cljs.env/init-runtime!","env","cljs.core/reset!","cljs.core/seq","shadow.remote.runtime.cljs.env/init-extension!","stop-fn","temp__5739__auto__","map__59819","old","cljs.core/dissoc"],"sourcesContent":["(ns shadow.remote.runtime.cljs.env\n  (:require [clojure.set :as set]))\n\n(defonce runtime-ref (atom nil))\n(defonce extensions-ref (atom {}))\n\n(defn start-all-extensions! []\n  (let [started-set (set (keys @runtime-ref))\n        exts @extensions-ref\n        ext-set (set (keys exts))\n        pending-set (set/difference ext-set started-set)]\n\n    ;; FIXME: this is dumb, should properly sort things in dependency order\n    ;; instead of looping over\n    (loop [pending-set pending-set]\n      (cond\n        (empty? pending-set)\n        ::done!\n\n        :else\n        (-> (reduce\n              (fn [pending-set ext-id]\n                (let [{:keys [depends-on init-fn] :as ext} (get exts ext-id)]\n                  (if (some pending-set depends-on)\n                    pending-set\n                    (let [started (init-fn @runtime-ref)]\n                      (swap! runtime-ref assoc ext-id started)\n                      (disj pending-set ext-id)))))\n              pending-set\n              pending-set)\n            (recur))))))\n\n(defn init-runtime! [env]\n  (reset! runtime-ref env)\n\n\n  (when (seq @extensions-ref)\n    (start-all-extensions!)))\n\n(defn init-extension! [ext-id depends-on init-fn stop-fn]\n  (when-some [started (get @runtime-ref ext-id)]\n    (let [{:keys [stop-fn] :as old} (get @extensions-ref ext-id)]\n      (stop-fn started)\n      (swap! runtime-ref dissoc ext-id)))\n\n  (swap! extensions-ref assoc ext-id {:ext-id ext-id\n                                      :depends-on depends-on\n                                      :init-fn init-fn\n                                      :stop-fn stop-fn})\n\n  (when @runtime-ref\n    (start-all-extensions!)))"]}