{"version":3,"sources":["athens/views/devtool.cljs"],"mappings":"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","names":["athens.views.devtool/container-style","athens.style.color.cljs$core$IFn$_invoke$arity$1","athens.views.devtool/tabs-style","garden.color/darken","athens.views.devtool/tabs-section-style","athens.views.devtool/panels-style","athens.views.devtool/current-location-style","athens.views.devtool/current-location-name-style","athens.views.devtool/current-location-controls-style","athens.views.devtool/devtool-table-style","athens.views.devtool/edn-viewer-style","athens.views.devtool/query-input-style","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","athens.views.textinput/textinput-style","athens.views.devtool/initial-state","js/athens","js/athens.views","js/athens.views.devtool","js/athens.views.devtool.state*","athens.views.devtool/state*","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","athens.views.devtool/ds-nav-impl","_","k","v","pred__60891","expr__60892","G__60894","G__60895","cljs.core/=","G__60896","cljs.core/deref","G__60897","G__60898","datascript.core/pull","athens.db/dsdb","athens.views.devtool/restore-db!","db","datascript.core.reset_conn_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/PROTOCOL_SENTINEL","cljs.core/PersistentHashMap","this","cljs.core/with-meta","cljs.core/PersistentArrayMap","datascript.db/TxReport","cljs.core.into.cljs$core$IFn$_invoke$arity$2","datascript.db/Datom","cljs.core/vec","datascript.db/DB","me.tonsky.persistent-sorted-set/BTSet","athens.views.devtool/data-table","limit","headers","rows","add-nav!","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$1","iter__4582__auto__","s__60900","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__60902","cljs.core/chunk-buffer","i__60901","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__60899","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","h","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","s__60904","b__60906","i__60905","iter__60903","row","cljs.core.take.cljs$core$IFn$_invoke$arity$2","G__60907","G__60912","cljs.core/meta","s__60909","b__60911","i__60910","iter__60908","s__60914","b__60916","i__60915","iter__60913","i","cljs.core.range.cljs$core$IFn$_invoke$arity$1","cell","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","athens.views.buttons/button","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/+","athens.views.devtool/edn-viewer","data","sb__4720__auto__","goog.string/StringBuffer","*print-newline*-orig-val__60917","cljs.core/*print-newline*","*print-fn*-orig-val__60918","cljs.core/*print-fn*","*print-newline*-temp-val__60919","*print-fn*-temp-val__60920","x__4721__auto__","cljs.pprint.pprint.cljs$core$IFn$_invoke$arity$1","athens.views.devtool/coll-viewer","coll","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","idx","item","athens.views.devtool/map-viewer","m","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__60921","vec__60922","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","athens.views.devtool/maps-viewer","ms","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","cljs.core/keys","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","s__60926","b__60928","i__60927","iter__60925","athens.views.devtool/tuples-viewer","colls","max-count","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/max","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$1","s__60930","b__60932","i__60931","iter__60929","athens.views.devtool/associative-not-sequential?","x","cljs.core/associative?","cljs.core/sequential?","athens.views.devtool/sequence-of-maps?","cljs.core/every?","cljs.core/map?","athens.views.devtool/tuples?","athens.views.devtool/viewers","cljs.core/constantly","cljs.core/coll?","athens.views.devtool/viewer-preference","athens.views.devtool/applicable-viewers","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p__60934","map__60935","cljs.core/hash-map","pred","p1__60933#","cljs.core.sort_by.cljs$core$IFn$_invoke$arity$2","athens.views.devtool/indexed-viewers","cljs.core.juxt.cljs$core$IFn$_invoke$arity$2","cljs.core/identity","athens.views.devtool/data-browser","state","p1__60937#","navs","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$variadic","cljs.core/update","cljs.core/conj","navved-data","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__60938","vec__60939","d","clojure.datafy/nav","clojure.datafy/datafy","datafied-data","applicable-vs","viewer-name","or__4185__auto__","viewer","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","s__60943","b__60945","i__60944","iter__60942","nav","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","s","cljs.core.update.cljs$core$IFn$_invoke$arity$5","cljs.core/subvec","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","js/module$node_modules$$material_ui$icons$index.ChevronLeft","cljs.core/type","s__60947","b__60949","i__60948","iter__60946","click-fn","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/name","datascript.core/db?","athens.views.devtool/handler","n","n-child","datascript.core.transact_BANG_.cljs$core$IFn$_invoke$arity$2","p__60950","map__60951","athens.views.devtool/eval-with-sci","eval-str","vec__60953","bindings","datascript.core/q","datascript.core/pull-many","datascript.core/entity","ok?","result","e60956","sci.core.eval_string.cljs$core$IFn$_invoke$arity$2","js/Error","e","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","cljs.core/not","athens.views.devtool/eval-box!","athens.views.devtool/update-box!","athens.views.devtool/listener","tx-report","datascript.core.listen_BANG_.cljs$core$IFn$_invoke$arity$3","athens.views.devtool/handle-box-change!","athens.views.devtool/handle-shift-return!","athens.views.devtool/insert-tab","pos","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","athens.views.devtool/handle-tab-key!","t","athens.views.devtool/handle-box-key-down!","key","shift?","goog.events.KeyCodes/ENTER","goog.events.KeyCodes/TAB","athens.views.devtool/error-component","error","p__60957","map__60958","athens.views.devtool/query-component","komponentit.autosize/textarea","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$2","p__60960","map__60961","athens.views.devtool/txes-component","tx-reports","athens.views.devtool/devtool-prompt-el","G__60963","re-frame.core/dispatch","js/module$node_modules$$material_ui$icons$index.Build","athens.views.devtool/devtool-close-el","G__60964","js/module$node_modules$$material_ui$icons$index.Clear","athens.views.devtool/devtool-el","devtool?","map__60965","active-panel","switch-panel","panel","js/module$node_modules$$material_ui$icons$index.ShortText","js/module$node_modules$$material_ui$icons$index.History","G__60967","cljs.core/Keyword","athens.views.devtool/devtool-component","G__60968","re-frame.core/subscribe","cljs.core/chunk-first"],"sourcesContent":["(ns athens.views.devtool\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.db :as db :refer [dsdb]]\n    [athens.style :refer [color]]\n    [athens.views.buttons :refer [button]]\n    [athens.views.textinput :refer [textinput-style]]\n    [cljs.pprint :as pp]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [clojure.core.protocols :as core-p]\n    [clojure.datafy :refer [nav datafy]]\n    [datascript.core :as d]\n    [datascript.db]\n    [garden.color :refer [darken]]\n    [komponentit.autosize :as autosize]\n    [me.tonsky.persistent-sorted-set]\n    [re-frame.core :refer [subscribe dispatch]]\n    [reagent.core :as r]\n    [reagent.ratom]\n    [sci.core :as sci]\n    [stylefy.core :as stylefy :refer [use-style]])\n  (:import\n    (goog.events\n      KeyCodes)))\n\n\n;;; Styles\n\n\n(def container-style\n  {:grid-area     \"devtool\"\n   :flex-direction \"column\"\n   :background    (color :background-minus-1)\n   :position      \"relative\"\n   :width         \"100vw\"\n   :height        \"33vh\"\n   :display       \"flex\"\n   :overflow-y    \"auto\"\n   :right         0\n   :z-index       2})\n\n\n(def tabs-style\n  {:padding \"0 0.5rem\"\n   :flex \"0 0 auto\"\n   :background (darken (color :background-minus-1) 5)\n   :display \"flex\"\n   :align-items \"stretch\"\n   :justify-content \"space-between\"\n   ::stylefy/manual [[:button {:border-radius \"0\"}]]})\n\n\n(def tabs-section-style\n  {:display \"flex\"\n   :align-items \"stretch\"})\n\n\n(def panels-style\n  {:overflow-y \"auto\"\n   :padding \"0.5rem\"})\n\n\n(def current-location-style\n  {:display \"flex\"\n   :align-items \"center\"\n   :flex \"1 1 100%\"\n   :font-size \"14px\"\n   :border-bottom [[\"1px solid\" (darken (color :background-minus-1) 10)]]})\n\n\n(def current-location-name-style\n  {:font-weight \"bold\"\n   :font-size \"inherit\"\n   :margin-block \"0\"\n   :margin-inline-start \"1em\"\n   :margin-inline-end \"1em\"})\n\n\n(def current-location-controls-style {:margin-inline-start \"1em\"})\n\n\n(def devtool-table-style\n  {:border-collapse \"collapse\"\n   :font-size \"12px\"\n   :font-family \"IBM Plex Sans Condensed\"\n   :letter-spacing \"-0.01em\"\n   :margin \"0.5rem 0 0\"\n   :border-spacing \"0\"\n   :min-width \"100%\"\n   ::stylefy/manual [[:td {:border-top [[\"1px solid \" (color :border-color)]]\n                           :padding \"0.125rem\"}]\n                     [:tbody {:vertical-align \"top\"}]\n                     [:th {:text-align \"left\" :padding \"0.125rem 0.125rem\" :white-space \"nowrap\"}]\n                     [:tr {:transition \"all 0.05s ease\"}]\n                     [:td:first-child :th:first-child {:padding-left \"0.5rem\"}]\n                     [:td:last-child :th-last-child {:padding-right \"0.5rem\"}]\n                     [:tbody [:tr:hover {:cursor \"pointer\"\n                                         :background (darken (color :background-minus-1) 2.5)\n                                         :color (color :header-text-color)}]]\n                     [:td>ul {:padding \"0\"\n                              :margin \"0\"\n                              :list-style \"none\"}]\n                     [:td [:li {:margin \"0 0 0.25rem\"\n                                :padding-top \"0.25rem\";\n                                :border-top (str \"1px solid \" (color :border-color))}]]\n                     [:td [:li:first-child {:border-top \"none\" :margin-top \"0\" :padding-top \"0\"}]]\n                     [:a {:color (color :link-color)}]\n                     [:a:hover {:text-decoration \"underline\"}]]})\n\n\n(def edn-viewer-style {:font-size \"12px\"})\n\n\n(def query-input-style\n  (merge textinput-style {:width \"100%\"\n                          :min-height \"2.5rem\"\n                          :font-size \"12px\"\n                          :background (color :background-color)\n                          :font-family \"IBM Plex Mono\"}))\n\n\n;;; Components\n\n\n(def initial-state\n  {:eval-str\n   \"(d/q '[:find [(pull ?e [*]) ...]\n       :where [?e :node/title]]\n    @athens/db)\"\n   :tx-reports []\n   :active-panel :query})\n\n\n(defonce state* (r/atom initial-state))\n\n\n(defn ds-nav-impl\n  [_ k v]\n  (condp = k\n    :db/id (d/pull @dsdb '[* :block/_children] v) ; TODO add inverse refs here\n    v)) ; TODO add unique idents here as well\n\n\n(defn restore-db!\n  [db]\n  (d/reset-conn! dsdb db {:time-travel true}))\n\n\n(extend-protocol core-p/Datafiable\n  cljs.core/PersistentHashMap\n  (datafy [this]\n    (with-meta this {`core-p/nav ds-nav-impl}))\n  cljs.core/PersistentArrayMap\n  (datafy [this]\n    (with-meta this {`core-p/nav ds-nav-impl}))\n  datascript.db/TxReport\n  (datafy [this]\n    (into {} this))\n  datascript.db/Datom\n  (datafy [this]\n    (vec this))\n  datascript.db/DB\n  (datafy [this]\n    (into {} this))\n  me.tonsky.persistent-sorted-set/BTSet\n  (datafy [this]\n    (vec this)))\n\n\n(defn data-table\n  [_ _ _]\n  (let [limit (r/atom 20)]\n    (fn [headers rows add-nav!]\n      [:div\n       [:table (use-style devtool-table-style)\n        [:thead\n         [:tr (for [h headers]\n                ^{:key h} [:th h])]]\n        [:tbody\n         (doall\n           (for [row (take @limit rows)]\n\n             ^{:key row}\n             [:tr {:on-click #(add-nav! [(first row)\n                                         (-> row meta :row-value)])}\n              (for [i (range (count row))]\n                (let [cell (get row i)]\n                  ^{:key (str row i cell)}\n                  [:td (if (nil? cell)\n                         \"\"\n                         (pr-str cell))]))]))]] ; use the edn-viewer here as well?\n       (when (< @limit (count rows))\n         [button {:on-click #(swap! limit + 10)\n                  :style {:width \"100%\"\n                          :justify-content \"center\"\n                          :margin \"0.25rem 0\"}}\n          \"Load More\"])])))\n\n\n; TODO add truncation of long strings here\n(defn edn-viewer\n  [data _]\n  [:pre (use-style edn-viewer-style) [:code (with-out-str (cljs.pprint/pprint data))]])\n\n\n(defn coll-viewer\n  [coll add-nav!]\n  [data-table [\"idx\" \"value\"]\n   (->> coll\n        (map-indexed (fn [idx item]\n                       (with-meta [idx item] {:row-value item})))\n        vec)\n   add-nav!])\n\n\n(defn map-viewer\n  [m add-nav!]\n  [data-table [\"key\" \"value\"]\n   (map (fn [[k v]] (with-meta [k v] {:row-value v})) m)\n   add-nav!])\n\n\n(defn maps-viewer\n  [ms add-nav!]\n  (let [headers (into [\"idx\"] (->> ms (mapcat keys) distinct))\n        rows (map-indexed (fn [idx m]\n                            (with-meta (into [idx]\n                                             (for [h (rest headers)] (get m h)))\n                              {:row-value m}))\n                          ms)]\n    [data-table headers rows add-nav!]))\n\n\n(defn tuples-viewer\n  [colls add-nav!]\n  (let [max-count (->> colls\n                       (map count)\n                       (apply max))\n        headers (into [\"idx\"] (range max-count))\n        rows (map-indexed (fn [idx coll]\n                            (with-meta (into [idx]\n                                             (for [i (range max-count)] (get coll i)))\n                              {:row-value coll})\n                            colls))]\n    [data-table headers rows add-nav!]))\n\n\n(defn associative-not-sequential?\n  [x]\n  (and (associative? x)\n       (not (sequential? x))))\n\n\n(defn sequence-of-maps?\n  [x]\n  (and (sequential? x)\n       (every? map? x)))\n\n\n(defn tuples?\n  [x]\n  (and (sequential? x)\n       (every? sequential? x)))\n\n\n(def viewers\n  [{:athens.viewer/id :athens.browser/edn\n    :athens.viewer/pred (constantly true)\n    :athens.viewer/fn edn-viewer}\n   {:athens.viewer/id :athens.browser/coll\n    :athens.viewer/pred coll?\n    :athens.viewer/fn coll-viewer}\n   {:athens.viewer/id :athens.browser/map\n    :athens.viewer/pred associative-not-sequential?\n    :athens.viewer/fn map-viewer}\n   {:athens.viewer/id :athens.browser/maps\n    :athens.viewer/pred sequence-of-maps?\n    :athens.viewer/fn maps-viewer}\n   {:athens.viewer/id :athens.browser/tuples\n    :athens.viewer/pred tuples?\n    :athens.viewer/fn tuples-viewer}])\n\n\n(def viewer-preference\n  [:athens.browser/maps\n   :athens.browser/map\n   :athens.browser/tuples\n   :athens.browser/coll\n   :athens.browser/edn])\n\n\n(defn applicable-viewers\n  [data]\n  (->> viewers\n       (filter (fn [{:keys [athens.viewer/pred]}] (pred data)))\n       (map :athens.viewer/id)\n       (sort-by #(.indexOf viewer-preference %))))\n\n\n(def indexed-viewers\n  (->> viewers\n       (map (juxt :athens.viewer/id identity))\n       (into {})))\n\n\n(defn data-browser\n  [_]\n  (let [state (r/atom {:navs []})]\n    (fn [data]\n      (let [navs (:navs @state)\n            add-nav! #(swap! state update :navs conj %)\n            navved-data (reduce (fn [d [k v]] (nav (datafy d) k v))\n                                data\n                                navs)\n            datafied-data (datafy navved-data)\n            applicable-vs (applicable-viewers datafied-data)\n            viewer-name (or (:viewer @state) (first applicable-vs))\n            viewer (get-in indexed-viewers [viewer-name :athens.viewer/fn])]\n        [:div\n         [:div {:style {:display \"flex\"\n                        :flex-direction \"row\"\n                        :flex-wrap \"no-wrap\"\n                        :align-items \"stretch\"\n                        :justify-content \"space-between\"}}\n          [:div (use-style current-location-style)\n           (doall\n             (for [i (-> navs count range)]\n               (let [nav (get navs i)]\n                 ^{:key i}\n                 [button {:style {:padding \"0.125rem 0.25rem\"}\n                          :on-click #(swap! state (fn [s]\n                                                    (-> s\n                                                        (update :navs subvec 0 i)\n                                                        (dissoc :viewer))))}\n                  [:<> [:> mui-icons/ChevronLeft] [:span (first nav)]]])))\n           [:h3 (use-style current-location-name-style) (pr-str (type navved-data))]\n           [:div (use-style current-location-controls-style)\n            [:span \"View as \"]\n            (for [v applicable-vs]\n              (let [click-fn #(swap! state assoc :viewer v)]\n                ^{:key v}\n                [button {:on-click click-fn\n                         :active (= v viewer-name)}\n                 (name v)]))]]]\n         (when (d/db? navved-data)\n           [button {:on-click #(restore-db! navved-data)\n                    :primary true}\n            \"Restore this db\"])\n         [viewer datafied-data add-nav!]]))))\n\n\n(defn handler\n  []\n  (let [n (inc (:max-eid @dsdb))\n        n-child (inc n)]\n    (d/transact! dsdb [{:node/title     (str \"Test Page \" n)\n                        :block/uid      (str \"uid-\" n)\n                        :block/children [{:block/string (str \"Test Block\" n-child) :block/uid (str \"uid-\" n-child)}]}])))\n\n\n(defn eval-with-sci\n  [{:keys [eval-str] :as state}]\n  (let [bindings {'athens/db dsdb\n                  'd/pull d/pull\n                  'd/q d/q\n                  'd/pull-many d/pull-many\n                  'd/entity d/entity}\n        [ok? result] (try\n                       [true (sci/eval-string eval-str {:bindings bindings})]\n                       (catch js/Error e [false e]))]\n    (-> state\n        (assoc :result result)\n        (assoc :error (not ok?)))))\n\n\n(defn eval-box!\n  []\n  (swap! state* eval-with-sci))\n\n\n(defn update-box!\n  [s]\n  (swap! state* assoc :eval-str s))\n\n\n(defn listener\n  [tx-report]\n  (swap! state* update :tx-reports conj tx-report)\n  (when (not (:error @state*))\n    (eval-box!)))\n\n\n(d/listen! dsdb :devtool/open listener)\n\n\n(defn handle-box-change!\n  [e]\n  (update-box! (-> e .-target .-value)))\n\n\n(defn handle-shift-return!\n  [e]\n  (.preventDefault e)\n  (eval-box!))\n\n\n(defn insert-tab\n  [s pos]\n  (str (subs s 0 pos) \"  \" (subs s pos)))\n\n\n(defn handle-tab-key!\n  [e]\n  (let [t (.-target e)\n        v (.-value t)\n        pos (.-selectionStart t)]\n    (.preventDefault e)\n    (update-box! (insert-tab v pos))\n    (set! (.-selectionEnd t) (+ 2 pos))))\n\n\n(defn handle-box-key-down!\n  [e]\n  (let [key (.. e -keyCode)\n        shift? (.. e -shiftKey)]\n    (cond\n      (= key KeyCodes.ENTER) (when shift? (handle-shift-return! e))\n      (= key KeyCodes.TAB) (handle-tab-key! e)\n      :else nil)))\n\n\n(defn error-component\n  [error]\n  [:div {:style {:color \"red\"}}\n   (str error)])\n\n\n(defn query-component\n  [{:keys [eval-str result error]}]\n  [:div (use-style {:height \"100%\"})\n   [autosize/textarea (use-style query-input-style\n                                 {:value eval-str\n                                  :resize \"none\"\n                                  :on-change handle-box-change!\n                                  :on-key-down handle-box-key-down!})]\n   (if-not error\n     [data-browser result]\n     [error-component result])])\n\n\n(defn txes-component\n  [{:keys [tx-reports]}]\n  [data-browser tx-reports])\n\n\n(defn devtool-prompt-el\n  []\n  [button {:on-click #(dispatch [:devtool/toggle])\n           :primary true\n           :style {:font-size \"11px\"}}\n   [:<>\n    [:> mui-icons/Build]\n    [:span \"Toggle devtool\"]]])\n\n\n(defn devtool-close-el\n  []\n  [button {:on-click #(dispatch [:devtool/toggle])}\n   [:> mui-icons/Clear]])\n\n\n(defn devtool-el\n  [devtool? state]\n  (when devtool?\n    (let [{:keys [active-panel]} @state\n          switch-panel (fn [panel] (swap! state assoc :active-panel panel))]\n      [:div (use-style container-style)\n       [:nav (use-style tabs-style)\n        [:div (use-style tabs-section-style)\n         [button {:on-click #(switch-panel :query)\n                  :active (= active-panel :query)}\n          [:<> [:> mui-icons/ShortText] [:span \"Query\"]]]\n         [button {:on-click #(switch-panel :txes)\n                  :active (= active-panel :txes)}]\n         [:<> [:> mui-icons/History] [:span \"Transactions\"]]]\n        [devtool-close-el]]\n       [:div (use-style panels-style)\n        (case active-panel\n          :query [query-component @state]\n          :txes [txes-component @state])]])))\n\n\n(defn devtool-component\n  []\n  (let [devtool? @(subscribe [:devtool/open])]\n    [devtool-el devtool? state*]))\n"]}