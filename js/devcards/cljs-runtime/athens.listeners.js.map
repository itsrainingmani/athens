{"version":3,"sources":["athens/listeners.cljs"],"mappings":"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","names":["athens.listeners/multi-block-selection","e","cljs.core/deref","selected-items","re_frame.core.subscribe","cljs.core/not-empty","shift","key-code","direction","athens.keybindings/arrow-key-direction","cljs.core._EQ_","goog.events.KeyCodes/ENTER","re-frame.core/dispatch","cljs.core/first","goog.events.KeyCodes/BACKSPACE","and__4115__auto__","cljs.core/last","athens.listeners/get-dataset-uid","el","block","uid","athens.listeners/multi-block-select-over","target","related-target","target-uid","_related-target-uid","_set-items","cljs.core/set","athens.listeners/multi-block-select-up","_","goog.events/unlisten","js/window","goog.events.EventType/MOUSEOVER","goog.events.EventType/MOUSEUP","athens.listeners/unfocus","editing-uid","closest-block","closest-block-header","closest-page-header","closest","or__4126__auto__","athens.listeners/mouse-down-outside-athena","athena?","athens.listeners/key-down","key","ctrl","meta","goog.events.KeyCodes/Z","goog.events.KeyCodes/K","goog.events.KeyCodes/G","goog.events.KeyCodes/R","goog.events.KeyCodes/L","athens.listeners/init","goog.events/listen","goog.events.EventType/MOUSEDOWN","goog.events.EventType/KEYDOWN"],"sourcesContent":["(ns athens.listeners\n  (:require\n    ;;[athens.util :refer [get-day]]\n    [athens.keybindings :refer [arrow-key-direction]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [goog.events :as events]\n    [re-frame.core :refer [dispatch subscribe]])\n  (:import\n    (goog.events\n      EventType\n      KeyCodes)))\n\n\n;; -- shift-up/down when multi-block selection ---------------------------\n\n;; can no longer use on-key-down from keybindings.cljs. textarea is no longer focused, so events must be handled globally\n(defn multi-block-selection\n  [e]\n  (let [selected-items @(subscribe [:selected/items])]\n    (when (not-empty selected-items)\n      (let [shift     (.. e -shiftKey)\n            key-code (.. e -keyCode)\n            direction (arrow-key-direction e)]\n        ;; what should tab/shift-tab do? roam and workflowy have slightly different behavior\n        (cond\n          (= key-code KeyCodes.ENTER) (do\n                                        (dispatch [:editing/uid (first selected-items)])\n                                        (dispatch [:selected/clear-items]))\n          (= key-code KeyCodes.BACKSPACE) (dispatch [:selected/delete selected-items])\n          (and shift (= direction :up)) (dispatch [:selected/up selected-items])\n          (and shift (= direction :down)) (dispatch [:selected/down selected-items])\n          (= direction :up) (do\n                              (.preventDefault e)\n                              (dispatch [:selected/clear-items])\n                              (dispatch [:up (first selected-items)]))\n          (= direction :down) (do\n                                (.preventDefault e)\n                                (dispatch [:selected/clear-items])\n                                (dispatch [:down (last selected-items)])))))))\n\n\n;; -- When dragging across multiple blocks to select ---------------------\n\n(defn get-dataset-uid\n  [el]\n  (let [block (when el (.. el (closest \".block-container\")))\n        uid (when block (.. block -dataset -uid))]\n    uid))\n\n\n(defn multi-block-select-over\n  \"If going over something, add it.\n  If leaving it, remove\"\n  [e]\n  (let [target             (.. e -target)\n        related-target     (.. e -relatedTarget)\n        target-uid         (get-dataset-uid target)\n        _related-target-uid (get-dataset-uid related-target)\n        selected-items     @(subscribe [:selected/items])\n        _set-items (set selected-items)]\n    (.. e stopPropagation)\n    (.. target blur)\n    (dispatch [:selected/add-item target-uid])))\n\n\n(defn multi-block-select-up\n  [_]\n  (events/unlisten js/window EventType.MOUSEOVER multi-block-select-over)\n  (events/unlisten js/window EventType.MOUSEUP multi-block-select-up))\n\n;; -- When user clicks elsewhere -----------------------------------------\n\n(defn unfocus\n  [e]\n  (let [selected-items @(subscribe [:selected/items])\n        editing-uid    @(subscribe [:editing/uid])\n        closest-block (.. e -target (closest \".block-content\"))\n        closest-block-header (.. e -target (closest \".block-header\"))\n        closest-page-header (.. e -target (closest \".page-header\"))\n        closest (or closest-block closest-block-header closest-page-header)]\n    (when (not-empty selected-items)\n      (dispatch [:selected/clear-items]))\n    (when (and (nil? closest) editing-uid)\n      (dispatch [:editing/uid nil]))))\n\n\n;; -- Turn read block or header into editable on mouse down --------------\n\n;; (defn edit-block\n;;   [e]\n;;   ;; Consider refactor if we add more editable targets\n;;   (let [closest-block (.. e -target (closest \".block-content\"))\n;;         closest-block-header (.. e -target (closest \".block-header\"))\n;;         closest-page-header (.. e -target (closest \".page-header\"))\n;;         closest (or closest-block closest-block-header closest-page-header)]\n;;     (when closest\n;;       (dispatch [:editing/uid (.. closest -dataset -uid)]))))\n\n\n;; -- Close Athena -------------------------------------------------------\n\n(defn mouse-down-outside-athena\n  [e]\n  (let [athena? @(subscribe [:athena/open])\n        closest (.. e -target (closest \".athena\"))]\n    (when (and athena? (nil? closest))\n      (dispatch [:athena/toggle]))))\n\n\n;; -- Hotkeys ------------------------------------------------------------\n\n\n(defn key-down\n  [e]\n  (let [key (.. e -keyCode)\n        ctrl (.. e -ctrlKey)\n        meta (.. e -metaKey)\n        shift (.. e -shiftKey)]\n\n    (cond\n      (and (= key KeyCodes.Z) meta shift)\n      (dispatch [:redo])\n\n      (and (= key KeyCodes.Z) meta)\n      (dispatch [:undo])\n\n      (and (= key KeyCodes.K) meta)\n      (dispatch [:athena/toggle])\n\n      (and (= key KeyCodes.G) ctrl)\n      (dispatch [:devtool/toggle])\n\n      (and (= key KeyCodes.R) ctrl)\n      (dispatch [:right-sidebar/toggle])\n\n      (and (= key KeyCodes.L) ctrl)\n      (dispatch [:left-sidebar/toggle]))))\n\n\n(defn init\n  []\n  ;; (events/listen js/window EventType.MOUSEDOWN edit-block)\n  (events/listen js/window EventType.MOUSEDOWN unfocus)\n  (events/listen js/window EventType.MOUSEDOWN mouse-down-outside-athena)\n  (events/listen js/window EventType.KEYDOWN multi-block-selection)\n  (events/listen js/window EventType.KEYDOWN key-down))\n\n"]}