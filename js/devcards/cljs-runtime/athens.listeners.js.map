{"version":3,"sources":["athens/listeners.cljs"],"mappings":"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","names":["athens.listeners/multi-block-selection","e","cljs.core/deref","selected-items","re_frame.core.subscribe","cljs.core/not-empty","shift","key-code","direction","athens.keybindings/arrow-key-direction","cljs.core._EQ_","goog.events.KeyCodes/ENTER","re-frame.core/dispatch","cljs.core/first","goog.events.KeyCodes/BACKSPACE","and__4115__auto__","cljs.core/last","athens.listeners/get-dataset-uid","el","block","uid","athens.listeners/multi-block-select-over","target","related-target","target-uid","_related-target-uid","_set-items","cljs.core/set","athens.listeners/multi-block-select-up","_","goog.events/unlisten","js/window","goog.events.EventType/MOUSEOVER","goog.events.EventType/MOUSEUP","athens.listeners/unfocus","editing-uid","closest-block","closest-block-header","closest-page-header","closest","or__4126__auto__","cljs.core.prn","athens.listeners/click-outside-athena","athena?","athens.listeners/key-down","key","ctrl","meta","goog.events.KeyCodes/Z","goog.events.KeyCodes/K","goog.events.KeyCodes/G","goog.events.KeyCodes/R","goog.events.KeyCodes/L","athens.listeners/to-markdown-list","blocks","cljs.core.map","x","G__54935","G__54936","G__54937","datascript.core/pull-many","athens.db/dsdb","p1__54934#","clojure.string.join","athens.listeners/copy","athens.listeners/cut","athens.listeners/init","goog.events/listen","goog.events.EventType/CLICK","goog.events.EventType/KEYDOWN","goog.events.EventType/COPY","goog.events.EventType/CUT"],"sourcesContent":["(ns athens.listeners\n  (:require\n    [athens.db :refer [dsdb]]\n    [athens.keybindings :refer [arrow-key-direction]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [clojure.string :as string]\n    [datascript.core :as d]\n    [goog.events :as events]\n    [re-frame.core :refer [dispatch subscribe]])\n  (:import\n    (goog.events\n      EventType\n      KeyCodes)))\n\n\n;; -- shift-up/down when multi-block selection ---------------------------\n\n;; can no longer use on-key-down from keybindings.cljs. textarea is no longer focused, so events must be handled globally\n(defn multi-block-selection\n  [e]\n  (let [selected-items @(subscribe [:selected/items])]\n    (when (not-empty selected-items)\n      (let [shift     (.. e -shiftKey)\n            key-code (.. e -keyCode)\n            direction (arrow-key-direction e)]\n        ;; what should tab/shift-tab do? roam and workflowy have slightly different behavior\n        (cond\n          (= key-code KeyCodes.ENTER) (do\n                                        (dispatch [:editing/uid (first selected-items)])\n                                        (dispatch [:selected/clear-items]))\n          (= key-code KeyCodes.BACKSPACE) (dispatch [:selected/delete selected-items])\n          (and shift (= direction :up)) (dispatch [:selected/up selected-items])\n          (and shift (= direction :down)) (dispatch [:selected/down selected-items])\n          (= direction :up) (do\n                              (.preventDefault e)\n                              (dispatch [:selected/clear-items])\n                              (dispatch [:up (first selected-items)]))\n          (= direction :down) (do\n                                (.preventDefault e)\n                                (dispatch [:selected/clear-items])\n                                (dispatch [:down (last selected-items)])))))))\n\n\n;; -- When dragging across multiple blocks to select ---------------------\n\n(defn get-dataset-uid\n  [el]\n  (let [block (when el (.. el (closest \".block-container\")))\n        uid (when block (.. block -dataset -uid))]\n    uid))\n\n\n(defn multi-block-select-over\n  \"If going over something, add it.\n  If leaving it, remove\"\n  [e]\n  (let [target             (.. e -target)\n        related-target     (.. e -relatedTarget)\n        target-uid         (get-dataset-uid target)\n        _related-target-uid (get-dataset-uid related-target)\n        selected-items     @(subscribe [:selected/items])\n        _set-items (set selected-items)]\n    (.. e stopPropagation)\n    (.. target blur)\n    (dispatch [:selected/add-item target-uid])))\n\n\n(defn multi-block-select-up\n  [_]\n  (events/unlisten js/window EventType.MOUSEOVER multi-block-select-over)\n  (events/unlisten js/window EventType.MOUSEUP multi-block-select-up))\n\n;; -- When user clicks elsewhere -----------------------------------------\n\n(defn unfocus\n  [e]\n  (let [selected-items @(subscribe [:selected/items])\n        editing-uid    @(subscribe [:editing/uid])\n        closest-block (.. e -target (closest \".block-content\"))\n        closest-block-header (.. e -target (closest \".block-header\"))\n        closest-page-header (.. e -target (closest \".page-header\"))\n        closest (or closest-block closest-block-header closest-page-header)]\n    (prn e (.. e -type))\n    (when (not-empty selected-items)\n      (dispatch [:selected/clear-items]))\n    (when (and (nil? closest) editing-uid)\n      (dispatch [:editing/uid nil]))))\n\n\n;; -- Close Athena -------------------------------------------------------\n\n(defn click-outside-athena\n  [e]\n  (let [athena? @(subscribe [:athena/open])\n        closest (.. e -target (closest \".athena\"))]\n    (when (and athena? (nil? closest))\n      (dispatch [:athena/toggle]))))\n\n\n;; -- Hotkeys ------------------------------------------------------------\n\n\n(defn key-down\n  [e]\n  (let [key (.. e -keyCode)\n        ctrl (.. e -ctrlKey)\n        meta (.. e -metaKey)\n        shift (.. e -shiftKey)]\n\n    (cond\n      (and (= key KeyCodes.Z) meta shift)\n      (dispatch [:redo])\n\n      (and (= key KeyCodes.Z) meta)\n      (dispatch [:undo])\n\n      (and (= key KeyCodes.K) meta)\n      (dispatch [:athena/toggle])\n\n      (and (= key KeyCodes.G) ctrl)\n      (dispatch [:devtool/toggle])\n\n      (and (= key KeyCodes.R) ctrl)\n      (dispatch [:right-sidebar/toggle])\n\n      (and (= key KeyCodes.L) ctrl)\n      (dispatch [:left-sidebar/toggle]))))\n\n\n;; -- Clipboard ----------------------------------------------------------\n\n;; TODO: once :selected/items is a nested tree instead of flat list, walk tree and add hyphens instead of mapping\n(defn to-markdown-list\n  [blocks]\n  (->> blocks\n       (map (fn [x] [:block/uid x]))\n       (d/pull-many @dsdb '[:block/string])\n       (map #(str \"- \" (:block/string %) \"\\n\"))\n       (string/join \"\")))\n\n\n(defn copy\n  \"If blocks are selected, copy blocks as markdown list.\"\n  [e]\n  (let [blocks @(subscribe [:selected/items])]\n    (when (not-empty blocks)\n      (.. e preventDefault)\n      ;; Use -event_ because goog events quirk\n      (.. e -event_ -clipboardData (setData \"text/plain\" (to-markdown-list blocks))))))\n\n\n;; do same as copy AND delete selected blocks\n(defn cut\n  [e]\n  (let [blocks @(subscribe [:selected/items])]\n    (when (not-empty blocks)\n      (.. e preventDefault)\n      (.. e -event_ -clipboardData (setData \"text/plain\" (to-markdown-list blocks)))\n      (dispatch [:selected/delete blocks]))))\n\n\n(defn init\n  []\n  ;; (events/listen js/window EventType.MOUSEDOWN edit-block)\n  (events/listen js/window EventType.CLICK unfocus)\n  (events/listen js/window EventType.CLICK click-outside-athena)\n  (events/listen js/window EventType.KEYDOWN multi-block-selection)\n  (events/listen js/window EventType.KEYDOWN key-down)\n  (events/listen js/window EventType.COPY copy)\n  (events/listen js/window EventType.CUT cut))\n\n"]}