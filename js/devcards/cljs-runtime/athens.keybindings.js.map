{"version":3,"sources":["athens/keybindings.cljs"],"mappings":"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","names":["athens.keybindings/modifier-keys","e","shift","meta","ctrl","alt","athens.keybindings/get-end-points","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","G__56096","goog.dom.selection/getEndPoints","athens.keybindings/destruct-event","vec__56097","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","key","key-code","target","value","event","modifiers","start","end","selection","goog.dom.selection/getText","head","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","tail","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","athens.keybindings/ARROW-KEYS","goog.events.KeyCodes/UP","goog.events.KeyCodes/LEFT","goog.events.KeyCodes/DOWN","goog.events.KeyCodes/RIGHT","athens.keybindings/arrow-key-direction","athens.keybindings/block-start?","vec__56100","_","athens.keybindings/block-end?","map__56103","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","athens.keybindings/handle-arrow-key","uid","state","map__56105","map__56106","cljs.core/deref","top-row?","bottom-row?","index","results","type","selected-items","G__56109","re-frame.core/subscribe","direction","and__4174__auto__","cljs.core/seq","G__56112","re-frame.core/dispatch","G__56115","G__56116","G__56117","G__56118","G__56119","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/update","cljs.core/dec","cljs.core/inc","cljs.core/assoc","athens.util/scroll-if-needed","js/document","G__56120","G__56121","G__56122","G__56123","athens.keybindings/handle-tab","map__56124","block-zero?","athens.db/get-block","G__56126","G__56127","athens.keybindings/handle-escape","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","G__56128","athens.keybindings/slash-options","js/module$node_modules$$material_ui$icons$index.Done","js/module$node_modules$$material_ui$icons$index.Timer","js/Date","cljs.core/clj->js","js/module$node_modules$$material_ui$icons$index.Today","athens.util.get_day.cljs$core$IFn$_invoke$arity$1","js/module$node_modules$$material_ui$icons$index.YouTube","js/module$node_modules$$material_ui$icons$index.DesktopWindows","athens.keybindings/select-slash-cmd","map__56129","vec__56130","atom-string","expansion","expand","cljs.core/fn?","replace-str","new-str","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","athens.keybindings/handle-enter","map__56134","map__56135","query","map__56138","title","clojure.string/replace-first","map__56140","first","new-tail","G__56142","athens.keybindings/PAIR-CHARS","athens.keybindings/surround","around","temp__5733__auto__","complement","athens.keybindings/handle-system-shortcuts","map__56143","goog.events.KeyCodes/A","goog.dom.selection/setStart","goog.dom.selection/setEnd","goog.events.KeyCodes/Z","goog.events.KeyCodes/X","goog.events.KeyCodes/V","goog.events.KeyCodes/B","goog.events.KeyCodes/I","athens.keybindings/pair-char?","map__56145","pair-char-set","cljs.core/flatten","cljs.core/set","athens.keybindings/handle-pair-char","map__56147","close-pair","js/setTimeout","G__56149","G__56150","goog.dom.selection/setCursorPosition","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","surround-selection","G__56151","G__56152","G__56153","G__56154","four-char","double-brackets?","double-parens?","athens.keybindings/handle-backspace","map__56156","possible-pair","G__56158","p1__56155#","cljs.core/some","G__56159","G__56160","map__56161","cljs.core/last","athens.keybindings/is-character-key?","map__56163","cljs.core/not","goog.events.KeyCodes/isCharacterKey","athens.keybindings/write-char","map__56165","map__56166","new-query","goog.events.KeyCodes/SLASH","athens.db/search-in-block-content","athens.db/search-in-node-title","athens.keybindings/block-key-down","map__56169","goog.events.KeyCodes/TAB","goog.events.KeyCodes/ENTER","goog.events.KeyCodes/BACKSPACE","goog.events.KeyCodes/ESC"],"sourcesContent":["(ns athens.keybindings\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.db :as db]\n    [athens.util :refer [scroll-if-needed get-day]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [goog.dom.selection :refer [setStart setEnd getText setCursorPosition getEndPoints]]\n    [goog.events.KeyCodes :refer [isCharacterKey]]\n    [re-frame.core :refer [dispatch subscribe]])\n  (:import\n    (goog.events\n      KeyCodes)))\n\n\n(defn modifier-keys\n  [e]\n  (let [shift (.. e -shiftKey)\n        meta (.. e -metaKey)\n        ctrl (.. e -ctrlKey)\n        alt (.. e -altKey)]\n    {:shift shift :meta meta :ctrl ctrl :alt alt}))\n\n\n(defn get-end-points\n  [e]\n  (js->clj (getEndPoints (.. e -target))))\n\n\n(defn destruct-event\n  [e]\n  (let [key (.. e -key)\n        key-code (.. e -keyCode)\n        target (.. e -target)\n        value (.. target -value)\n        event {:key key :key-code key-code :target target :value value}\n        modifiers (modifier-keys e)\n        [start end] (get-end-points e)\n        selection (getText target)\n        head (subs value 0 start)\n        tail (subs value end)]\n    (merge modifiers event\n           {:start start :end end}\n           {:head head :tail tail}\n           {:selection selection})))\n\n\n(def ARROW-KEYS\n  {KeyCodes.UP    :up\n   KeyCodes.LEFT  :left\n   KeyCodes.DOWN  :down\n   KeyCodes.RIGHT :right})\n\n\n(defn arrow-key-direction\n  [e]\n  (let [key-code (.. e -keyCode)]\n    (ARROW-KEYS key-code)))\n\n\n(defn block-start?\n  [e]\n  (let [[start _] (get-end-points e)]\n    (zero? start)))\n\n\n(defn block-end?\n  [e]\n  (let [{:keys [value end]} (destruct-event e)]\n    (= end (count value))))\n\n\n(defn handle-arrow-key\n  \"May want to flatten this into multiple handlers.\"\n  [e uid state]\n  (let [{:keys [key-code shift target]} (destruct-event e)\n        ;; TODO\n        top-row?    true\n        bottom-row? true\n        {:search/keys [index results type]} @state\n        selected-items @(subscribe [:selected/items])\n        direction (arrow-key-direction e)]\n\n    (cond\n\n      ;; items already selected, go up or down\n      (and shift (seq selected-items) (= :up direction) (dispatch [:selected/up]))\n      (and shift (seq selected-items) (= :down direction) (dispatch [:selected/down]))\n\n      ;; Only select block if leaving block content (up on top row or down on bottom row). Otherwise select text\n      (and shift (= :up direction) top-row?) (do\n                                               (.. target blur)\n                                               (dispatch [:editing/uid nil])\n                                               (dispatch [:selected/add-item uid]))\n\n      (and shift (= :down direction) bottom-row?) (do\n                                                    (.. target blur)\n                                                    (dispatch [:editing/uid nil])\n                                                    (dispatch [:selected/add-item uid]))\n\n      (= type :slash) (cond\n                        (= :up direction) (do\n                                            (.. e preventDefault)\n                                            (swap! state update :search/index dec))\n                        (= :down direction) (do\n                                              (.. e preventDefault)\n                                              (swap! state update :search/index inc)))\n\n      (or (= type :page) (= type :block))\n      (cond\n        (= key-code KeyCodes.UP) (do\n                                   (.. e preventDefault)\n                                   (if (= index 0)\n                                     (swap! state assoc :search/index (dec (count results)))\n                                     (swap! state update :search/index dec))\n                                   (scroll-if-needed (.getElementById js/document (str \"result-\" (:search/index @state)))\n                                                     (.getElementById js/document \"dropdown-menu\")))\n        (= key-code KeyCodes.DOWN) (do\n                                     (.. e preventDefault)\n                                     (if (= index (dec (count results)))\n                                       (swap! state assoc :search/index 0)\n                                       (swap! state update :search/index inc))\n                                     (scroll-if-needed (.getElementById js/document (str \"result-\" (:search/index @state)))\n                                                       (.getElementById js/document \"dropdown-menu\"))))\n      :else (cond\n              (and (= key-code KeyCodes.UP) top-row?) (dispatch [:up uid])\n              (and (= key-code KeyCodes.LEFT) (block-start? e)) (dispatch [:left uid])\n              (and (= key-code KeyCodes.DOWN) bottom-row?) (dispatch [:down uid])\n              (and (= key-code KeyCodes.RIGHT) (block-end? e)) (dispatch [:right uid])))))\n\n\n(defn handle-tab\n  [e uid]\n  (.. e preventDefault)\n  (let [{:keys [shift]} (destruct-event e)\n        ;; xxx: probably makes more sense to pass block value to handler directly\n        block-zero? (zero? (:block/order (db/get-block [:block/uid uid])))]\n    (cond\n      shift (dispatch [:unindent uid])\n      :else (when-not block-zero?\n              (dispatch [:indent uid])))))\n\n\n(defn handle-escape\n  [e state]\n  (.. e preventDefault)\n  (prn @state)\n  (prn state)\n  (cond\n    (:search/type @state) (swap! state assoc :search/type nil)\n    :else (dispatch [:editing/uid nil])))\n\n\n;; TODO: some expansions require caret placement after\n;; fixme: perhaps not the best place to put this, but need to access from both blocks and keybindings\n(def slash-options\n  [[mui-icons/Done           \"Add Todo\"      \"{{[[TODO]]}} \" \"cmd-enter\"]\n   [mui-icons/Timer          \"Current Time\"  #(.. (js/Date.) (toLocaleTimeString [] (clj->js {\"timeStyle\" \"short\"})))]\n   [mui-icons/Today          \"Today\"         #(str \"[[\" (:title (get-day 0)) \"]] \")]\n   [mui-icons/Today          \"Tomorrow\"      #(str \"[[\" (:title (get-day -1)) \"]]\")]\n   [mui-icons/Today          \"Yesterday\"     #(str \"[[\" (:title (get-day 1)) \"]]\")]\n   [mui-icons/YouTube        \"YouTube Embed\" \"{{[[youtube]]: }}\"]\n   [mui-icons/DesktopWindows \"iframe Embed\"  \"{{iframe: }}\"]])\n\n;;[mui-icons/ \"Block Embed\" #(str \"[[\" (:title (get-day 1)) \"]]\")]\n;;[mui-icons/DateRange \"Date Picker\"]\n;;[mui-icons/Attachment \"Upload Image or File\"]\n;;[mui-icons/ExposurePlus1 \"Word Count\"]\n\n\n;; TODO: also replace typeahead characters that follow \"/\". may need event to find selectionStart\n(defn select-slash-cmd\n  [index state]\n  (let [{:keys [atom-string]} @state\n        [_ _ expansion _] (slash-options index)\n        expand (if (fn? expansion) (expansion) expansion)\n        replace-str (subs atom-string 0 (dec (count atom-string)))\n        new-str     (str replace-str expand)]\n    (swap! state merge {:search/index 0\n                        :search/type nil\n                        :atom-string  new-str})))\n\n\n(defn handle-enter\n  [e uid state]\n  (let [{:keys [shift meta start head tail value]} (destruct-event e)\n        {:search/keys [query index results type]} @state]\n    (.. e preventDefault)\n    (cond\n      (= type :slash) (select-slash-cmd index state)\n\n      ;; TODO: move caret beyond ]]\n      ;; auto-complete link\n      (= type :page)\n      (let [{:keys [node/title]} (get results index)\n            new-str (clojure.string/replace-first value (str query \"]]\") (str title \"]]\"))]\n        (swap! state merge {:atom-string  new-str\n                            :search/query nil\n                            :search/type  nil}))\n      ;; auto-complete block ref\n      (= type :block)\n      (let [{:keys [block/uid]} (get results index)\n            new-str (clojure.string/replace-first value (str query \"))\") (str uid \"))\"))]\n        (swap! state merge {:atom-string  new-str\n                            :search/query nil\n                            :search/type nil}))\n\n      ;; shift-enter: add line break to textarea\n      shift (swap! state assoc :atom-string (str head \"\\n\" tail))\n      ;; cmd-enter: toggle todo/done\n      meta (let [first    (subs value 0 13)\n                 new-tail (subs value 13)\n                 new-str (cond (= first \"{{[[TODO]]}} \") (str \"{{[[DONE]]}} \" new-tail)\n                               (= first \"{{[[DONE]]}} \") new-tail\n                               :else (str \"{{[[TODO]]}} \" value))]\n             (swap! state assoc :atom-string new-str))\n      ;; default: may mutate blocks\n      :else (dispatch [:enter uid value start]))))\n\n\n;; todo: do this for ** and __\n(def PAIR-CHARS\n  {\"(\" \")\"\n   \"[\" \"]\"\n   \"{\" \"}\"\n   \"\\\"\" \"\\\"\"})\n  ;;\"`\" \"`\"\n  ;;\"*\" \"*\"\n   ;;\"_\" \"_\"})\n\n\n(defn surround\n  \"https://github.com/tpope/vim-surround\"\n  [selection around]\n  (if-let [complement (get PAIR-CHARS around)]\n    (str around selection complement)\n    (str around selection around)))\n\n\n;; TODO: it's ctrl for windows and linux right?\n(defn handle-system-shortcuts\n  \"Assumes meta is selected\"\n  [e _ state]\n  (let [{:keys [key-code target end selection]} (destruct-event e)]\n    (cond\n      (= key-code KeyCodes.A) (do (setStart target 0)\n                                  (setEnd target end))\n\n      ;; TODO: undo. conflicts with datascript undo\n      (= key-code KeyCodes.Z) (prn \"undo\")\n\n      ;; TODO: cut\n      (= key-code KeyCodes.X) (prn \"cut\")\n\n      ;; TODO: paste. magical\n      (= key-code KeyCodes.V) (prn \"paste\")\n\n      ;; TODO: bold\n      (= key-code KeyCodes.B) (let [new-str (surround selection \"**\")]\n                                (swap! state assoc :atom-string new-str))\n\n      ;; TODO: italicize\n      (= key-code KeyCodes.I) (let [new-str (surround selection \"__\")]\n                                (swap! state assoc :atom-string new-str)))))\n\n\n(defn pair-char?\n  [e]\n  (let [{:keys [key]} (destruct-event e)\n        pair-char-set (-> PAIR-CHARS\n                          seq\n                          flatten\n                          set)]\n    (pair-char-set key)))\n\n\n(defn handle-pair-char\n  [e _ state]\n  (let [{:keys [key head tail target start end selection]} (destruct-event e)\n        close-pair (get PAIR-CHARS key)]\n    (cond\n      (= start end) (let [new-str (str head key close-pair tail)]\n                      (js/setTimeout #(setCursorPosition target (inc start)) 10)\n                      (swap! state assoc :atom-string new-str))\n      (not= start end) (let [surround-selection (surround selection key)\n                             new-str (str head surround-selection tail)]\n                         (swap! state assoc :atom-string new-str)\n                         (js/setTimeout (fn []\n                                          (setStart target (inc start))\n                                          (setEnd target (inc end)))\n                                        10)))\n\n    ;; this is naive way to begin doing inline search. how to begin search with non-empty parens?\n    (let [four-char (subs (:atom-string @state) (dec start) (+ start 3))\n          double-brackets? (= \"[[]]\" four-char)\n          double-parens?   (= \"(())\" four-char)]\n      (cond\n        double-brackets? (swap! state assoc :search/type :page)\n        double-parens? (swap! state assoc :search/type :block)))))\n\n    ;; TODO: close bracket should not be created if it already exists\n    ;;(= key-code KeyCodes.CLOSE_SQUARE_BRACKET)\n\n\n\n(defn handle-backspace\n  [e uid state]\n  (let [{:keys [start end value head tail target meta]} (destruct-event e)\n        possible-pair (subs value (dec start) (inc start))]\n\n    (cond\n      ;; if selection, delete selected text\n      (not= start end) (let [new-tail (subs value end)\n                             new-str (str head new-tail)]\n                         (swap! state assoc :atom-string new-str))\n\n      ;; if meta, delete to start of line\n      meta (swap! state assoc :atom-string tail)\n\n      ;; if at block start, dispatch (requires context)\n      (block-start? e) (dispatch [:backspace uid value])\n\n      ;; if within brackets, delete close bracket as well\n      ;; todo: parameterize, use PAIR-CHARS\n      (some #(= possible-pair %) [\"[]\" \"{}\" \"()\"])\n      (let [head    (subs value 0 (dec start))\n            tail    (subs value (inc start))\n            new-str (str head tail)]\n        (swap! state assoc :atom-string new-str)\n        (swap! state assoc :search/type nil)\n        (js/setTimeout #(setCursorPosition target (dec start)) 10))\n\n      ;; default backspace: delete a character\n      :else (let [head    (subs value 0 (dec start))\n                  new-str (str head tail)\n                  {:search/keys [query]} @state]\n              (when (= \"/\" (last value))\n                (swap! state merge {:search/type nil\n                                    :search/query nil}))\n              (when query\n                (swap! state assoc :search/query (subs query 0 (dec (count query)))))\n              (swap! state assoc :atom-string new-str)))))\n\n\n(defn is-character-key?\n  \"Closure returns true even when using modifier keys. We do not make that assumption.\"\n  [e]\n  (let [{:keys [meta ctrl alt key-code]} (destruct-event e)]\n    (and (not meta) (not ctrl) (not alt)\n         (isCharacterKey key-code))))\n\n\n(defn write-char\n  [e _ state]\n  (let [{:keys [head tail key key-code]} (destruct-event e)\n        new-str (str head key tail)\n        {:search/keys [query type]} @state\n        new-query (str query key)]\n    (cond\n      (= key-code KeyCodes.SLASH) (swap! state merge {:search/query \"\"\n                                                      :search/type :slash})\n\n      (= type :slash) (swap! state assoc :search/query new-str)\n\n      ;; when in-line search dropdown is open\n      (= type :block) (let [results (db/search-in-block-content query)]\n                        (swap! state assoc :search/query new-query)\n                        (swap! state assoc :search/results results))\n\n    ;; when in-line search dropdown is open\n      (= type :page) (let [results (db/search-in-node-title query)]\n                       (swap! state assoc :search/query new-query)\n                       (swap! state assoc :search/results results)))\n\n    (swap! state merge {:atom-string new-str})))\n\n\n;; XXX: what happens here when we have multi-block selection? In this case we pass in `uids` instead of `uid`\n(defn block-key-down\n  [e uid state]\n  (let [{:keys [meta key-code]} (destruct-event e)]\n    (cond\n      (arrow-key-direction e) (handle-arrow-key e uid state)\n      (pair-char? e) (handle-pair-char e uid state)\n      (= key-code KeyCodes.TAB) (handle-tab e uid)\n      (= key-code KeyCodes.ENTER) (handle-enter e uid state)\n      (= key-code KeyCodes.BACKSPACE) (handle-backspace e uid state)\n      (= key-code KeyCodes.ESC) (handle-escape e state)\n      meta (handle-system-shortcuts e uid state)\n\n      ;; -- Default: Add new character -----------------------------------------\n      (is-character-key? e) (write-char e uid state))))\n\n\n;;:else (prn \"non-event\" key key-code))))\n\n"]}