{"version":3,"sources":["athens/keybindings.cljs"],"mappings":"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","names":["athens.keybindings/modifier-keys","e","shift","meta","ctrl","alt","athens.keybindings/get-end-points","cljs.core.js__GT_clj","goog.dom.selection/getEndPoints","athens.keybindings/destruct-event","vec__54869","cljs.core.nth","key","key-code","target","value","event","modifiers","start","end","selection","goog.dom.selection/getText","head","cljs.core.subs","tail","cljs.core.merge","athens.keybindings/ARROW-KEYS","goog.events.KeyCodes/UP","goog.events.KeyCodes/LEFT","goog.events.KeyCodes/DOWN","goog.events.KeyCodes/RIGHT","athens.keybindings/arrow-key-direction","athens.keybindings/block-start?","vec__54872","_","athens.keybindings/block-end?","map__54875","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","cljs.core._EQ_","cljs.core/count","athens.keybindings/dec-cycle","min","max","v","athens.keybindings/inc-cycle","athens.keybindings/max-idx","coll","athens.keybindings/handle-arrow-key","uid","state","map__54877","map__54878","cljs.core/deref","top-row?","bottom-row?","results","type","selected-items","re_frame.core.subscribe","direction","and__4115__auto__","cljs.core/seq","re-frame.core/dispatch","cljs.core.swap_BANG_","cljs.core/update","cljs.core.partial","athens.keybindings/slash-options","cur-index","container-el","goog.dom/getElement","next-el","cljs.core.array_seq","athens.util/is-beyond-rect?","athens.util/scroll-if-needed","athens.keybindings/handle-tab","map__54881","block-zero?","athens.db/get-block","athens.keybindings/handle-escape","cljs.core.prn","cljs.core/assoc","js/module$node_modules$$material_ui$icons$index.Done","js/module$node_modules$$material_ui$icons$index.Timer","js/Date","cljs.core/clj->js","js/module$node_modules$$material_ui$icons$index.Today","athens.util.get_day","js/module$node_modules$$material_ui$icons$index.YouTube","js/module$node_modules$$material_ui$icons$index.DesktopWindows","athens.keybindings/select-slash-cmd","index","map__54883","vec__54884","atom-string","expansion","expand","cljs.core/fn?","replace-str","new-str","cljs.core/merge","athens.keybindings/handle-enter","map__54888","map__54889","query","map__54892","title","clojure.string/replace-first","map__54894","first","new-tail","athens.keybindings/PAIR-CHARS","athens.keybindings/surround","around","temp__5733__auto__","complement","athens.keybindings/handle-system-shortcuts","map__54896","goog.events.KeyCodes/A","goog.dom.selection/setStart","goog.dom.selection/setEnd","goog.events.KeyCodes/Z","goog.events.KeyCodes/X","goog.events.KeyCodes/V","goog.events.KeyCodes/B","goog.events.KeyCodes/I","athens.keybindings/pair-char?","map__54898","pair-char-set","cljs.core/flatten","cljs.core/set","athens.keybindings/handle-pair-char","map__54900","close-pair","js/setTimeout","goog.dom.selection/setCursorPosition","cljs.core.not_EQ_","surround-selection","four-char","double-brackets?","double-parens?","athens.keybindings/handle-backspace","map__54903","possible-pair","p1__54902#","cljs.core/some","map__54905","cljs.core/last","athens.keybindings/is-character-key?","map__54907","cljs.core/not","goog.events.KeyCodes/isCharacterKey","athens.keybindings/write-char","map__54909","map__54910","new-query","goog.events.KeyCodes/SLASH","athens.db.search_in_block_content","athens.db.search_in_node_title","athens.keybindings/block-key-down","map__54913","goog.events.KeyCodes/TAB","goog.events.KeyCodes/ENTER","goog.events.KeyCodes/BACKSPACE","goog.events.KeyCodes/ESC"],"sourcesContent":["(ns athens.keybindings\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.db :as db]\n    [athens.util :refer [scroll-if-needed get-day is-beyond-rect?]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [goog.dom :refer [getElement]]\n    [goog.dom.selection :refer [setStart setEnd getText setCursorPosition getEndPoints]]\n    [goog.events.KeyCodes :refer [isCharacterKey]]\n    [re-frame.core :refer [dispatch subscribe]])\n  (:import\n    (goog.events\n      KeyCodes)))\n\n\n(declare slash-options)\n\n\n(defn modifier-keys\n  [e]\n  (let [shift (.. e -shiftKey)\n        meta (.. e -metaKey)\n        ctrl (.. e -ctrlKey)\n        alt (.. e -altKey)]\n    {:shift shift :meta meta :ctrl ctrl :alt alt}))\n\n\n(defn get-end-points\n  [e]\n  (js->clj (getEndPoints (.. e -target))))\n\n\n(defn destruct-event\n  [e]\n  (let [key (.. e -key)\n        key-code (.. e -keyCode)\n        target (.. e -target)\n        value (.. target -value)\n        event {:key key :key-code key-code :target target :value value}\n        modifiers (modifier-keys e)\n        [start end] (get-end-points e)\n        selection (getText target)\n        head (subs value 0 start)\n        tail (subs value end)]\n    (merge modifiers event\n           {:start start :end end}\n           {:head head :tail tail}\n           {:selection selection})))\n\n\n(def ARROW-KEYS\n  {KeyCodes.UP    :up\n   KeyCodes.LEFT  :left\n   KeyCodes.DOWN  :down\n   KeyCodes.RIGHT :right})\n\n\n(defn arrow-key-direction\n  [e]\n  (let [key-code (.. e -keyCode)]\n    (ARROW-KEYS key-code)))\n\n\n(defn block-start?\n  [e]\n  (let [[start _] (get-end-points e)]\n    (zero? start)))\n\n\n(defn block-end?\n  [e]\n  (let [{:keys [value end]} (destruct-event e)]\n    (= end (count value))))\n\n\n(defn dec-cycle\n  [min max v]\n  (if (<= v min) max (dec v)))\n\n\n(defn inc-cycle\n  [min max v]\n  (if (>= v max) min (inc v)))\n\n\n(defn max-idx\n  [coll]\n  (-> coll count dec))\n\n\n(defn handle-arrow-key\n  \"May want to flatten this into multiple handlers.\"\n  [e uid state]\n  (let [{:keys [key-code shift target]} (destruct-event e)\n        ;; TODO\n        top-row?    true\n        bottom-row? true\n        {:search/keys [results type]} @state\n        selected-items @(subscribe [:selected/items])\n        direction (arrow-key-direction e)]\n\n    (cond\n\n      ;; items already selected, go up or down\n      (and shift (seq selected-items) (= :up direction) (dispatch [:selected/up]))\n      (and shift (seq selected-items) (= :down direction) (dispatch [:selected/down]))\n\n      ;; Only select block if leaving block content (up on top row or down on bottom row). Otherwise select text\n      (and shift (= :up direction) top-row?) (do\n                                               (.. target blur)\n                                               (dispatch [:editing/uid nil])\n                                               (dispatch [:selected/add-item uid]))\n\n      (and shift (= :down direction) bottom-row?) (do\n                                                    (.. target blur)\n                                                    (dispatch [:editing/uid nil])\n                                                    (dispatch [:selected/add-item uid]))\n\n      (= type :slash) (cond\n                        (= :up direction) (do\n                                            (.. e preventDefault)\n                                            (swap! state update :search/index (partial dec-cycle 0 (max-idx slash-options)))\n                                            (let [cur-index (:search/index @state)\n                                                  container-el (getElement \"slash-menu-container\")\n                                                  next-el (nth (array-seq (.. container-el -children)) cur-index)]\n                                              (when (is-beyond-rect? next-el (.. container-el -parentNode))\n                                                (.. next-el (scrollIntoView false {:behavior \"auto\"})))))\n                        (= :down direction) (do\n                                              (.. e preventDefault)\n                                              (swap! state update :search/index (partial inc-cycle 0 (max-idx slash-options)))\n                                              (let [cur-index (:search/index @state)\n                                                    container-el (getElement \"slash-menu-container\")\n                                                    next-el (nth (array-seq (.. container-el -children)) cur-index)]\n                                                (when (is-beyond-rect? next-el container-el)\n                                                  (.. next-el (scrollIntoView false {:behavior \"auto\"}))))))\n\n      (or (= type :page) (= type :block))\n      (cond\n        (= key-code KeyCodes.UP) (do\n                                   (.. e preventDefault)\n                                   (swap! state update :search/index (partial dec-cycle 0 (max-idx results)))\n                                   (scroll-if-needed (getElement (str \"result-\" (:search/index @state)))\n                                                     (getElement \"dropdown-menu\")))\n        (= key-code KeyCodes.DOWN) (do\n                                     (.. e preventDefault)\n                                     (swap! state update :search/index (partial inc-cycle 0 (max-idx results)))\n                                     (scroll-if-needed (getElement (str \"result-\" (:search/index @state)))\n                                                       (getElement \"dropdown-menu\"))))\n      :else (cond\n              (and (= key-code KeyCodes.UP) top-row?) (dispatch [:up uid])\n              (and (= key-code KeyCodes.LEFT) (block-start? e)) (dispatch [:left uid])\n              (and (= key-code KeyCodes.DOWN) bottom-row?) (dispatch [:down uid])\n              (and (= key-code KeyCodes.RIGHT) (block-end? e)) (dispatch [:right uid])))))\n\n\n(defn handle-tab\n  [e uid]\n  (.. e preventDefault)\n  (let [{:keys [shift]} (destruct-event e)\n        ;; xxx: probably makes more sense to pass block value to handler directly\n        block-zero? (zero? (:block/order (db/get-block [:block/uid uid])))]\n    (cond\n      shift (dispatch [:unindent uid])\n      :else (when-not block-zero?\n              (dispatch [:indent uid])))))\n\n\n(defn handle-escape\n  [e state]\n  (.. e preventDefault)\n  (prn @state)\n  (prn state)\n  (cond\n    (:search/type @state) (swap! state assoc :search/type nil)\n    :else (dispatch [:editing/uid nil])))\n\n\n;; TODO: some expansions require caret placement after\n;; fixme: perhaps not the best place to put this, but need to access from both blocks and keybindings\n(def slash-options\n  [[mui-icons/Done           \"Add Todo\"      \"{{[[TODO]]}} \" \"cmd-enter\"]\n   [mui-icons/Timer          \"Current Time\"  #(.. (js/Date.) (toLocaleTimeString [] (clj->js {\"timeStyle\" \"short\"})))]\n   [mui-icons/Today          \"Today\"         #(str \"[[\" (:title (get-day 0)) \"]] \")]\n   [mui-icons/Today          \"Tomorrow\"      #(str \"[[\" (:title (get-day -1)) \"]]\")]\n   [mui-icons/Today          \"Yesterday\"     #(str \"[[\" (:title (get-day 1)) \"]]\")]\n   [mui-icons/YouTube        \"YouTube Embed\" \"{{[[youtube]]: }}\"]\n   [mui-icons/DesktopWindows \"iframe Embed\"  \"{{iframe: }}\"]])\n\n;;[mui-icons/ \"Block Embed\" #(str \"[[\" (:title (get-day 1)) \"]]\")]\n;;[mui-icons/DateRange \"Date Picker\"]\n;;[mui-icons/Attachment \"Upload Image or File\"]\n;;[mui-icons/ExposurePlus1 \"Word Count\"]\n\n\n;; TODO: also replace typeahead characters that follow \"/\". may need event to find selectionStart\n(defn select-slash-cmd\n  [index state]\n  (let [{:keys [atom-string]} @state\n        [_ _ expansion _] (slash-options index)\n        expand (if (fn? expansion) (expansion) expansion)\n        replace-str (subs atom-string 0 (dec (count atom-string)))\n        new-str     (str replace-str expand)]\n    (swap! state merge {:search/index 0\n                        :search/type nil\n                        :atom-string  new-str})))\n\n\n(defn handle-enter\n  [e uid state]\n  (let [{:keys [shift meta start head tail value]} (destruct-event e)\n        {:search/keys [query index results type]} @state]\n    (.. e preventDefault)\n    (cond\n      (= type :slash) (select-slash-cmd index state)\n\n      ;; TODO: move caret beyond ]]\n      ;; auto-complete link\n      (= type :page)\n      (let [{:keys [node/title]} (get results index)\n            new-str (clojure.string/replace-first value (str query \"]]\") (str title \"]]\"))]\n        (swap! state merge {:atom-string  new-str\n                            :search/query nil\n                            :search/type  nil}))\n      ;; auto-complete block ref\n      (= type :block)\n      (let [{:keys [block/uid]} (get results index)\n            new-str (clojure.string/replace-first value (str query \"))\") (str uid \"))\"))]\n        (swap! state merge {:atom-string  new-str\n                            :search/query nil\n                            :search/type nil}))\n\n      ;; shift-enter: add line break to textarea\n      shift (swap! state assoc :atom-string (str head \"\\n\" tail))\n      ;; cmd-enter: toggle todo/done\n      meta (let [first    (subs value 0 13)\n                 new-tail (subs value 13)\n                 new-str (cond (= first \"{{[[TODO]]}} \") (str \"{{[[DONE]]}} \" new-tail)\n                               (= first \"{{[[DONE]]}} \") new-tail\n                               :else (str \"{{[[TODO]]}} \" value))]\n             (swap! state assoc :atom-string new-str))\n      ;; default: may mutate blocks\n      :else (dispatch [:enter uid value start]))))\n\n\n;; todo: do this for ** and __\n(def PAIR-CHARS\n  {\"(\" \")\"\n   \"[\" \"]\"\n   \"{\" \"}\"\n   \"\\\"\" \"\\\"\"})\n  ;;\"`\" \"`\"\n  ;;\"*\" \"*\"\n   ;;\"_\" \"_\"})\n\n\n(defn surround\n  \"https://github.com/tpope/vim-surround\"\n  [selection around]\n  (if-let [complement (get PAIR-CHARS around)]\n    (str around selection complement)\n    (str around selection around)))\n\n\n;; TODO: it's ctrl for windows and linux right?\n(defn handle-system-shortcuts\n  \"Assumes meta is selected\"\n  [e _ state]\n  (let [{:keys [key-code target end selection]} (destruct-event e)]\n    (cond\n      (= key-code KeyCodes.A) (do (setStart target 0)\n                                  (setEnd target end))\n\n      ;; TODO: undo. conflicts with datascript undo\n      (= key-code KeyCodes.Z) (prn \"undo\")\n\n      ;; TODO: cut\n      (= key-code KeyCodes.X) (prn \"cut\")\n\n      ;; TODO: paste. magical\n      (= key-code KeyCodes.V) (prn \"paste\")\n\n      ;; TODO: bold\n      (= key-code KeyCodes.B) (let [new-str (surround selection \"**\")]\n                                (swap! state assoc :atom-string new-str))\n\n      ;; TODO: italicize\n      (= key-code KeyCodes.I) (let [new-str (surround selection \"__\")]\n                                (swap! state assoc :atom-string new-str)))))\n\n\n(defn pair-char?\n  [e]\n  (let [{:keys [key]} (destruct-event e)\n        pair-char-set (-> PAIR-CHARS\n                          seq\n                          flatten\n                          set)]\n    (pair-char-set key)))\n\n\n(defn handle-pair-char\n  [e _ state]\n  (let [{:keys [key head tail target start end selection]} (destruct-event e)\n        close-pair (get PAIR-CHARS key)]\n    (cond\n      (= start end) (let [new-str (str head key close-pair tail)]\n                      (js/setTimeout #(setCursorPosition target (inc start)) 10)\n                      (swap! state assoc :atom-string new-str))\n      (not= start end) (let [surround-selection (surround selection key)\n                             new-str (str head surround-selection tail)]\n                         (swap! state assoc :atom-string new-str)\n                         (js/setTimeout (fn []\n                                          (setStart target (inc start))\n                                          (setEnd target (inc end)))\n                                        10)))\n\n    ;; this is naive way to begin doing inline search. how to begin search with non-empty parens?\n    (let [four-char (subs (:atom-string @state) (dec start) (+ start 3))\n          double-brackets? (= \"[[]]\" four-char)\n          double-parens?   (= \"(())\" four-char)]\n      (cond\n        double-brackets? (swap! state assoc :search/type :page)\n        double-parens? (swap! state assoc :search/type :block)))))\n\n    ;; TODO: close bracket should not be created if it already exists\n    ;;(= key-code KeyCodes.CLOSE_SQUARE_BRACKET)\n\n\n\n(defn handle-backspace\n  [e uid state]\n  (let [{:keys [start end value head tail target meta]} (destruct-event e)\n        possible-pair (subs value (dec start) (inc start))]\n\n    (cond\n      ;; if selection, delete selected text\n      (not= start end) (let [new-tail (subs value end)\n                             new-str (str head new-tail)]\n                         (swap! state assoc :atom-string new-str))\n\n      ;; if meta, delete to start of line\n      meta (swap! state assoc :atom-string tail)\n\n      ;; if at block start, dispatch (requires context)\n      (block-start? e) (dispatch [:backspace uid value])\n\n      ;; if within brackets, delete close bracket as well\n      ;; todo: parameterize, use PAIR-CHARS\n      (some #(= possible-pair %) [\"[]\" \"{}\" \"()\"])\n      (let [head    (subs value 0 (dec start))\n            tail    (subs value (inc start))\n            new-str (str head tail)]\n        (swap! state assoc :atom-string new-str)\n        (swap! state assoc :search/type nil)\n        (js/setTimeout #(setCursorPosition target (dec start)) 10))\n\n      ;; default backspace: delete a character\n      :else (let [head    (subs value 0 (dec start))\n                  new-str (str head tail)\n                  {:search/keys [query]} @state]\n              (when (= \"/\" (last value))\n                (swap! state merge {:search/type nil\n                                    :search/query nil}))\n              (when query\n                (swap! state assoc :search/query (subs query 0 (dec (count query)))))\n              (swap! state assoc :atom-string new-str)))))\n\n\n(defn is-character-key?\n  \"Closure returns true even when using modifier keys. We do not make that assumption.\"\n  [e]\n  (let [{:keys [meta ctrl alt key-code]} (destruct-event e)]\n    (and (not meta) (not ctrl) (not alt)\n         (isCharacterKey key-code))))\n\n\n(defn write-char\n  [e _ state]\n  (let [{:keys [head tail key key-code]} (destruct-event e)\n        new-str (str head key tail)\n        {:search/keys [query type]} @state\n        new-query (str query key)]\n    (cond\n      (= key-code KeyCodes.SLASH) (swap! state merge {:search/query \"\"\n                                                      :search/type :slash})\n\n      (= type :slash) (swap! state assoc :search/query new-str)\n\n      ;; when in-line search dropdown is open\n      (= type :block) (let [results (db/search-in-block-content query)]\n                        (swap! state assoc :search/query new-query)\n                        (swap! state assoc :search/results results))\n\n    ;; when in-line search dropdown is open\n      (= type :page) (let [results (db/search-in-node-title query)]\n                       (swap! state assoc :search/query new-query)\n                       (swap! state assoc :search/results results)))\n\n    (swap! state merge {:atom-string new-str})))\n\n\n;; XXX: what happens here when we have multi-block selection? In this case we pass in `uids` instead of `uid`\n(defn block-key-down\n  [e uid state]\n  (let [{:keys [meta key-code]} (destruct-event e)]\n    (cond\n      (arrow-key-direction e) (handle-arrow-key e uid state)\n      (pair-char? e) (handle-pair-char e uid state)\n      (= key-code KeyCodes.TAB) (handle-tab e uid)\n      (= key-code KeyCodes.ENTER) (handle-enter e uid state)\n      (= key-code KeyCodes.BACKSPACE) (handle-backspace e uid state)\n      (= key-code KeyCodes.ESC) (handle-escape e state)\n      meta (handle-system-shortcuts e uid state)\n\n      ;; -- Default: Add new character -----------------------------------------\n      (is-character-key? e) (write-char e uid state))))\n\n\n;;:else (prn \"non-event\" key key-code))))\n\n"]}