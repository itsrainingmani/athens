{"version":3,"sources":["athens/keybindings.cljs"],"mappings":"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","names":["athens.keybindings/modifier-keys","e","shift","meta","ctrl","alt","athens.keybindings/get-end-points","cljs.core.js__GT_clj","goog.dom.selection/getEndPoints","athens.keybindings/destruct-event","vec__54878","cljs.core.nth","key","key-code","target","value","event","modifiers","start","end","selection","goog.dom.selection/getText","head","cljs.core.subs","tail","cljs.core.merge","var_args","G__54882","athens.keybindings/update-query","js/Error","state","type","athens.keybindings.update_query","query-fn","cljs.core._EQ_","athens.db/search-in-block-content","athens.db/search-in-node-title","link-start","cljs.core/count","cljs.core/re-find","new-query","results","cljs.core.swap_BANG_","cljs.core/assoc","athens.keybindings/ARROW-KEYS","goog.events.KeyCodes/UP","goog.events.KeyCodes/LEFT","goog.events.KeyCodes/DOWN","goog.events.KeyCodes/RIGHT","athens.keybindings/arrow-key-direction","athens.keybindings/block-start?","vec__54883","_","athens.keybindings/block-end?","map__54886","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","athens.keybindings/dec-cycle","min","max","v","athens.keybindings/inc-cycle","athens.keybindings/max-idx","coll","athens.keybindings/handle-arrow-key","uid","map__54888","map__54889","cljs.core/deref","top-row?","bottom-row?","selected-items","re_frame.core.subscribe","direction","and__4115__auto__","cljs.core/seq","re-frame.core/dispatch","cljs.core/update","cljs.core.partial","athens.keybindings/slash-options","cur-index","container-el","goog.dom/getElement","next-el","cljs.core.array_seq","athens.util/scroll-into-view","athens.util/scroll-if-needed","athens.keybindings/handle-tab","map__54892","block-zero?","athens.db/get-block","athens.keybindings/handle-escape","cljs.core.prn","js/module$node_modules$$material_ui$icons$index.Done","js/module$node_modules$$material_ui$icons$index.Timer","js/Date","cljs.core/clj->js","js/module$node_modules$$material_ui$icons$index.Today","athens.util.get_day","js/module$node_modules$$material_ui$icons$index.YouTube","js/module$node_modules$$material_ui$icons$index.DesktopWindows","athens.keybindings/select-slash-cmd","index","map__54894","vec__54895","atom-string","expansion","expand","cljs.core/fn?","replace-str","new-str","cljs.core/merge","athens.keybindings/auto-complete","completed-str","map__54899","map__54900","vec__54901","query","head-pattern","cljs.core/re-pattern","tail-pattern","new-head","closing-str","clojure.string/replace-first","closing-delimiter","after-closing-str","cljs.core/re-matches","athens.keybindings/handle-enter","map__54906","map__54907","map__54910","title","map__54912","first","new-tail","athens.keybindings/PAIR-CHARS","athens.keybindings/surround","around","temp__5733__auto__","complement","athens.keybindings/handle-system-shortcuts","map__54914","goog.events.KeyCodes/A","goog.dom.selection/setStart","goog.dom.selection/setEnd","goog.events.KeyCodes/Z","goog.events.KeyCodes/X","goog.events.KeyCodes/V","goog.events.KeyCodes/B","goog.events.KeyCodes/I","athens.keybindings/pair-char?","map__54916","pair-char-set","cljs.core/flatten","cljs.core/set","athens.keybindings/handle-pair-char","map__54918","close-pair","js/setTimeout","goog.dom.selection/setCursorPosition","cljs.core.not_EQ_","surround-selection","four-char","double-brackets?","double-parens?","athens.keybindings/handle-backspace","map__54921","possible-pair","p1__54920#","cljs.core/some","map__54923","cljs.core/last","athens.keybindings/is-character-key?","map__54925","cljs.core/not","goog.events.KeyCodes/isCharacterKey","athens.keybindings/write-char","map__54927","map__54928","goog.events.KeyCodes/SLASH","athens.keybindings/block-key-down","map__54931","goog.events.KeyCodes/TAB","goog.events.KeyCodes/ENTER","goog.events.KeyCodes/BACKSPACE","goog.events.KeyCodes/ESC"],"sourcesContent":["(ns athens.keybindings\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.db :as db]\n    [athens.util :refer [scroll-if-needed get-day scroll-into-view]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [clojure.string :refer [replace-first]]\n    [goog.dom :refer [getElement]]\n    [goog.dom.selection :refer [setStart setEnd getText setCursorPosition getEndPoints]]\n    [goog.events.KeyCodes :refer [isCharacterKey]]\n    [re-frame.core :refer [dispatch subscribe]])\n  (:import\n    (goog.events\n      KeyCodes)))\n\n\n(declare slash-options)\n\n\n(defn modifier-keys\n  [e]\n  (let [shift (.. e -shiftKey)\n        meta (.. e -metaKey)\n        ctrl (.. e -ctrlKey)\n        alt (.. e -altKey)]\n    {:shift shift :meta meta :ctrl ctrl :alt alt}))\n\n\n(defn get-end-points\n  [e]\n  (js->clj (getEndPoints (.. e -target))))\n\n\n(defn destruct-event\n  [e]\n  (let [key (.. e -key)\n        key-code (.. e -keyCode)\n        target (.. e -target)\n        value (.. target -value)\n        event {:key key :key-code key-code :target target :value value}\n        modifiers (modifier-keys e)\n        [start end] (get-end-points e)\n        selection (getText target)\n        head (subs value 0 start)\n        tail (subs value end)]\n    (merge modifiers event\n           {:start start :end end}\n           {:head head :tail tail}\n           {:selection selection})))\n\n\n(defn update-query\n  ([state head type] (update-query state head \"\" type))\n  ([state head key type]\n   (let [query-fn (cond\n                    (= type :block) db/search-in-block-content\n                    (= type :page)  db/search-in-node-title)\n         link-start (cond\n                      (= type :block) (count (re-find #\".*\\(\\(\" head))\n                      (= type :page)  (count (re-find #\".*\\[\\[\" head)))\n         new-query (str (subs head link-start) key)\n         results (query-fn new-query)]\n     (swap! state assoc :search/query new-query)\n     (swap! state assoc :search/results results))))\n\n\n(def ARROW-KEYS\n  {KeyCodes.UP    :up\n   KeyCodes.LEFT  :left\n   KeyCodes.DOWN  :down\n   KeyCodes.RIGHT :right})\n\n\n(defn arrow-key-direction\n  [e]\n  (let [key-code (.. e -keyCode)]\n    (ARROW-KEYS key-code)))\n\n\n(defn block-start?\n  [e]\n  (let [[start _] (get-end-points e)]\n    (zero? start)))\n\n\n(defn block-end?\n  [e]\n  (let [{:keys [value end]} (destruct-event e)]\n    (= end (count value))))\n\n\n(defn dec-cycle\n  [min max v]\n  (if (<= v min) max (dec v)))\n\n\n(defn inc-cycle\n  [min max v]\n  (if (>= v max) min (inc v)))\n\n\n(defn max-idx\n  [coll]\n  (-> coll count dec))\n\n\n(defn handle-arrow-key\n  \"May want to flatten this into multiple handlers.\"\n  [e uid state]\n  (let [{:keys [key-code shift target]} (destruct-event e)\n        ;; TODO\n        top-row?    true\n        bottom-row? true\n        {:search/keys [results type]} @state\n        selected-items @(subscribe [:selected/items])\n        direction (arrow-key-direction e)]\n\n    (cond\n\n      ;; items already selected, go up or down\n      (and shift (seq selected-items) (= :up direction) (dispatch [:selected/up]))\n      (and shift (seq selected-items) (= :down direction) (dispatch [:selected/down]))\n\n      ;; Only select block if leaving block content (up on top row or down on bottom row). Otherwise select text\n      (and shift (= :up direction) top-row?) (do\n                                               (.. target blur)\n                                               (dispatch [:editing/uid nil])\n                                               (dispatch [:selected/add-item uid]))\n\n      (and shift (= :down direction) bottom-row?) (do\n                                                    (.. target blur)\n                                                    (dispatch [:editing/uid nil])\n                                                    (dispatch [:selected/add-item uid]))\n\n      (= type :slash) (cond\n                        (= :up direction) (do\n                                            (.. e preventDefault)\n                                            (swap! state update :search/index (partial dec-cycle 0 (max-idx slash-options)))\n                                            (let [cur-index (:search/index @state)\n                                                  container-el (getElement \"slash-menu-container\")\n                                                  next-el (nth (array-seq (.. container-el -children)) cur-index)]\n                                              (scroll-into-view next-el (.. container-el -parentNode) false)))\n                        (= :down direction) (do\n                                              (.. e preventDefault)\n                                              (swap! state update :search/index (partial inc-cycle 0 (max-idx slash-options)))\n                                              (let [cur-index (:search/index @state)\n                                                    container-el (getElement \"slash-menu-container\")\n                                                    next-el (nth (array-seq (.. container-el -children)) cur-index)]\n                                                (scroll-into-view next-el container-el false))))\n\n      (or (= type :page) (= type :block))\n      (cond\n        (= key-code KeyCodes.UP) (do\n                                   (.. e preventDefault)\n                                   (swap! state update :search/index (partial dec-cycle 0 (max-idx results)))\n                                   (scroll-if-needed (getElement (str \"result-\" (:search/index @state)))\n                                                     (getElement \"dropdown-menu\")))\n        (= key-code KeyCodes.DOWN) (do\n                                     (.. e preventDefault)\n                                     (swap! state update :search/index (partial inc-cycle 0 (max-idx results)))\n                                     (scroll-if-needed (getElement (str \"result-\" (:search/index @state)))\n                                                       (getElement \"dropdown-menu\"))))\n      :else (cond\n              (and (= key-code KeyCodes.UP) top-row?) (dispatch [:up uid])\n              (and (= key-code KeyCodes.LEFT) (block-start? e)) (dispatch [:left uid])\n              (and (= key-code KeyCodes.DOWN) bottom-row?) (dispatch [:down uid])\n              (and (= key-code KeyCodes.RIGHT) (block-end? e)) (dispatch [:right uid])))))\n\n\n(defn handle-tab\n  [e uid]\n  (.. e preventDefault)\n  (let [{:keys [shift]} (destruct-event e)\n        ;; xxx: probably makes more sense to pass block value to handler directly\n        block-zero? (zero? (:block/order (db/get-block [:block/uid uid])))]\n    (cond\n      shift (dispatch [:unindent uid])\n      :else (when-not block-zero?\n              (dispatch [:indent uid])))))\n\n\n(defn handle-escape\n  [e state]\n  (.. e preventDefault)\n  (prn @state)\n  (prn state)\n  (cond\n    (:search/type @state) (swap! state assoc :search/type nil)\n    :else (dispatch [:editing/uid nil])))\n\n\n;; TODO: some expansions require caret placement after\n;; fixme: perhaps not the best place to put this, but need to access from both blocks and keybindings\n(def slash-options\n  [[mui-icons/Done           \"Add Todo\"      \"{{[[TODO]]}} \" \"cmd-enter\"]\n   [mui-icons/Timer          \"Current Time\"  #(.. (js/Date.) (toLocaleTimeString [] (clj->js {\"timeStyle\" \"short\"})))]\n   [mui-icons/Today          \"Today\"         #(str \"[[\" (:title (get-day 0)) \"]] \")]\n   [mui-icons/Today          \"Tomorrow\"      #(str \"[[\" (:title (get-day -1)) \"]]\")]\n   [mui-icons/Today          \"Yesterday\"     #(str \"[[\" (:title (get-day 1)) \"]]\")]\n   [mui-icons/YouTube        \"YouTube Embed\" \"{{[[youtube]]: }}\"]\n   [mui-icons/DesktopWindows \"iframe Embed\"  \"{{iframe: }}\"]])\n\n;;[mui-icons/ \"Block Embed\" #(str \"[[\" (:title (get-day 1)) \"]]\")]\n;;[mui-icons/DateRange \"Date Picker\"]\n;;[mui-icons/Attachment \"Upload Image or File\"]\n;;[mui-icons/ExposurePlus1 \"Word Count\"]\n\n\n;; TODO: also replace typeahead characters that follow \"/\". may need event to find selectionStart\n(defn select-slash-cmd\n  [index state]\n  (let [{:keys [atom-string]} @state\n        [_ _ expansion _] (slash-options index)\n        expand (if (fn? expansion) (expansion) expansion)\n        replace-str (subs atom-string 0 (dec (count atom-string)))\n        new-str     (str replace-str expand)]\n    (swap! state merge {:search/index 0\n                        :search/type nil\n                        :atom-string  new-str})))\n\n\n(defn auto-complete\n  [state e completed-str]\n  (let [{:keys [start head tail target]} (destruct-event e)\n        {:search/keys [query type]} @state\n        head-pattern (cond\n                       (= type :block) (re-pattern (str \"(.*)\\\\(\\\\(\" query))\n                       (= type :page)  (re-pattern (str \"(.*)\\\\[\\\\[\" query)))\n        tail-pattern (cond\n                       (= type :block) #\"(\\)\\))?(.*)\"\n                       (= type :page)  #\"(\\]\\])?(.*)\")\n        new-head (cond\n                   (= type :block) \"$1((\"\n                   (= type :page)  \"$1[[\")\n        closing-str (cond\n                      (= type :block) \"))\"\n                      (= type :page)  \"]]\")\n        new-str (replace-first head head-pattern (str new-head completed-str closing-str))\n        [_ closing-delimiter after-closing-str] (re-matches tail-pattern tail)]\n    (swap! state merge {:atom-string (str new-str after-closing-str)\n                        :search/query nil\n                        :search/type nil})\n    (when closing-delimiter (set! (. target -selectionStart) (+ 2 start)))))\n\n\n(defn handle-enter\n  [e uid state]\n  (let [{:keys [shift meta start head tail value]} (destruct-event e)\n        {:search/keys [index results type]} @state]\n    (.. e preventDefault)\n    (cond\n      (= type :slash) (select-slash-cmd index state)\n\n      ;; auto-complete link\n      (= type :page)\n      (let [{:keys [node/title]} (nth results index)]\n        (auto-complete state e title))\n\n      ;; auto-complete block ref\n      (= type :block)\n      (let [{:keys [block/uid]} (nth results index)]\n        (auto-complete state e uid))\n\n      ;; shift-enter: add line break to textarea\n      shift (swap! state assoc :atom-string (str head \"\\n\" tail))\n      ;; cmd-enter: toggle todo/done\n      meta (let [first    (subs value 0 13)\n                 new-tail (subs value 13)\n                 new-str (cond (= first \"{{[[TODO]]}} \") (str \"{{[[DONE]]}} \" new-tail)\n                               (= first \"{{[[DONE]]}} \") new-tail\n                               :else (str \"{{[[TODO]]}} \" value))]\n             (swap! state assoc :atom-string new-str))\n      ;; default: may mutate blocks\n      :else (dispatch [:enter uid value start]))))\n\n\n;; todo: do this for ** and __\n(def PAIR-CHARS\n  {\"(\" \")\"\n   \"[\" \"]\"\n   \"{\" \"}\"\n   \"\\\"\" \"\\\"\"})\n  ;;\"`\" \"`\"\n  ;;\"*\" \"*\"\n   ;;\"_\" \"_\"})\n\n\n(defn surround\n  \"https://github.com/tpope/vim-surround\"\n  [selection around]\n  (if-let [complement (get PAIR-CHARS around)]\n    (str around selection complement)\n    (str around selection around)))\n\n\n;; TODO: it's ctrl for windows and linux right?\n(defn handle-system-shortcuts\n  \"Assumes meta is selected\"\n  [e _ state]\n  (let [{:keys [key-code target end selection]} (destruct-event e)]\n    (cond\n      (= key-code KeyCodes.A) (do (setStart target 0)\n                                  (setEnd target end))\n\n      ;; TODO: undo. conflicts with datascript undo\n      (= key-code KeyCodes.Z) (prn \"undo\")\n\n      ;; TODO: cut\n      (= key-code KeyCodes.X) (prn \"cut\")\n\n      ;; TODO: paste. magical\n      (= key-code KeyCodes.V) (prn \"paste\")\n\n      ;; TODO: bold\n      (= key-code KeyCodes.B) (let [new-str (surround selection \"**\")]\n                                (swap! state assoc :atom-string new-str))\n\n      ;; TODO: italicize\n      (= key-code KeyCodes.I) (let [new-str (surround selection \"__\")]\n                                (swap! state assoc :atom-string new-str)))))\n\n\n(defn pair-char?\n  [e]\n  (let [{:keys [key]} (destruct-event e)\n        pair-char-set (-> PAIR-CHARS\n                          seq\n                          flatten\n                          set)]\n    (pair-char-set key)))\n\n\n(defn handle-pair-char\n  [e _ state]\n  (let [{:keys [key head tail target start end selection]} (destruct-event e)\n        close-pair (get PAIR-CHARS key)]\n    (cond\n      (= start end) (let [new-str (str head key close-pair tail)]\n                      (js/setTimeout #(setCursorPosition target (inc start)) 10)\n                      (swap! state assoc :atom-string new-str))\n      (not= start end) (let [surround-selection (surround selection key)\n                             new-str (str head surround-selection tail)]\n                         (swap! state assoc :atom-string new-str)\n                         (js/setTimeout (fn []\n                                          (setStart target (inc start))\n                                          (setEnd target (inc end)))\n                                        10)))\n\n    ;; this is naive way to begin doing inline search. how to begin search with non-empty parens?\n    (let [four-char (subs (:atom-string @state) (dec start) (+ start 3))\n          double-brackets? (= \"[[]]\" four-char)\n          double-parens?   (= \"(())\" four-char)]\n      (cond\n        double-brackets? (swap! state assoc :search/type :page)\n        double-parens? (swap! state assoc :search/type :block)))))\n\n    ;; TODO: close bracket should not be created if it already exists\n    ;;(= key-code KeyCodes.CLOSE_SQUARE_BRACKET)\n\n\n(defn handle-backspace\n  [e uid state]\n  (let [{:keys [start end value head tail target meta]} (destruct-event e)\n        possible-pair (subs value (dec start) (inc start))]\n\n    (cond\n      ;; if selection, delete selected text\n      (not= start end) (let [new-tail (subs value end)\n                             new-str (str head new-tail)]\n                         (swap! state assoc :atom-string new-str))\n\n      ;; if meta, delete to start of line\n      meta (swap! state assoc :atom-string tail)\n\n      ;; if at block start, dispatch (requires context)\n      (block-start? e) (dispatch [:backspace uid value])\n\n      ;; if within brackets, delete close bracket as well\n      ;; todo: parameterize, use PAIR-CHARS\n      (some #(= possible-pair %) [\"[]\" \"{}\" \"()\"])\n      (let [head    (subs value 0 (dec start))\n            tail    (subs value (inc start))\n            new-str (str head tail)]\n        (swap! state assoc :atom-string new-str)\n        (swap! state assoc :search/type nil)\n        (js/setTimeout #(setCursorPosition target (dec start)) 10))\n\n      ;; default backspace: delete a character\n      :else (let [head    (subs value 0 (dec start))\n                  new-str (str head tail)\n                  {:search/keys [query type]} @state]\n              (when (= \"/\" (last value))\n                (swap! state merge {:search/type nil\n                                    :search/query nil}))\n              (when query\n                (update-query state head type))\n              (swap! state assoc :atom-string new-str)))))\n\n\n(defn is-character-key?\n  \"Closure returns true even when using modifier keys. We do not make that assumption.\"\n  [e]\n  (let [{:keys [meta ctrl alt key-code]} (destruct-event e)]\n    (and (not meta) (not ctrl) (not alt)\n         (isCharacterKey key-code))))\n\n\n(defn write-char\n  [e _ state]\n  (let [{:keys [head tail key key-code]} (destruct-event e)\n        new-str (str head key tail)\n        {:search/keys [type]} @state]\n    (cond\n      (= key-code KeyCodes.SLASH) (swap! state merge {:search/query \"\"\n                                                      :search/type :slash})\n\n      (= type :slash) (swap! state assoc :search/query new-str)\n\n      ;; when in-line search dropdown is open\n      (or (= type :block) (= type :page)) (update-query state head key type))\n\n    (swap! state merge {:atom-string new-str})))\n\n\n;; XXX: what happens here when we have multi-block selection? In this case we pass in `uids` instead of `uid`\n(defn block-key-down\n  [e uid state]\n  (let [{:keys [meta key-code]} (destruct-event e)]\n    (cond\n      (arrow-key-direction e) (handle-arrow-key e uid state)\n      (pair-char? e) (handle-pair-char e uid state)\n      (= key-code KeyCodes.TAB) (handle-tab e uid)\n      (= key-code KeyCodes.ENTER) (handle-enter e uid state)\n      (= key-code KeyCodes.BACKSPACE) (handle-backspace e uid state)\n      (= key-code KeyCodes.ESC) (handle-escape e state)\n      meta (handle-system-shortcuts e uid state)\n\n      ;; -- Default: Add new character -----------------------------------------\n      (is-character-key? e) (write-char e uid state))))\n\n\n;;:else (prn \"non-event\" key key-code))))\n\n"]}