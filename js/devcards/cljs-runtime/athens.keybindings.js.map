{"version":3,"sources":["athens/keybindings.cljs"],"mappings":"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","names":["athens.keybindings/modifier-keys","e","shift","meta","ctrl","alt","athens.keybindings/get-end-points","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","G__56091","goog.dom.selection/getEndPoints","athens.keybindings/destruct-event","vec__56092","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","key","key-code","target","value","event","modifiers","start","end","selection","goog.dom.selection/getText","head","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","tail","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","athens.keybindings/ARROW-KEYS","goog.events.KeyCodes/UP","goog.events.KeyCodes/LEFT","goog.events.KeyCodes/DOWN","goog.events.KeyCodes/RIGHT","athens.keybindings/arrow-key-direction","athens.keybindings/block-start?","vec__56095","_","athens.keybindings/block-end?","map__56098","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/count","athens.keybindings/handle-arrow-key","uid","state","map__56100","map__56101","cljs.core/deref","top-row?","bottom-row?","query","index","results","selected-items","G__56104","re-frame.core/subscribe","direction","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","and__4174__auto__","cljs.core/seq","G__56107","re-frame.core/dispatch","G__56110","G__56111","G__56112","G__56113","G__56114","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","cljs.core/update","cljs.core/dec","athens.util/scroll-if-needed","js/document","cljs.core/inc","G__56115","G__56116","G__56117","G__56118","athens.keybindings/handle-tab","map__56119","block-zero?","athens.db/get-block","G__56121","G__56122","athens.keybindings/handle-escape","G__56123","athens.keybindings/handle-enter","map__56124","map__56125","page","block","map__56128","title","new-str","clojure.string/replace-first","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","map__56130","first","new-tail","G__56132","athens.keybindings/PAIR-CHARS","athens.keybindings/surround","around","temp__5733__auto__","complement","athens.keybindings/handle-system-shortcuts","map__56133","goog.events.KeyCodes/A","goog.dom.selection/setStart","goog.dom.selection/setEnd","goog.events.KeyCodes/Z","goog.events.KeyCodes/X","goog.events.KeyCodes/V","goog.events.KeyCodes/B","goog.events.KeyCodes/I","athens.keybindings/pair-char?","map__56135","pair-char-set","cljs.core/flatten","cljs.core/set","athens.keybindings/handle-pair-char","map__56137","close-pair","js/setTimeout","G__56139","G__56140","goog.dom.selection/setCursorPosition","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","surround-selection","G__56141","G__56142","G__56143","G__56144","four-char","double-brackets?","double-parens?","athens.keybindings/handle-backspace","map__56146","possible-pair","G__56148","p1__56145#","cljs.core/some","G__56149","G__56150","map__56151","athens.keybindings/is-character-key?","map__56153","cljs.core/not","goog.events.KeyCodes/isCharacterKey","athens.keybindings/write-char","map__56155","map__56156","new-query","goog.events.KeyCodes/SLASH","athens.db/search-in-block-content","athens.db/search-in-node-title","athens.keybindings/block-key-down","map__56159","goog.events.KeyCodes/TAB","goog.events.KeyCodes/ENTER","goog.events.KeyCodes/BACKSPACE","goog.events.KeyCodes/ESC"],"sourcesContent":["(ns athens.keybindings\n  (:require\n    [athens.db :as db]\n    [athens.util :refer [scroll-if-needed]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [goog.dom.selection :refer [setStart setEnd getText setCursorPosition getEndPoints]]\n    [goog.events.KeyCodes :refer [isCharacterKey]]\n    [re-frame.core :refer [dispatch subscribe]])\n  (:import\n    (goog.events\n      KeyCodes)))\n\n\n(defn modifier-keys\n  [e]\n  (let [shift (.. e -shiftKey)\n        meta (.. e -metaKey)\n        ctrl (.. e -ctrlKey)\n        alt (.. e -altKey)]\n    {:shift shift :meta meta :ctrl ctrl :alt alt}))\n\n\n(defn get-end-points\n  [e]\n  (js->clj (getEndPoints (.. e -target))))\n\n\n(defn destruct-event\n  [e]\n  (let [key (.. e -key)\n        key-code (.. e -keyCode)\n        target (.. e -target)\n        value (.. target -value)\n        event {:key key :key-code key-code :target target :value value}\n        modifiers (modifier-keys e)\n        [start end] (get-end-points e)\n        selection (getText target)\n        head (subs value 0 start)\n        tail (subs value end)]\n    (merge modifiers event\n           {:start start :end end}\n           {:head head :tail tail}\n           {:selection selection})))\n\n\n(def ARROW-KEYS\n  {KeyCodes.UP    :up\n   KeyCodes.LEFT  :left\n   KeyCodes.DOWN  :down\n   KeyCodes.RIGHT :right})\n\n\n(defn arrow-key-direction\n  [e]\n  (let [key-code (.. e -keyCode)]\n    (ARROW-KEYS key-code)))\n\n\n(defn block-start?\n  [e]\n  (let [[start _] (get-end-points e)]\n    (zero? start)))\n\n\n(defn block-end?\n  [e]\n  (let [{:keys [value end]} (destruct-event e)]\n    (= end (count value))))\n\n\n(defn handle-arrow-key\n  \"May want to flatten this into multiple handlers.\"\n  [e uid state]\n  (let [{:keys [key-code shift target]} (destruct-event e)\n        ;; TODO\n        top-row?    true\n        bottom-row? true\n        {:search/keys [query index results]} @state\n        selected-items @(subscribe [:selected/items])\n        direction (arrow-key-direction e)]\n\n    (prn selected-items (and shift direction))\n    (cond\n\n      ;; items already selected, go up or down\n      (and shift (seq selected-items) (= :up direction) (dispatch [:selected/up]))\n      (and shift (seq selected-items) (= :down direction) (dispatch [:selected/down]))\n\n      ;; Only select block if leaving block content (up on top row or down on bottom row). Otherwise select text\n      (and shift (= :up direction) top-row?) (do\n                                               (.. target blur)\n                                               (dispatch [:editing/uid nil])\n                                               (dispatch [:selected/add-item uid]))\n\n      (and shift (= :down direction) bottom-row?) (do\n                                                    (.. target blur)\n                                                    (dispatch [:editing/uid nil])\n                                                    (dispatch [:selected/add-item uid]))\n\n      ;; up and down should be handled by the dropdown menu if possible\n      query (cond\n              (= key-code KeyCodes.UP) (do\n                                         (.. e preventDefault)\n                                         (if (= index 0)\n                                           (swap! state assoc :search/index (dec (count results)))\n                                           (swap! state update :search/index dec))\n                                         (scroll-if-needed (.getElementById js/document (str \"result-\" (:search/index @state)))\n                                                           (.getElementById js/document \"dropdown-menu\")))\n              (= key-code KeyCodes.DOWN) (do\n                                           (.. e preventDefault)\n                                           (if (= index (dec (count results)))\n                                             (swap! state assoc :search/index 0)\n                                             (swap! state update :search/index inc))\n                                           (scroll-if-needed (.getElementById js/document (str \"result-\" (:search/index @state)))\n                                                             (.getElementById js/document \"dropdown-menu\"))))\n      :else (cond\n              (and (= key-code KeyCodes.UP) top-row?) (dispatch [:up uid])\n              (and (= key-code KeyCodes.LEFT) (block-start? e)) (dispatch [:left uid])\n              (and (= key-code KeyCodes.DOWN) bottom-row?) (dispatch [:down uid])\n              (and (= key-code KeyCodes.RIGHT) (block-end? e)) (dispatch [:right uid])))))\n\n\n(defn handle-tab\n  [e uid]\n  (.. e preventDefault)\n  (let [{:keys [shift]} (destruct-event e)\n        ;; xxx: probably makes more sense to pass block value to handler directly\n        block-zero? (zero? (:block/order (db/get-block [:block/uid uid])))]\n    (cond\n      shift (dispatch [:unindent uid])\n      :else (when-not block-zero?\n              (dispatch [:indent uid])))))\n\n\n(defn handle-escape\n  [e state]\n  (.. e preventDefault)\n  (prn @state)\n  (prn state)\n  (cond\n    (:slash? @state) (swap! state assoc :slash? false)\n    (:search/page @state) (swap! state assoc :search/page false)\n    (:search/block @state) (swap! state assoc :search/block false)\n    :else (dispatch [:editing/uid nil])))\n\n\n;;(defn cycle-todo\n;;  [])\n\n(defn handle-enter\n  [e uid state]\n  (let [{:keys [shift meta start head tail value]} (destruct-event e)\n        {:search/keys [query index results page block]} @state]\n    (.. e preventDefault)\n    (cond\n      ;; auto-complete link\n      page (let [{:keys [node/title]} (get results index)\n                 new-str (clojure.string/replace-first value (str query \"]]\") (str title \"]]\"))]\n             (swap! state merge {:atom-string  new-str\n                                 :search/query nil\n                                 :search/page  false}))\n      ;; auto-complete block ref\n      block (let [{:keys [block/uid]} (get results index)\n                  new-str (clojure.string/replace-first value (str query \"))\") (str uid \"))\"))]\n              (prn \"NEW\" new-str)\n              (swap! state merge {:atom-string  new-str\n                                  :search/query nil\n                                  :search/block false}))\n\n      ;; shift-enter: add line break to textarea\n      shift (swap! state assoc :atom-string (str head \"\\n\" tail))\n      ;; cmd-enter: toggle todo/done\n      meta (let [first    (subs value 0 13)\n                 new-tail (subs value 13)\n                 new-str (cond (= first \"{{[[TODO]]}} \") (str \"{{[[DONE]]}} \" new-tail)\n                               (= first \"{{[[DONE]]}} \") new-tail\n                               :else (str \"{{[[TODO]]}} \" value))]\n             (swap! state assoc :atom-string new-str))\n      ;; default: may mutate blocks\n      :else (dispatch [:enter uid value start]))))\n\n\n;; todo: do this for ** and __\n(def PAIR-CHARS\n  {\"(\" \")\"\n   \"[\" \"]\"\n   \"{\" \"}\"\n   \"\\\"\" \"\\\"\"})\n  ;;\"`\" \"`\"\n  ;;\"*\" \"*\"\n   ;;\"_\" \"_\"})\n\n\n(defn surround\n  \"https://github.com/tpope/vim-surround\"\n  [selection around]\n  (if-let [complement (get PAIR-CHARS around)]\n    (str around selection complement)\n    (str around selection around)))\n\n\n;; TODO: it's ctrl for windows and linux right?\n(defn handle-system-shortcuts\n  \"Assumes meta is selected\"\n  [e _ state]\n  (let [{:keys [key-code target end selection]} (destruct-event e)]\n    (cond\n      (= key-code KeyCodes.A) (do (setStart target 0)\n                                  (setEnd target end))\n\n      ;; TODO: undo. conflicts with datascript undo\n      (= key-code KeyCodes.Z) (prn \"undo\")\n\n      ;; TODO: cut\n      (= key-code KeyCodes.X) (prn \"cut\")\n\n      ;; TODO: paste. magical\n      (= key-code KeyCodes.V) (prn \"paste\")\n\n      ;; TODO: bold\n      (= key-code KeyCodes.B) (let [new-str (surround selection \"**\")]\n                                (swap! state assoc :atom-string new-str))\n\n      ;; TODO: italicize\n      (= key-code KeyCodes.I) (let [new-str (surround selection \"__\")]\n                                (swap! state assoc :atom-string new-str)))))\n\n\n(defn pair-char?\n  [e]\n  (let [{:keys [key]} (destruct-event e)\n        pair-char-set (-> PAIR-CHARS\n                          seq\n                          flatten\n                          set)]\n    (pair-char-set key)))\n\n\n(defn handle-pair-char\n  [e _ state]\n  (let [{:keys [key head tail target start end selection]} (destruct-event e)\n        close-pair (get PAIR-CHARS key)]\n    (cond\n      (= start end) (let [new-str (str head key close-pair tail)]\n                      (js/setTimeout #(setCursorPosition target (inc start)) 10)\n                      (swap! state assoc :atom-string new-str))\n      (not= start end) (let [surround-selection (surround selection key)\n                             new-str (str head surround-selection tail)]\n                         (swap! state assoc :atom-string new-str)\n                         (js/setTimeout (fn []\n                                          (setStart target (inc start))\n                                          (setEnd target (inc end)))\n                                        10)))\n\n    ;; this is naive way to begin doing inline search. how to begin search with non-empty parens?\n    (let [four-char (subs (:atom-string @state) (dec start) (+ start 3))\n          double-brackets? (= \"[[]]\" four-char)\n          double-parens?   (= \"(())\" four-char)]\n      (cond\n        double-brackets? (swap! state assoc :search/page true)\n        double-parens? (swap! state assoc :search/block true)))))\n\n    ;; TODO: close bracket should not be created if it already exists\n    ;;(= key-code KeyCodes.CLOSE_SQUARE_BRACKET)\n\n\n\n(defn handle-backspace\n  [e uid state]\n  (let [{:keys [start end value head tail target meta]} (destruct-event e)\n        possible-pair (subs value (dec start) (inc start))]\n\n    (cond\n      ;; if selection, delete selected text\n      (not= start end) (let [new-tail (subs value end)\n                             new-str (str head new-tail)]\n                         (swap! state assoc :atom-string new-str))\n\n      ;; if meta, delete to start of line\n      meta (swap! state assoc :atom-string tail)\n\n      ;; if at block start, dispatch (requires context)\n      (block-start? e) (dispatch [:backspace uid value])\n\n      ;; if within brackets, delete close bracket as well\n      ;; todo: parameterize, use PAIR-CHARS\n      (some #(= possible-pair %) [\"[]\" \"{}\" \"()\"])\n      (let [head    (subs value 0 (dec start))\n            tail    (subs value (inc start))\n            new-str (str head tail)]\n        (swap! state assoc :atom-string new-str)\n        (swap! state assoc :search/page false)\n        (js/setTimeout #(setCursorPosition target (dec start)) 10))\n\n      ;; default backspace: delete a character\n      :else (let [head    (subs value 0 (dec start))\n                  new-str (str head tail)\n                  {:search/keys [query]} @state]\n              (when query\n                (swap! state assoc :search/query (subs query 0 (dec (count query)))))\n              (swap! state assoc :atom-string new-str)))))\n\n\n(defn is-character-key?\n  \"Closure returns true even when using modifier keys. We do not make that assumption.\"\n  [e]\n  (let [{:keys [meta ctrl alt key-code]} (destruct-event e)]\n    (and (not meta) (not ctrl) (not alt)\n         (isCharacterKey key-code))))\n\n\n(defn write-char\n  [e _ state]\n  (let [{:keys [head tail key key-code]} (destruct-event e)\n        new-str (str head key tail)\n        {:search/keys [page block query]} @state\n        new-query (str query key)]\n    (cond\n      ;; FIXME: must press slash twice to close\n      (= key-code KeyCodes.SLASH) (swap! state update :slash? not)\n\n      ;; when in-line search dropdown is open\n      block (let [results (db/search-in-block-content query)]\n              (swap! state assoc :search/query new-query)\n              (swap! state assoc :search/results results))\n\n    ;; when in-line search dropdown is open\n      page (let [results (db/search-in-node-title query)]\n             (swap! state assoc :search/query new-query)\n             (swap! state assoc :search/results results)))\n\n    (swap! state merge {:atom-string new-str})))\n\n\n;; XXX: what happens here when we have multi-block selection? In this case we pass in `uids` instead of `uid`\n(defn block-key-down\n  [e uid state]\n  (let [{:keys [meta key-code]} (destruct-event e)]\n    (cond\n      (arrow-key-direction e) (handle-arrow-key e uid state)\n      (pair-char? e) (handle-pair-char e uid state)\n      (= key-code KeyCodes.TAB) (handle-tab e uid)\n      (= key-code KeyCodes.ENTER) (handle-enter e uid state)\n      (= key-code KeyCodes.BACKSPACE) (handle-backspace e uid state)\n      (= key-code KeyCodes.ESC) (handle-escape e state)\n      meta (handle-system-shortcuts e uid state)\n\n      ;; -- Default: Add new character -----------------------------------------\n      (is-character-key? e) (write-char e uid state))))\n\n\n;;:else (prn \"non-event\" key key-code))))\n\n"]}