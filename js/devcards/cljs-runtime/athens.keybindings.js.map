{"version":3,"sources":["athens/keybindings.cljs"],"mappings":";;;;;;;;AAaA,AAAA,AAAMA,AACHC;AADH,AAEE,AAAMC,AAAM,AAAID;AACVE,AAAK,AAAIF;AACTG,AAAK,AAAIH;AACTI,AAAI,AAAIJ;AAHd,AAAA,AAAA,AAAA,AAAA,AAAA,AAIUC,AAAYC,AAAWC,AAAUC;;AAG7C,AAAA,AAAMC,AACHL;AADH,AAEE,AAACM,AAAQ,AAAAC,AAAc,AAAIP;AAAlB,AAAA,AAAAO,AAACC;;;AAGZ,AAAA,AAAMC,AACHT;AADH,AAEE,AAAMY,AAAI,AAAIZ;AACRa,AAAS,AAAIb;AACbc,AAAO,AAAId;AACXe,AAAM,AAAID;AAHhB,AAAA,AAAA,AAAA,AAAA,AAIME,AAAYJ,AAAcC,AAAiBC,AAAcC;AACzDE,AAAU,AAAClB,AAAcC;AAL/BU,AAMkB,AAACL,AAAeL;AANlC,AAAAW,AAAAD,AAAA,AAAA,AAMOQ;AANP,AAAAP,AAAAD,AAAA,AAAA,AAMaS;AACPC,AAAU,AAACC,AAAQP;AACnBQ,AAAK,AAAA,AAACC,AAAKR,AAAQG;AACnBM,AAAK,AAACC,AAAKV,AAAMI;AATvB,AAUE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACO,AAAMT,AAAUD,AACFE,AAAWC,AACZG,AAAWE,AACNJ;;AAGvB,AAAA,AAAMO,AACH3B;AADH,AAEE,AAAA4B,AAAyB,AAACnB,AAAeT;AAAzC4B,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAcf;AAAd,AACE,AAAI,AAACoB,AAAEpB,AAASqB,AACZ,AAACD,AAAEpB,AAASsB,AACZ,AAACF,AAAEpB,AAASuB,AACZ,AAACH,AAAEpB,AAASwB;;AAGpB,AAAA,AAAMC,AACHtC;AADH,AAEE,AAAAuC,AAAgB,AAAClC,AAAeL;AAAhC,AAAAW,AAAA4B,AAAA,AAAA,AAAOrB;AAAP,AAAAP,AAAA4B,AAAA,AAAA,AAAaC;AAAb,AACE,AAAA,AAAOtB;;AAGX,AAAA,AAAMuB,AACHzC;AADH,AAEE,AAAA0C,AAA0B,AAACjC,AAAeT;AAA1C0C,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAb,AAAA,AAAAa,AAAA,AAAA,AAAA,AAAA,AAAAZ,AAAAC,AAAAW,AAAAA;AAAA,AAAAV,AAAAU,AAAA,AAAc3B;AAAd,AAAAiB,AAAAU,AAAA,AAAoBvB;AAApB,AACE,AAACc,AAAEd,AAAI,AAACwB,AAAM5B;;AAGlB,AAAA,AAAM6B,AACH5C,AAAE6C,AAAIC;AADT,AAEE,AAAAC,AAAyB,AAACtC,AAAeT;AAAzC+C,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlB,AAAA,AAAAkB,AAAA,AAAA,AAAA,AAAA,AAAAjB,AAAAC,AAAAgB,AAAAA;AAAA,AAAAf,AAAAe,AAAA,AAAclC;AAAd,AAEMqC;AAFN,AAGMC;AAHNH,AAAA,AAAAC,AAI4CH;AAJ5CE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnB,AAAA,AAAAmB,AAAA,AAAA,AAAA,AAAA,AAAAlB,AAAAC,AAAAiB,AAAAA;AAAA,AAAAhB,AAAAgB,AAAA,AAIqBI;AAJrB,AAAApB,AAAAgB,AAAA,AAI2BK;AAJ3B,AAAArB,AAAAgB,AAAA,AAIiCM;AAJjC,AAME,AACEF;AAAM,AACE,AAACnB,AAAEpB,AAASqB;AAAa,AACE,AAAIlC;;AACJ,AAAI,AAAA,AAACiC,AAAEoB;AACL,AAAA,AAACE,AAAMT,AAAMU,AAAoB,AAAA,AAAK,AAACb,AAAMW;;AAC7C,AAAA,AAACC,AAAMT,AAAMW,AAAqBC;;;AALjE,AAME,AAACzB,AAAEpB,AAASuB;AAAe,AACE,AAAIpC;;AACJ,AAAI,AAACiC,AAAEoB,AAAM,AAAA,AAAK,AAACV,AAAMW;AACvB,AAAA,AAAA,AAACC,AAAMT,AAAMU;;AACb,AAAA,AAACD,AAAMT,AAAMW,AAAqBE;;;AAVnE;;;;AADR,AAYQ,AACE,AAAK,AAAC1B,AAAEpB,AAASqB,AAAagB;AAAU,AAAAU,AAAA,AAAA,AAAef;AAAf,AAAA,AAAAe,AAAAA,AAACC,AAAAA,AAAAA;;AAD3C,AAEE,AAAK,AAAC5B,AAAEpB,AAASsB,AAAe,AAACG,AAAatC;AAAI,AAAA8D,AAAA,AAAA,AAAiBjB;AAAjB,AAAA,AAAAiB,AAAAA,AAACD,AAAAA,AAAAA;;AAFrD,AAGE,AAAK,AAAC5B,AAAEpB,AAASuB,AAAee;AAAa,AAAAY,AAAA,AAAA,AAAiBlB;AAAjB,AAAA,AAAAkB,AAAAA,AAACF,AAAAA,AAAAA;;AAHhD,AAIE,AAAK,AAAC5B,AAAEpB,AAASwB,AAAgB,AAACI,AAAWzC;AAAI,AAAAgE,AAAA,AAAA,AAAkBnB;AAAlB,AAAA,AAAAmB,AAAAA,AAACH,AAAAA,AAAAA;;AAJpD;;;;;;;;AAOZ,AAAA,AAAMI,AACHjE,AAAE6C;AADL,AAEE,AAAI7C;;AACJ,AAAAkE,AAAsB,AAACzD,AAAeT;AAAtCkE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArC,AAAA,AAAAqC,AAAA,AAAA,AAAA,AAAA,AAAApC,AAAAC,AAAAmC,AAAAA;AAAA,AAAAlC,AAAAkC,AAAA,AAAcjE;AAERkE,AAAY,AAAA,AAAO,AAAA,AAAc,AAAA,AAAA,AAACC,AAAyBvB;AAFjE,AAGE,AACE5C;AAAM,AAAAoE,AAAA,AAAA,AAAqBxB;AAArB,AAAA,AAAAwB,AAAAA,AAACR,AAAAA,AAAAA;;AADT,AAEQ,AAAUM;AAAV;;AAAA,AACE,AAAAG,AAAA,AAAA,AAAmBzB;AAAnB,AAAA,AAAAyB,AAAAA,AAACT,AAAAA,AAAAA;;;;;AAMf,AAAA,AAAMU,AACHvE,AAAE6C,AAAIC;AADT,AAEE,AAAA0B,AAAiD,AAAC/D,AAAeT;AAAjEwE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3C,AAAA,AAAA2C,AAAA,AAAA,AAAA,AAAA,AAAA1C,AAAAC,AAAAyC,AAAAA;AAAA,AAAAxC,AAAAwC,AAAA,AAAcvE;AAAd,AAAA+B,AAAAwC,AAAA,AAAoBtE;AAApB,AAAA8B,AAAAwC,AAAA,AAAyBtD;AAAzB,AAAAc,AAAAwC,AAAA,AAA+BlD;AAA/B,AAAAU,AAAAwC,AAAA,AAAoChD;AAApC,AAAAQ,AAAAwC,AAAA,AAAyCzD;AAAzC0D,AAAA,AAAAxB,AACuDH;AADvD2B,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5C,AAAA,AAAA4C,AAAA,AAAA,AAAA,AAAA,AAAA3C,AAAAC,AAAA0C,AAAAA;AAAA,AAAAzC,AAAAyC,AAAA,AACqBrB;AADrB,AAAApB,AAAAyC,AAAA,AAC2BpB;AAD3B,AAAArB,AAAAyC,AAAA,AACiCnB;AADjC,AAAAtB,AAAAyC,AAAA,AACyCC;AADzC,AAAA1C,AAAAyC,AAAA,AAC8CE;AAD9C,AAEE,AAAI3E;;AACJ,AAEE0E;AAAK,AAAAE,AAA2B,AAAC5C,AAAIsB,AAAQD;AAAxCuB,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/C,AAAA,AAAA+C,AAAA,AAAA,AAAA,AAAA,AAAA9C,AAAAC,AAAA6C,AAAAA;AAAA,AAAA5C,AAAA4C,AAAA,AAAcC;AACRC,AAAQ,AAACC,AAA6BhE,AAAM,AAAA,AAAKqC,AAAY,AAAA,AAAKyB;AADxE,AAEE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACG,AAAMlC,AAAMmC,AAAqBH;;AAJ3C,AAQEH;AAAM,AAAAO,AAA0B,AAAClD,AAAIsB,AAAQD;AAAvC6B,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAArD,AAAA,AAAAqD,AAAA,AAAA,AAAA,AAAA,AAAApD,AAAAC,AAAAmD,AAAAA;AAAA,AAAAlD,AAAAkD,AAAA,AAAcrC;AACRiC,AAAQ,AAACC,AAA6BhE,AAAM,AAAA,AAAKqC,AAAY,AAAA,AAAKP;AADxE,AAEE,AAAA,AAACsC,AAAUL;;AACX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACE,AAAMlC,AAAMmC,AAAqBH;;AAX5C,AAgBE7E;AAAM,AAAA,AAACsD,AAAMT,AAAMU,AAAmB,AAAA,AAAKlC,AAAUE;;AAhBvD,AAkBEtB;AAAK,AAAMkF,AAAS,AAAA,AAAA,AAAC7D,AAAKR;AACfsE,AAAS,AAAA,AAAC5D,AAAKV;AACf+D,AAAQ,AAAA,AAAA,AAAM,AAAA,AAAC7C,AAAEmD,AAAuB,AAAA,AAAqBC,AAC/C,AAAA,AAACpD,AAAEmD,AAAuBC,AACpB,AAAA,AAAqBtE;;AAJ/C,AAKE,AAAA,AAACwC,AAAMT,AAAMU,AAAmBsB;;AAvBzC,AAyBQ,AAAAQ,AAAA,AAAA,AAAkBzC,AAAI9B,AAAMG;AAA5B,AAAA,AAAAoE,AAAAA,AAACzB,AAAAA,AAAAA;;;;;;;AAIb,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAK0B;AAUL;;;AAAA,AAAMC,AAEHpE,AAAUqE;AAFb,AAGE,AAAAC,AAAoB,AAAC1D,AAAIuD,AAAWE;AAApC,AAAA,AAAAC;AAAA,AAAAA,AAASC;AAAT,AACE,AAAKF,AAAOrE,AAAUuE;;AACtB,AAAKF,AAAOrE,AAAUqE;;;AAI1B;;;AAAA,AAAMG,AAEH5F,AAAEwC,AAAEM;AAFP,AAGE,AAAA+C,AAA8C,AAACpF,AAAeT;AAA9D6F,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhE,AAAA,AAAAgE,AAAA,AAAA,AAAA,AAAA,AAAA/D,AAAAC,AAAA8D,AAAAA;AAAA,AAAA7D,AAAA6D,AAAA,AAAchF;AAAd,AAAAmB,AAAA6D,AAAA,AAAuB/E;AAAvB,AAAAkB,AAAA6D,AAAA,AAA8B1E;AAA9B,AAAAa,AAAA6D,AAAA,AAAkCzE;AAAlC,AACE,AACE,AAACa,AAAEpB,AAASiF;AAAY,AAAI,AAAA,AAACC,AAASjF;;AACV,AAACkF,AAAOlF,AAAOK;;AAF7C,AAKE,AAACc,AAAEpB,AAASoF;AAAY,AAAA,AAACd;;AAL3B,AAQE,AAAClD,AAAEpB,AAASqF;AAAY,AAAA,AAACf;;AAR3B,AAWE,AAAClD,AAAEpB,AAASsF;AAAY,AAAA,AAAChB;;AAX3B,AAcE,AAAClD,AAAEpB,AAASuF;AAAY,AAAMtB,AAAQ,AAAA,AAACU,AAASpE;AAAxB,AACE,AAAA,AAACmC,AAAMT,AAAMU,AAAmBsB;;AAf5D,AAkBE,AAAC7C,AAAEpB,AAASwF;AAAY,AAAMvB,AAAQ,AAAA,AAACU,AAASpE;AAAxB,AACE,AAAA,AAACmC,AAAMT,AAAMU,AAAmBsB;;AAnB5D;;;;;;;;AAsBJ,AAAA,AAAMwB,AACHtG;AADH,AAEE,AAAAuG,AAAoB,AAAC9F,AAAeT;AAApCuG,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1E,AAAA,AAAA0E,AAAA,AAAA,AAAA,AAAA,AAAAzE,AAAAC,AAAAwE,AAAAA;AAAA,AAAAvE,AAAAuE,AAAA,AAAc3F;AACR4F,AAAc,AAAA,AAAA,AAAIjB,AACAkB,AACAC,AACAC;AAJxB,AAKE,AAACH,AAAAA,AAAAA,AAAc5F,AAAAA;;AAGnB,AAAA,AAAMgG,AACH5G,AAAEwC,AAAEM;AADP,AAEE,AAAA+D,AAAyD,AAACpG,AAAeT;AAAzE6G,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhF,AAAA,AAAAgF,AAAA,AAAA,AAAA,AAAA,AAAA/E,AAAAC,AAAA8E,AAAAA;AAAA,AAAA7E,AAAA6E,AAAA,AAAcjG;AAAd,AAAAoB,AAAA6E,AAAA,AAAkBvF;AAAlB,AAAAU,AAAA6E,AAAA,AAAuBrF;AAAvB,AAAAQ,AAAA6E,AAAA,AAA4B/F;AAA5B,AAAAkB,AAAA6E,AAAA,AAAmC3F;AAAnC,AAAAc,AAAA6E,AAAA,AAAyC1F;AAAzC,AAAAa,AAAA6E,AAAA,AAA6CzF;AACvC0F,AAAW,AAAC9E,AAAIuD,AAAW3E;AADjC,AAEE,AACE,AAACqB,AAAEf,AAAMC;AAAK,AAAM2D,AAAQ,AAAKxD,AAAKV,AAAIkG,AAAWtF;AAAvC,AACE,AAAA,AAACuF;AAAD,AAAgB,AAAAC,AAAmBlG;AAAnBmG,AAA0B,AAAA,AAAK/F;AAA/B,AAAA,AAAA8F,AAAAC,AAACC;AAAjB;;AACA,AAAA,AAAC3D,AAAMT,AAAMU,AAAmBsB;;AAHlD,AAIE,AAACqC,AAAKjG,AAAMC;AAAK,AAAMiG,AAAmB,AAAC5B,AAASpE,AAAUR;AACvCkE,AAAQ,AAAKxD,AAAK8F,AAAmB5F;AAD3C,AAEE,AAAA,AAAC+B,AAAMT,AAAMU,AAAmBsB;;AAChC,AAACiC,AAAc;AAAA,AACE,AAAAM,AAAUvG;AAAVwG,AAAiB,AAAA,AAAKpG;AAAtB,AAAA,AAAAmG,AAAAC,AAACvB;;AACD,AAAAwB,AAAQzG;AAAR0G,AAAe,AAAA,AAAKrG;AAApB,AAAA,AAAAoG,AAAAC,AAACxB;AAFlB;;AAPrB;;;AAaA,AAAMyB,AAAU,AAAClG,AAAK,AAAA,AAAA,AAAA0B,AAAeH,AAAO,AAAA,AAAK5B,AAAO,AAAA,AAAGA;AACrDwG,AAAiB,AAAA,AAACzF,AAASwF;AAC3BE,AAAiB,AAAA,AAAC1F,AAASwF;AAFjC,AAGE,AACEC;AAAiB,AAAA,AAAA,AAACnE,AAAMT,AAAMU;;AADhC,AAEEmE;AAAe,AAAA,AAAA,AAACpE,AAAMT,AAAMU;;AAF9B;;;;AASN,AAAA,AAAMoE,AACH5H,AAAE6C,AAAIC;AADT,AAEE,AAAA+E,AAAsD,AAACpH,AAAeT;AAAtE6H,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhG,AAAA,AAAAgG,AAAA,AAAA,AAAA,AAAA,AAAA/F,AAAAC,AAAA8F,AAAAA;AAAA,AAAA7F,AAAA6F,AAAA,AAAc3G;AAAd,AAAAc,AAAA6F,AAAA,AAAoB1G;AAApB,AAAAa,AAAA6F,AAAA,AAAwB9G;AAAxB,AAAAiB,AAAA6F,AAAA,AAA8BvG;AAA9B,AAAAU,AAAA6F,AAAA,AAAmCrG;AAAnC,AAAAQ,AAAA6F,AAAA,AAAwC/G;AAAxC,AAAAkB,AAAA6F,AAAA,AAA+C3H;AACzC4H,AAAc,AAACvG,AAAKR,AAAM,AAAA,AAAKG,AAAO,AAAA,AAAKA;AADjD,AAGE,AAEE,AAACiG,AAAKjG,AAAMC;AAAK,AAAMkE,AAAS,AAAC5D,AAAKV,AAAMI;AACrB2D,AAAQ,AAAKxD,AAAK+D;AADxB,AAEE,AAAA,AAAC9B,AAAMT,AAAMU,AAAmBsB;;AAJrD,AAOE5E;AAAK,AAAA,AAACqD,AAAMT,AAAMU,AAAmBhC;;AAPvC,AAUE,AAACc,AAAatC;AAAG,AAAA+H,AAAA,AAAA,AAAsBlF,AAAI9B;AAA1B,AAAA,AAAAgH,AAAAA,AAAClE,AAAAA,AAAAA;;AAVpB,AAcE,AAAA,AAAAmE,AAACC;AAAD,AAAO,AAAAD,AAAC/F,AAAE6F;AAAV,AAAA,AAAA,AAAA;AACA,AAAMxG,AAAQ,AAAA,AAACC,AAAKR,AAAQ,AAAA,AAAKG;AAC3BM,AAAQ,AAACC,AAAKV,AAAM,AAAA,AAAKG;AACzB4D,AAAQ,AAAKxD,AAAKE;AAFxB,AAGE,AAAA,AAAC+B,AAAMT,AAAMU,AAAmBsB;;AAChC,AAAA,AAAA,AAACvB,AAAMT,AAAMU;;AACb,AAAA,AAACuD;AAAD,AAAgB,AAAAmB,AAAmBpH;AAAnBqH,AAA0B,AAAA,AAAKjH;AAA/B,AAAA,AAAAgH,AAAAC,AAACjB;AAAjB;;AApBJ,AAuBQ,AAAM5F,AAAQ,AAAA,AAACC,AAAKR,AAAQ,AAAA,AAAKG;AAC3B4D,AAAQ,AAAKxD,AAAKE;AADxB4G,AAAA,AAAAnF,AAE8BH;AAF9BsF,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvG,AAAA,AAAAuG,AAAA,AAAA,AAAA,AAAA,AAAAtG,AAAAC,AAAAqG,AAAAA;AAAA,AAAApG,AAAAoG,AAAA,AAEqBhF;AAFrB,AAGE,AAAMA;AAAN,AACE,AAAA,AAACG,AAAMT,AAAMU,AAAoB,AAAA,AAACjC,AAAK6B,AAAQ,AAAA,AAAK,AAACT,AAAMS;;AAD7D;;AAEA,AAAA,AAACG,AAAMT,AAAMU,AAAmBsB;;;;;;;AAG9C;;;AAAA,AAAMuD,AAEHrI;AAFH,AAGE,AAAAsI,AAAuC,AAAC7H,AAAeT;AAAvDsI,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAzG,AAAA,AAAAyG,AAAA,AAAA,AAAA,AAAA,AAAAxG,AAAAC,AAAAuG,AAAAA;AAAA,AAAAtG,AAAAsG,AAAA,AAAcpI;AAAd,AAAA8B,AAAAsG,AAAA,AAAmBnI;AAAnB,AAAA6B,AAAAsG,AAAA,AAAwBlI;AAAxB,AAAA4B,AAAAsG,AAAA,AAA4BzH;AAA5B,AACE,AAAK,AAAC0H,AAAIrI;AAAV,AAAgB,AAACqI,AAAIpI;AAArB,AAA2B,AAACoI,AAAInI;AAC3B,AAACoI,AAAe3H;;AADrB;;;AAAA;;;AAAA;;;AAIJ,AAAA,AAAM4H,AACHzI,AAAEwC,AAAEM;AADP,AAEE,AAAA4F,AAAuC,AAACjI,AAAeT;AAAvD0I,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA7G,AAAA,AAAA6G,AAAA,AAAA,AAAA,AAAA,AAAA5G,AAAAC,AAAA2G,AAAAA;AAAA,AAAA1G,AAAA0G,AAAA,AAAcpH;AAAd,AAAAU,AAAA0G,AAAA,AAAmBlH;AAAnB,AAAAQ,AAAA0G,AAAA,AAAwB9H;AAAxB,AAAAoB,AAAA0G,AAAA,AAA4B7H;AACtBiE,AAAQ,AAAKxD,AAAKV,AAAIY;AAD5BmH,AAAA,AAAA1F,AAEyCH;AAFzC6F,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9G,AAAA,AAAA8G,AAAA,AAAA,AAAA,AAAA,AAAA7G,AAAAC,AAAA4G,AAAAA;AAAA,AAAA3G,AAAA2G,AAAA,AAEqBjE;AAFrB,AAAA1C,AAAA2G,AAAA,AAE0BhE;AAF1B,AAAA3C,AAAA2G,AAAA,AAEgCvF;AAC1BwF,AAAU,AAAKxF,AAAMxC;AAH3B,AAIE,AAEE,AAACqB,AAAEpB,AAASgI;AAAgB,AAAA,AAACtF,AAAMT,AAAMW,AAAe8E;;AAF1D,AAKE5D;AAAM,AAAMrB,AAAQ,AAACwF,AAA2B1F;AAA1C,AACE,AAAA,AAACG,AAAMT,AAAMU,AAAoBoF;;AACjC,AAAA,AAACrF,AAAMT,AAAMU,AAAsBF;;AAP7C,AAUEoB;AAAK,AAAMpB,AAAQ,AAACyF,AAAwB3F;AAAvC,AACE,AAAA,AAACG,AAAMT,AAAMU,AAAoBoF;;AACjC,AAAA,AAACrF,AAAMT,AAAMU,AAAsBF;;AAZ5C;;;;AAcA,AAAA,AAAA,AAAC0B,AAAMlC,AAAMmC,AAAoBH;;AAIrC,AAAA,AAAMkE,AACHhJ,AAAE6C,AAAIC;AADT,AAEE,AAAAmG,AAA8B,AAACxI,AAAeT;AAA9CiJ,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAApH,AAAA,AAAAoH,AAAA,AAAA,AAAA,AAAA,AAAAnH,AAAAC,AAAAkH,AAAAA;AAAA,AAAAjH,AAAAiH,AAAA,AAAc/I;AAAd,AAAA8B,AAAAiH,AAAA,AAAmBpI;AAAnB,AACE,AACE,AAACc,AAAW3B;AAAG,AAAC4C,AAAiB5C,AAAE6C,AAAIC;;AADzC,AAEE,AAACwD,AAAWtG;AAAG,AAAC4G,AAAiB5G,AAAE6C,AAAIC;;AAFzC,AAGE,AAACb,AAAEpB,AAASqI;AAAc,AAACjF,AAAWjE,AAAE6C;;AAH1C,AAIE,AAACZ,AAAEpB,AAASsI;AAAgB,AAAC5E,AAAavE,AAAE6C,AAAIC;;AAJlD,AAKE,AAACb,AAAEpB,AAASuI;AAAoB,AAACxB,AAAiB5H,AAAE6C,AAAIC;;AAL1D,AAME5C;AAAK,AAAC0F,AAAwB5F,AAAE6C,AAAIC;;AANtC,AASE,AAACuF,AAAkBrI;AAAG,AAACyI,AAAWzI,AAAE6C,AAAIC;;AAT1C","names":["athens.keybindings/modifier-keys","e","shift","meta","ctrl","alt","athens.keybindings/get-end-points","cljs.core.js__GT_clj.cljs$core$IFn$_invoke$arity$1","G__55801","goog.dom.selection/getEndPoints","athens.keybindings/destruct-event","vec__55802","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","key","key-code","target","value","event","modifiers","start","end","selection","goog.dom.selection/getText","head","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","tail","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","athens.keybindings/arrow-key?","map__55805","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","goog.events.KeyCodes/UP","goog.events.KeyCodes/LEFT","goog.events.KeyCodes/DOWN","goog.events.KeyCodes/RIGHT","athens.keybindings/block-start?","vec__55807","_","athens.keybindings/block-end?","map__55810","cljs.core/count","athens.keybindings/handle-arrow-key","uid","state","map__55812","map__55813","cljs.core/deref","top-row?","bottom-row?","query","index","results","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","cljs.core/update","cljs.core/dec","cljs.core/inc","G__55816","re-frame.core/dispatch","G__55817","G__55818","G__55819","athens.keybindings/handle-tab","map__55820","block-zero?","athens.db/get-block","G__55822","G__55823","athens.keybindings/handle-enter","map__55824","map__55825","page","block","map__55828","title","new-str","clojure.string/replace-first","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","map__55830","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","first","new-tail","G__55832","athens.keybindings/PAIR-CHARS","athens.keybindings/surround","around","temp__5733__auto__","complement","athens.keybindings/handle-system-shortcuts","map__55836","goog.events.KeyCodes/A","goog.dom.selection/setStart","goog.dom.selection/setEnd","goog.events.KeyCodes/Z","goog.events.KeyCodes/X","goog.events.KeyCodes/V","goog.events.KeyCodes/B","goog.events.KeyCodes/I","athens.keybindings/pair-char?","map__55838","pair-char-set","cljs.core/seq","cljs.core/flatten","cljs.core/set","athens.keybindings/handle-pair-char","map__55840","close-pair","js/setTimeout","G__55842","G__55843","goog.dom.selection/setCursorPosition","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","surround-selection","G__55844","G__55845","G__55846","G__55847","four-char","double-brackets?","double-parens?","athens.keybindings/handle-backspace","map__55849","possible-pair","G__55851","p1__55848#","cljs.core/some","G__55852","G__55853","map__55854","athens.keybindings/is-character-key?","map__55856","cljs.core/not","goog.events.KeyCodes/isCharacterKey","athens.keybindings/write-char","map__55858","map__55859","new-query","goog.events.KeyCodes/SLASH","athens.db/search-in-block-content","athens.db/search-in-node-title","athens.keybindings/block-key-down","map__55864","goog.events.KeyCodes/TAB","goog.events.KeyCodes/ENTER","goog.events.KeyCodes/BACKSPACE"],"sourcesContent":["(ns athens.keybindings\n  (:require\n    [athens.db :as db]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [goog.dom.selection :refer [setStart setEnd getText setCursorPosition getEndPoints]]\n    [goog.events.KeyCodes :refer [isCharacterKey]]\n    [re-frame.core :refer [dispatch]])\n  (:import\n    (goog.events\n      KeyCodes)))\n\n\n(defn modifier-keys\n  [e]\n  (let [shift (.. e -shiftKey)\n        meta (.. e -metaKey)\n        ctrl (.. e -ctrlKey)\n        alt (.. e -altKey)]\n    {:shift shift :meta meta :ctrl ctrl :alt alt}))\n\n\n(defn get-end-points\n  [e]\n  (js->clj (getEndPoints (.. e -target))))\n\n\n(defn destruct-event\n  [e]\n  (let [key (.. e -key)\n        key-code (.. e -keyCode)\n        target (.. e -target)\n        value (.. target -value)\n        event {:key key :key-code key-code :target target :value value}\n        modifiers (modifier-keys e)\n        [start end] (get-end-points e)\n        selection (getText target)\n        head (subs value 0 start)\n        tail (subs value end)]\n    (merge modifiers event\n           {:start start :end end}\n           {:head head :tail tail}\n           {:selection selection})))\n\n\n(defn arrow-key?\n  [e]\n  (let [{:keys [key-code]} (destruct-event e)]\n    (or (= key-code KeyCodes.UP)\n        (= key-code KeyCodes.LEFT)\n        (= key-code KeyCodes.DOWN)\n        (= key-code KeyCodes.RIGHT))))\n\n\n(defn block-start?\n  [e]\n  (let [[start _] (get-end-points e)]\n    (zero? start)))\n\n\n(defn block-end?\n  [e]\n  (let [{:keys [value end]} (destruct-event e)]\n    (= end (count value))))\n\n\n(defn handle-arrow-key\n  [e uid state]\n  (let [{:keys [key-code]} (destruct-event e)\n        ;; TODO\n        top-row?    true\n        bottom-row? true\n        {:search/keys [query index results]} @state]\n\n    (cond\n      query (cond\n              (= key-code KeyCodes.UP) (do\n                                         (.. e preventDefault)\n                                         (if (= index 0)\n                                           (swap! state assoc :search/index (dec (count results)))\n                                           (swap! state update :search/index dec)))\n              (= key-code KeyCodes.DOWN) (do\n                                           (.. e preventDefault)\n                                           (if (= index (dec (count results)))\n                                             (swap! state assoc :search/index 0)\n                                             (swap! state update :search/index inc))))\n      :else (cond\n              (and (= key-code KeyCodes.UP) top-row?) (dispatch [:up uid])\n              (and (= key-code KeyCodes.LEFT) (block-start? e)) (dispatch [:left uid])\n              (and (= key-code KeyCodes.DOWN) bottom-row?) (dispatch [:down uid])\n              (and (= key-code KeyCodes.RIGHT) (block-end? e)) (dispatch [:right uid])))))\n\n\n(defn handle-tab\n  [e uid]\n  (.. e preventDefault)\n  (let [{:keys [shift]} (destruct-event e)\n        ;; xxx: probably makes more sense to pass block value to handler directly\n        block-zero? (zero? (:block/order (db/get-block [:block/uid uid])))]\n    (cond\n      shift (dispatch [:unindent uid])\n      :else (when-not block-zero?\n              (dispatch [:indent uid])))))\n\n\n;;(defn cycle-todo\n;;  [])\n\n(defn handle-enter\n  [e uid state]\n  (let [{:keys [shift meta start head tail value]} (destruct-event e)\n        {:search/keys [query index results page block]} @state]\n    (.. e preventDefault)\n    (cond\n      ;; auto-complete link\n      page (let [{:keys [node/title]} (get results index)\n                 new-str (clojure.string/replace-first value (str query \"]]\") (str title \"]]\"))]\n             (swap! state merge {:atom-string  new-str\n                                 :search/query nil\n                                 :search/page  false}))\n      ;; auto-complete block ref\n      block (let [{:keys [block/uid]} (get results index)\n                  new-str (clojure.string/replace-first value (str query \"))\") (str uid \"))\"))]\n              (prn \"NEW\" new-str)\n              (swap! state merge {:atom-string  new-str\n                                  :search/query nil\n                                  :search/block false}))\n\n      ;; shift-enter: add line break to textarea\n      shift (swap! state assoc :atom-string (str head \"\\n\" tail))\n      ;; cmd-enter: toggle todo/done\n      meta (let [first    (subs value 0 13)\n                 new-tail (subs value 13)\n                 new-str (cond (= first \"{{[[TODO]]}} \") (str \"{{[[DONE]]}} \" new-tail)\n                               (= first \"{{[[DONE]]}} \") new-tail\n                               :else (str \"{{[[TODO]]}} \" value))]\n             (swap! state assoc :atom-string new-str))\n      ;; default: may mutate blocks\n      :else (dispatch [:enter uid value start]))))\n\n\n;; todo: do this for ** and __\n(def PAIR-CHARS\n  {\"(\" \")\"\n   \"[\" \"]\"\n   \"{\" \"}\"\n   \"\\\"\" \"\\\"\"})\n  ;;\"`\" \"`\"\n  ;;\"*\" \"*\"\n   ;;\"_\" \"_\"})\n\n\n(defn surround\n  \"https://github.com/tpope/vim-surround\"\n  [selection around]\n  (if-let [complement (get PAIR-CHARS around)]\n    (str around selection complement)\n    (str around selection around)))\n\n\n;; TODO: it's ctrl for windows and linux right?\n(defn handle-system-shortcuts\n  \"Assumes meta is selected\"\n  [e _ state]\n  (let [{:keys [key-code target end selection]} (destruct-event e)]\n    (cond\n      (= key-code KeyCodes.A) (do (setStart target 0)\n                                  (setEnd target end))\n\n      ;; TODO: undo. conflicts with datascript undo\n      (= key-code KeyCodes.Z) (prn \"undo\")\n\n      ;; TODO: cut\n      (= key-code KeyCodes.X) (prn \"cut\")\n\n      ;; TODO: paste. magical\n      (= key-code KeyCodes.V) (prn \"paste\")\n\n      ;; TODO: bold\n      (= key-code KeyCodes.B) (let [new-str (surround selection \"**\")]\n                                (swap! state assoc :atom-string new-str))\n\n      ;; TODO: italicize\n      (= key-code KeyCodes.I) (let [new-str (surround selection \"__\")]\n                                (swap! state assoc :atom-string new-str)))))\n\n\n(defn pair-char?\n  [e]\n  (let [{:keys [key]} (destruct-event e)\n        pair-char-set (-> PAIR-CHARS\n                          seq\n                          flatten\n                          set)]\n    (pair-char-set key)))\n\n\n(defn handle-pair-char\n  [e _ state]\n  (let [{:keys [key head tail target start end selection]} (destruct-event e)\n        close-pair (get PAIR-CHARS key)]\n    (cond\n      (= start end) (let [new-str (str head key close-pair tail)]\n                      (js/setTimeout #(setCursorPosition target (inc start)) 10)\n                      (swap! state assoc :atom-string new-str))\n      (not= start end) (let [surround-selection (surround selection key)\n                             new-str (str head surround-selection tail)]\n                         (swap! state assoc :atom-string new-str)\n                         (js/setTimeout (fn []\n                                          (setStart target (inc start))\n                                          (setEnd target (inc end)))\n                                        10)))\n\n    ;; this is naive way to begin doing inline search. how to begin search with non-empty parens?\n    (let [four-char (subs (:atom-string @state) (dec start) (+ start 3))\n          double-brackets? (= \"[[]]\" four-char)\n          double-parens?   (= \"(())\" four-char)]\n      (cond\n        double-brackets? (swap! state assoc :search/page true)\n        double-parens? (swap! state assoc :search/block true)))))\n\n    ;; TODO: close bracket should not be created if it already exists\n    ;;(= key-code KeyCodes.CLOSE_SQUARE_BRACKET)\n\n\n\n(defn handle-backspace\n  [e uid state]\n  (let [{:keys [start end value head tail target meta]} (destruct-event e)\n        possible-pair (subs value (dec start) (inc start))]\n\n    (cond\n      ;; if selection, delete selected text\n      (not= start end) (let [new-tail (subs value end)\n                             new-str (str head new-tail)]\n                         (swap! state assoc :atom-string new-str))\n\n      ;; if meta, delete to start of line\n      meta (swap! state assoc :atom-string tail)\n\n      ;; if at block start, dispatch (requires context)\n      (block-start? e) (dispatch [:backspace uid value])\n\n      ;; if within brackets, delete close bracket as well\n      ;; todo: parameterize, use PAIR-CHARS\n      (some #(= possible-pair %) [\"[]\" \"{}\" \"()\"])\n      (let [head    (subs value 0 (dec start))\n            tail    (subs value (inc start))\n            new-str (str head tail)]\n        (swap! state assoc :atom-string new-str)\n        (swap! state assoc :search/page false)\n        (js/setTimeout #(setCursorPosition target (dec start)) 10))\n\n      ;; default backspace: delete a character\n      :else (let [head    (subs value 0 (dec start))\n                  new-str (str head tail)\n                  {:search/keys [query]} @state]\n              (when query\n                (swap! state assoc :search/query (subs query 0 (dec (count query)))))\n              (swap! state assoc :atom-string new-str)))))\n\n\n(defn is-character-key?\n  \"Closure returns true even when using modifier keys. We do not make that assumption.\"\n  [e]\n  (let [{:keys [meta ctrl alt key-code]} (destruct-event e)]\n    (and (not meta) (not ctrl) (not alt)\n         (isCharacterKey key-code))))\n\n\n(defn write-char\n  [e _ state]\n  (let [{:keys [head tail key key-code]} (destruct-event e)\n        new-str (str head key tail)\n        {:search/keys [page block query]} @state\n        new-query (str query key)]\n    (cond\n      ;; FIXME: must press slash twice to close\n      (= key-code KeyCodes.SLASH) (swap! state update :slash? not)\n\n      ;; when in-line search dropdown is open\n      block (let [results (db/search-in-block-content query)]\n              (swap! state assoc :search/query new-query)\n              (swap! state assoc :search/results results))\n\n    ;; when in-line search dropdown is open\n      page (let [results (db/search-in-node-title query)]\n             (swap! state assoc :search/query new-query)\n             (swap! state assoc :search/results results)))\n\n    (swap! state merge {:atom-string new-str})))\n\n\n;; XXX: what happens here when we have multi-block selection? In this case we pass in `uids` instead of `uid`\n(defn block-key-down\n  [e uid state]\n  (let [{:keys [meta key-code]} (destruct-event e)]\n    (cond\n      (arrow-key? e) (handle-arrow-key e uid state)\n      (pair-char? e) (handle-pair-char e uid state)\n      (= key-code KeyCodes.TAB) (handle-tab e uid)\n      (= key-code KeyCodes.ENTER) (handle-enter e uid state)\n      (= key-code KeyCodes.BACKSPACE) (handle-backspace e uid state)\n      meta (handle-system-shortcuts e uid state)\n\n      ;; -- Default: Add new character -----------------------------------------\n      (is-character-key? e) (write-char e uid state))))\n\n\n;;:else (prn \"non-event\" key key-code))))\n\n"]}