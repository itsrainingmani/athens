{"version":3,"sources":["athens/util.cljc"],"mappings":";;AAGA,AAAA,AAAMA;AAAN,AAEE,AAAA,AAACC,AAAK,AAAK,AAACC;;AAGd,AAAA,AAAMC;AAAN,AAEE,AAAI,AAAAC;;AAIN,AAAA,AAAMC,AAEHC,AAAQC;AAFX,AAGE,AAAI,AAAG,AAAID,AAAoB,AAAIC;AAEjC,AAAM,AAAIA,AAAsB,AAAID;;AAEpC,AAAME,AAAa,AAAG,AAAIF,AAAoB,AAAIA;AAC5CG,AAAa,AAAG,AAAIF,AAAsB,AAAIA;AADpD,AAGE,AAAM,AAAGE,AAAaD;AAAtB,AAEE,AACE,AAAID,AACJ,AAAGC,AAAa,AAAID;;AAJxB;;;;AAON,AAAA,AAAMG,AACHC;AADH,AAEE,AAAMC,AAAK,AAAA,AAAID;AACTE,AAAS,AAAG,AAAIF,AAAU,AAAIC;AAC9BE,AAAS,AAAG,AAAIH,AAAU,AAAIC;AAFpC,AAAA,AAAA,AAAA,AAGMC,AAAYC;;AAGpB,AAAA,AAAMC,AACHC;AADH,AAEE,AAAMJ,AAAK,AAAII;AAAf,AACM,AAAG,AAAIJ,AACJ,AAAIA,AACP,AAAA;;AAGR;;;AAAA,AAAMK,AAEHX,AAAQC;AAFX,AAGE,AAAMW,AAAO,AAAIZ;AACXa,AAAS,AAAIZ;AADnB,AAEE,AACE,AAAG,AAAIW,AAAgB,AAAIC,AAC3B,AAAG,AAAID,AAAa,AAAIC","names":["athens.util/gen-block-uid","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core/random-uuid","athens.util/now-ts","js/Date","athens.util/scroll-if-needed","element","container","offsetBottom","scrollBottom","athens.util/mouse-offset","e","rect","offset-x","offset-y","athens.util/vertical-center","el","athens.util/is-beyond-rect?","el-box","cont-box"],"sourcesContent":["(ns athens.util)\n\n\n(defn gen-block-uid\n  []\n  (subs (str (random-uuid)) 27))\n\n\n(defn now-ts\n  []\n  (-> (js/Date.) .getTime))\n\n\n;; TODO: move all these DOM utilities to a .cljs file instead of cljc\n(defn scroll-if-needed\n  ;; https://stackoverflow.com/a/45851497\n  [element container]\n  (if (< (.. element -offsetTop) (.. container -scrollTop))\n    ;; If the element is higher than its container's top...\n    (set! (.. container -scrollTop) (.. element -offsetTop))\n    ;; Otherwise, find the bottom of the element and the container...\n    (let [offsetBottom (+ (.. element -offsetTop) (.. element -offsetHeight))\n          scrollBottom (+ (.. container -scrollTop) (.. container -offsetHeight))]\n      ;; ..and if it's lower than the container's bottom\n      (when (< scrollBottom offsetBottom)\n        ;; Scroll the container so the element is in view\n        (set!\n          (.. container -scrollTop)\n          (- offsetBottom (.. container -offsetHeight)))))))\n\n\n(defn mouse-offset\n  [e]\n  (let [rect (.. e -target getBoundingClientRect)\n        offset-x (- (.. e -pageX) (.. rect -left))\n        offset-y (- (.. e -pageY) (.. rect -top))]\n    {:x offset-x :y offset-y}))\n\n\n(defn vertical-center\n  [el]\n  (let [rect (.. el getBoundingClientRect)]\n    (-> (- (.. rect -bottom)\n           (.. rect -top))\n        (/ 2))))\n\n\n(defn is-beyond-rect?\n  \"Checks if any part of the element is above or below the container's bounding rect\"\n  [element container]\n  (let [el-box (.. element getBoundingClientRect)\n        cont-box (.. container getBoundingClientRect)]\n    (or\n      (> (.. el-box -bottom) (.. cont-box -bottom))\n      (< (.. el-box -top) (.. cont-box -top)))))\n"]}