{"version":3,"sources":["athens/util.cljs"],"mappings":";;;;;;AAQA,AAAA,AAAMA;AAAN,AAEE,AAAA,AAACC,AAAK,AAAK,AAACC;;AAMd,AAAA,AAAMC,AAEHC,AAAQC;AAFX,AAGE,AAAI,AAAG,AAAID,AAAoB,AAAIC;AAEjC,AAAM,AAAIA,AAAsB,AAAID;;AAEpC,AAAME,AAAa,AAAG,AAAIF,AAAoB,AAAIA;AAC5CG,AAAa,AAAG,AAAIF,AAAsB,AAAIA;AADpD,AAGE,AAAM,AAAGE,AAAaD;AAAtB,AAEE,AACE,AAAID,AACJ,AAAGC,AAAa,AAAID;;AAJxB;;;;AAON,AAAA,AAAMG,AACHC;AADH,AAEE,AAAMC,AAAK,AAAA,AAAID;AACTE,AAAS,AAAG,AAAIF,AAAU,AAAIC;AAC9BE,AAAS,AAAG,AAAIH,AAAU,AAAIC;AAFpC,AAAA,AAAA,AAAA,AAGMC,AAAYC;;AAGpB,AAAA,AAAMC,AACHC;AADH,AAEE,AAAMJ,AAAK,AAAII;AAAf,AACM,AAAG,AAAIJ,AACJ,AAAIA,AACP,AAAA;;AAGR;;;AAAA,AAAMK,AAEHX,AAAQC;AAFX,AAGE,AAAMW,AAAO,AAAIZ;AACXa,AAAS,AAAIZ;AADnB,AAEE,AACE,AAAG,AAAIW,AAAgB,AAAIC,AAC3B,AAAG,AAAID,AAAa,AAAIC;;AAM9B,AAAKC,AAAgB,AAAA,AAACC;AACtB,AAAKC,AAAU,AAAA,AAACD;AAChB,AAAKE,AAAa,AAAA,AAACF;AAGnB,AAAA,AAAMG;AAAN,AAEE,AAAI,AAAAC;;AAGN,AAAA;;;AAAA,AAAAC,AAAME;AAAN,AAAA,AAAAD,AAAA,AAAA;AAAA,AAAA,AAAAA;AAAA;AAAA,AAAAC;;;AAAA;AAAA,AAAAA,AAAA,AAAA,AAAA;;;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA;;;;;AAAA,AAAA,AAAA,AAAMD;AAAN,AAEM,AAAA,AAACE;;;AAFP,AAAA,AAAA,AAAMF,AAGFG;AAHJ,AAIG,AAAMC,AAAI,AAACC,AACC,AAACC,AACD,AAAA,AAACC,AAAeJ;AAF5B,AAAA,AAAA,AAAA,AAGU,AAACK,AAASd,AAAUU,AACpB,AAACI,AAASb,AAAaS;;;AARpC,AAAA,AAAA,AAAMJ;;AAAN,AAWA,AAAA,AAAMS,AACHC;AADH,AAEE,AAAI,AAACC,AAAID;AAAT,AAAA,AAAA;;AAEE,AACE,AAACE,AAAUF,AAAIG;AAAAA,AACf,AAACC,AAAYD;AADEA,AAEf,AAACL,AAAShB,AAAgBqB;AAFXA,AAGf,AAAA,AAAA,AAACE,AAAeF;AAJlB,AAKE,AAAA,AAAA,AAACE,AAAeF;;;AAMtB,AAAKG,AACH,AAAA,AAAMC;AAAN,AACE,AAACC,AAAOD,AACA,AAAA,AAAAE,AAACC;AAAD,AAAM,AAAA,AAAAD;AAAaF;;AAG/B;;;AAAA,AAAMI,AAEHC;AAFH,AAGE,AAACC,AAAcD,AAAIN","names":["athens.util/gen-block-uid","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","cljs.core/random-uuid","athens.util/scroll-if-needed","element","container","offsetBottom","scrollBottom","athens.util/mouse-offset","e","rect","offset-x","offset-y","athens.util/vertical-center","el","athens.util/is-beyond-rect?","el-box","cont-box","athens.util/date-col-format","tick.alpha.api.formatter.cljs$core$IFn$_invoke$arity$1","athens.util/US-format","athens.util/title-format","athens.util/now-ts","js/Date","var_args","G__39193","athens.util/get-day","js/Error","athens.util.get_day.cljs$core$IFn$_invoke$arity$1","offset","day","tick.alpha.api._.cljs$core$IFn$_invoke$arity$variadic","tick.alpha.api.date_time.cljs$core$IFn$_invoke$arity$0","tick.alpha.api/new-duration","tick.alpha.api.format.cljs$core$IFn$_invoke$arity$2","athens.util/date-string","ts","cljs.core/not","tick.alpha.api.instant.cljs$core$IFn$_invoke$arity$1","x","tick.alpha.api.date_time.cljs$core$IFn$_invoke$arity$1","clojure.string/replace","athens.util/regex-esc-char-map","esc-chars","cljs.core/zipmap","p1__39197#","cljs.core.map.cljs$core$IFn$_invoke$arity$2","athens.util/escape-str","str","clojure.string/escape"],"sourcesContent":["(ns athens.util\n  (:require\n    [clojure.string :as string]\n    [posh.reagent :refer [#_pull]]\n    [tick.alpha.api :as t]\n    [tick.locale-en-us]))\n\n\n(defn gen-block-uid\n  []\n  (subs (str (random-uuid)) 27))\n\n\n;; -- DOM ----------------------------------------------------------------\n\n;; TODO: move all these DOM utilities to a .cljs file instead of cljc\n(defn scroll-if-needed\n  ;; https://stackoverflow.com/a/45851497\n  [element container]\n  (if (< (.. element -offsetTop) (.. container -scrollTop))\n    ;; If the element is higher than its container's top...\n    (set! (.. container -scrollTop) (.. element -offsetTop))\n    ;; Otherwise, find the bottom of the element and the container...\n    (let [offsetBottom (+ (.. element -offsetTop) (.. element -offsetHeight))\n          scrollBottom (+ (.. container -scrollTop) (.. container -offsetHeight))]\n      ;; ..and if it's lower than the container's bottom\n      (when (< scrollBottom offsetBottom)\n        ;; Scroll the container so the element is in view\n        (set!\n          (.. container -scrollTop)\n          (- offsetBottom (.. container -offsetHeight)))))))\n\n\n(defn mouse-offset\n  [e]\n  (let [rect (.. e -target getBoundingClientRect)\n        offset-x (- (.. e -pageX) (.. rect -left))\n        offset-y (- (.. e -pageY) (.. rect -top))]\n    {:x offset-x :y offset-y}))\n\n\n(defn vertical-center\n  [el]\n  (let [rect (.. el getBoundingClientRect)]\n    (-> (- (.. rect -bottom)\n           (.. rect -top))\n        (/ 2))))\n\n\n(defn is-beyond-rect?\n  \"Checks if any part of the element is above or below the container's bounding rect\"\n  [element container]\n  (let [el-box (.. element getBoundingClientRect)\n        cont-box (.. container getBoundingClientRect)]\n    (or\n      (> (.. el-box -bottom) (.. cont-box -bottom))\n      (< (.. el-box -top) (.. cont-box -top)))))\n\n\n;; -- Date and Time ------------------------------------------------------\n\n\n(def date-col-format (t/formatter \"LLLL dd, yyyy h':'mma\"))\n(def US-format (t/formatter \"MM-dd-yyyy\"))\n(def title-format (t/formatter \"LLLL dd, yyyy\"))\n\n\n(defn now-ts\n  []\n  (-> (js/Date.) .getTime))\n\n\n(defn get-day\n  \"Returns today's date or a date OFFSET days before today\"\n  ([] (get-day 0))\n  ([offset]\n   (let [day (t/-\n               (t/date-time)\n               (t/new-duration offset :days))]\n     {:uid   (t/format US-format day)\n      :title (t/format title-format day)})))\n\n\n(defn date-string\n  [ts]\n  (if (not ts)\n    [:span \"(unknown date)\"]\n    (as->\n      (t/instant ts) x\n      (t/date-time x)\n      (t/format date-col-format x)\n      (string/replace x #\"AM\" \"am\")\n      (string/replace x #\"PM\" \"pm\"))))\n\n\n;; -- Regex -----------------------------------------------------------\n\n;; https://stackoverflow.com/a/11672480\n(def regex-esc-char-map\n  (let [esc-chars \"()*&^%$#![]\"]\n    (zipmap esc-chars\n            (map #(str \"\\\\\" %) esc-chars))))\n\n\n(defn escape-str\n  \"Take a string and escape all regex special characters in it\"\n  [str]\n  (string/escape str regex-esc-char-map))\n"]}