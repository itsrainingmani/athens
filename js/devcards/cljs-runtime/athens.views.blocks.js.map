{"version":3,"sources":["athens/views/blocks.cljs"],"mappings":"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","names":["athens.views.blocks/block-style","athens.style.color.cljs$core$IFn$_invoke$arity$1","athens.views.blocks/block-disclosure-toggle-style","athens.style.color.cljs$core$IFn$_invoke$arity$2","athens.views.blocks/bullet-style","G__58100","garden.selectors/&","garden.selectors/after","athens.style/OPACITIES","G__58101","garden.selectors/before","stylefy.core.keyframes.cljs$core$IFn$_invoke$arity$variadic","athens.views.blocks/drop-area-indicator","athens.views.blocks/block-content-style","athens.views.blocks/tooltip-style","athens.style/DEPTH-SHADOWS","athens.views.blocks/dragging-style","athens.views.blocks/on-change","value","uid","G__58102","re-frame.core/dispatch","athens.util/now-ts","athens.views.blocks/db-on-change","goog.functions/debounce","athens.views.blocks/toggle","id","open","G__58103","cljs.core/not","p__58104","map__58105","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","athens.views.blocks/toggle-el","children","cljs.core/seq","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$2","js/module$node_modules$$material_ui$icons$index.KeyboardArrowDown","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$1","p__58107","map__58108","athens.views.blocks/tooltip-el","order","dbid","edit-time","state","map__58110","cljs.core/deref","dragging","tooltip","and__4174__auto__","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","athens.views.all-pages/date-string","p__58112","map__58113","athens.views.blocks/bullet-el","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","e","related","goog.dom.classlist/contains","_","athens.views.blocks/block-content-el","block","is-editing","map__58115","string","G__58117","related-container","G__58118","G__58119","goog.dom/getAncestorByClass","source-container","G__58120","G__58121","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","source-uid","parent-dragging","G__58122","G__58123","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","G__58124","komponentit.autosize/textarea","athens.keybindings/block-key-down","athens.parse-renderer/parse-and-render","cljs.core/empty?","athens.views.blocks/inline-selected-search-option","athens.views.blocks/page-search-el","_block","map__58125","page","query","results","index","or__4185__auto__","athens.views.dropdown/dropdown","clojure.string/blank?","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","iter__4582__auto__","s__58128","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__58130","cljs.core/chunk-buffer","i__58129","vec__58131","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","map__58134","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__58127","cljs.core/chunk-rest","vec__58136","cljs.core/first","map__58139","cljs.core/cons","cljs.core/rest","i","title","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","cljs.core/list","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","athens.views.blocks/block-el","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/add-watch","_context","_atom","old","new","map__58141","atom-string","G__58143","G__58144","map__58145","map__58146","drag-target","state-edit-time","parent","athens.db/get-parent","last-child?","editing-uid","G__58149","re-frame.core/subscribe","new-state","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","G__58150","G__58151","G__58152","G__58153","G__58154","G__58155","G__58156","athens.views.dropdown/slash-menu-component","s__58158","b__58160","i__58159","iter__58157","child","athens.views.blocks/block-component","ident","athens.db/get-block-document","cljs.core/chunk-first"],"sourcesContent":["(ns athens.views.blocks\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.db :as db]\n    [athens.keybindings :refer [block-key-down]]\n    [athens.parse-renderer :refer [parse-and-render]]\n    [athens.style :refer [color DEPTH-SHADOWS OPACITIES]]\n    [athens.util :refer [now-ts]]\n    [athens.views.all-pages :refer [date-string]]\n    [athens.views.dropdown :refer [slash-menu-component #_menu dropdown]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [garden.selectors :as selectors]\n    [goog.dom :refer [getAncestorByClass]]\n    [goog.dom.classlist :refer [contains]]\n    [goog.functions :refer [debounce]]\n    [komponentit.autosize :as autosize]\n    [re-frame.core :refer [dispatch subscribe]]\n    [reagent.core :as r]\n    [stylefy.core :as stylefy :refer [use-style]]))\n\n\n;;; Styles\n\n\n(def block-style\n  {:display \"flex\"\n   :line-height \"2em\"\n   :position \"relative\"\n   :justify-content \"flex-start\"\n   :flex-direction \"column\"\n   ::stylefy/manual [[:&.show-tree-indicator:before {:content \"''\"\n                                                     :position \"absolute\"\n                                                     :width \"1px\"\n                                                     :left \"calc(1.25em + 1px)\"\n                                                     :top \"2em\"\n                                                     :bottom \"0\"\n                                                     :transform \"translateX(50%)\"\n                                                     :background (color :border-color)}]]})\n\n\n(def block-disclosure-toggle-style\n  {:width \"1em\"\n   :height \"2em\"\n   :flex-shrink \"0\"\n   :display \"flex\"\n   :background \"none\"\n   :border \"none\"\n   :border-radius \"100px\"\n   :transition \"all 0.05s ease\"\n   :align-items \"center\"\n   :justify-content \"center\"\n   :padding \"0\"\n   :-webkit-appearance \"none\"\n   :color (color :body-text-color 0.4)\n   ::stylefy/mode [[:hover {:color (color :link-color)}]\n                   [\":is(button)\" {:cursor \"pointer\"}]]\n   ::stylefy/manual [[:&.closed [:svg {:transform \"rotate(-90deg)\"}]]]})\n\n\n(def bullet-style\n  {:flex-shrink \"0\"\n   :cursor \"pointer\"\n   :width \"0.75em\"\n   :margin-right \"0.25em\"\n   :transition \"all 0.05s ease\"\n   :height \"2em\"\n   :color (color :body-text-color :opacity-low)\n   ::stylefy/mode [[:after {:content \"''\"\n                            :background \"currentColor\"\n                            :transition \"all 0.05s ease\"\n                            :border-radius \"100px\"\n                            :box-shadow \"0 0 0 2px transparent\"\n                            :display \"inline-flex\"\n                            :margin \"50% 0 0 50%\"\n                            :transform \"translate(-50%, -50%)\"\n                            :height \"0.3125em\"\n                            :width \"0.3125em\"}]\n                   [:hover {:color (color :link-color)}]]\n\n   ::stylefy/manual [[:&.closed-with-children [(selectors/& (selectors/after)) {:box-shadow (str \"0 0 0 2px \" (color :body-text-color))\n                                                                                :opacity (:opacity-med OPACITIES)}]]\n                     [:&.closed-with-children [(selectors/& (selectors/before)) {:content \"none\"}]]\n                     [:&:hover:after {:transform \"translate(-50%, -50%) scale(1.3)\"}]\n                     [:&.dragging {:z-index 1\n                                   :cursor \"grabbing\"\n                                   :color (color :body-text-color)}]]})\n\n\n(stylefy/keyframes \"drop-area-appear\"\n                   [:from\n                    {:opacity \"0\"}]\n                   [:to\n                    {:opacity \"1\"}])\n\n\n(stylefy/keyframes \"drop-area-color-pulse\"\n                   [:from\n                    {:opacity (:opacity-lower OPACITIES)}]\n                   [:to\n                    {:opacity (:opacity-med OPACITIES)}])\n\n\n(def drop-area-indicator\n  {:display \"block\"\n   :height \"1px\"\n   :margin-bottom \"-1px\"\n   :color (color :body-text-color :opacity-low)\n   :position \"relative\"\n   :transform-origin \"left\"\n   :z-index 3\n   :width \"100%\"\n   ;;:animation \"drop-area-appear .5s ease\"\n   ::stylefy/manual [[:&:after {:position \"absolute\"\n                                :content \"''\"\n                                :top \"-0.5px\"\n                                :right \"0\"\n                                :bottom \"-0.5px\"\n                                :left \"0\"\n                                :border-radius \"100px\"\n                                ;;:animation \"drop-area-color-pulse 1s ease infinite alternate\"\n                                :background \"currentColor\"}]]})\n\n\n(def block-content-style\n  {:position \"relative\"\n   :overflow \"visible\"\n   :flex-grow \"1\"\n   :word-break \"break-word\"\n   ::stylefy/manual [[:textarea {:display \"none\"}]\n                     [:&:hover [:textarea {:display \"block\"\n                                           :z-index 1}]]\n                     [:textarea {:-webkit-appearance \"none\"\n                                 :cursor \"text\"\n                                 :resize \"none\"\n                                 :transform \"translate3d(0,0,0)\"\n                                 :color \"inherit\"\n                                 :padding \"0\"\n                                 :background (color :background-minus-1)\n                                 :position \"absolute\"\n                                 :top \"0\"\n                                 :left \"0\"\n                                 :right \"0\"\n                                 :width \"100%\"\n                                 :min-height \"100%\"\n                                 :caret-color (color :link-color)\n                                 :margin \"0\"\n                                 :font-size \"inherit\"\n                                 :line-height \"inherit\"\n                                 :border-radius \"4px\"\n                                 :transition \"opacity 0.15s ease\"\n                                 :box-shadow (str \"-4px 0 0 0\" (color :background-minus-1))\n                                 :border \"0\"\n                                 :opacity \"0\"\n                                 :font-family \"inherit\"}]\n                     [:textarea:focus\n                      :.is-editing {:outline \"none\"\n                                    :z-index 3\n                                    :display \"block\"\n                                    :opacity \"1\"}]\n                     [:span [:span\n                             :a {:position \"relative\"\n                                 :z-index 2}]]]})\n\n\n(stylefy/keyframes \"tooltip-appear\"\n                   [:from\n                    {:opacity \"0\"\n                     :transform \"scale(0)\"}]\n                   [:to\n                    {:opacity \"1\"\n                     :transform \"scale(1)\"}])\n\n\n(def tooltip-style\n  {:z-index    4\n   :position \"absolute\"\n   :box-shadow [[(:64 DEPTH-SHADOWS) \", 0 0 0 1px \" (color :body-text-color :opacity-lower)]]\n   :flex-direction \"column\"\n   :background-color (color :background-plus-1)\n   :padding \"8px 12px\"\n   :border-radius \"4px\"\n   :line-height \"24px\"\n   :left \"8px\"\n   :top \"32px\"\n   :transform-origin \"8px 24px\"\n   :min-width \"150px\"\n   :animation \"tooltip-appear .2s ease\"\n   :transition \"background .1s ease\"\n   :display \"table\"\n   :color (color :body-text-color :opacity-high)\n   :border-spacing \"4px\"\n   ::stylefy/manual [[:div {:display \"table-row\"}]\n                     [:b {:display \"table-cell\"\n                          :user-select \"none\"\n                          :text-align \"right\"\n                          :text-transform \"uppercase\"\n                          :font-size \"12px\"\n                          :letter-spacing \"0.1em\"\n                          :opacity (:opacity-med OPACITIES)}]\n                     [:span {:display \"table-cell\"\n                             :user-select \"all\"}\n                      [:&:hover {:color (color :header-text-color)}]]\n                     [:&:after {:content \"''\"\n                                :position \"absolute\"\n                                :top \"-12px\"\n                                :bottom \"-16px\"\n                                :border-radius \"inherit\"\n                                :left \"-16px\"\n                                :right \"-16px\"\n                                :z-index -1\n                                :display \"block\"}]]})\n\n\n(def dragging-style\n  {:background-color \"lightblue\"})\n\n\n;; Helpers\n\n(defn on-change\n  [value uid]\n  ;; (prn \"ONCHANGE\" value)\n  (dispatch [:transact [{:db/id [:block/uid uid] :block/string value :edit/time (now-ts)}]]))\n\n\n(def db-on-change (debounce on-change 1000))\n\n\n(defn toggle\n  [id open]\n  (dispatch [:transact [[:db/add id :block/open (not open)]]]))\n\n\n;;; Components\n\n(defn toggle-el\n  [{:block/keys [open uid children]}]\n  (if (seq children)\n    [:button (use-style block-disclosure-toggle-style\n                        {:class    (if open \"open\" \"closed\")\n                         :on-click #(toggle [:block/uid uid] open)})\n     [:> mui-icons/KeyboardArrowDown {:style {:font-size \"16px\"}}]]\n    [:span (use-style block-disclosure-toggle-style)]))\n\n\n;; FIXME: fix flicker from on-mouse-enter on-mouse-leave\n(defn tooltip-el\n  [{:block/keys [uid order] dbid :db/id edit-time :edit/time} state]\n  (let [{:keys [dragging tooltip]} @state]\n    (when (and tooltip (not dragging))\n      [:div (use-style tooltip-style\n                       {:class          \"tooltip\"\n                        :on-mouse-leave #(swap! state assoc :tooltip false)})\n       [:div [:b \"db/id\"] [:span dbid]]\n       [:div [:b \"uid\"] [:span uid]]\n       [:div [:b \"order\"] [:span order]]\n       [:div [:b \"last edit\"] [:span (date-string edit-time)]]])))\n\n\n(defn bullet-el\n  [{:block/keys [uid children open]} state]\n  [:span (merge (use-style bullet-style\n                           {:class         [(when (and (seq children) (not open))\n                                              \"closed-with-children\")]\n                            :draggable     true\n                            :on-mouse-over #(swap! state assoc :tooltip true)\n                            :on-mouse-out  (fn [e]\n                                             (let [related (.. e -relatedTarget)]\n                                               (when-not (and related (contains related \"tooltip\"))\n                                                 (swap! state assoc :tooltip false))))\n                            :on-drag-end   (fn [_] (swap! state assoc :dragging false))\n                            :on-drag-start (fn [e]\n                                             (.. e stopPropagation)\n                                             (set! (.. e -dataTransfer -effectAllowed) \"move\")\n                                    ;;(prn \"UID\" uid)\n                                             (.. e -dataTransfer (setData \"text/plain\" uid))\n                                             (swap! state assoc :dragging true))}))])\n\n\n;; Actual string contents - two elements, one for reading and one for writing\n;; seems hacky, but so far no better way to click into the correct position with one conditional element\n(defn block-content-el\n  [block state is-editing]\n  (let [{:block/keys [string uid children]} block]\n    [:div (use-style block-content-style\n                     {:class         \"block-content\"\n                      :on-click      (fn [_] (dispatch [:editing/uid uid]))\n                      :on-drag-enter (fn [e]\n                                       (.. e stopPropagation)\n                                       (swap! state assoc :drag-target :child))\n                      :on-drag-over  (fn [e]\n                                       (.. e preventDefault)\n                                       (.. e stopPropagation)\n                                       false)\n                      :on-drag-leave (fn [e]\n                                       (.. e stopPropagation)\n                                       (let [related-container (getAncestorByClass (.. e -relatedTarget) \"block-container\")\n                                             source-container  (getAncestorByClass (.. e -target) \"block-container\")]\n                                         (cond\n                                           (= related-container source-container) nil\n                                           :else (swap! state assoc :drag-target nil))))\n                      :on-drop       (fn [e]\n                                       (let [source-uid      (.. e -dataTransfer (getData \"text/plain\"))\n                                             parent-dragging (getAncestorByClass (.. e -target) \"dragging\")]\n                                         (.. e preventDefault)\n                                         (.. e stopPropagation)\n                                         (swap! state assoc :dragging false)\n                                         (swap! state assoc :drag-target nil)\n                                         (when (and (nil? parent-dragging) (not= source-uid uid))\n                                           (dispatch [:drop-bullet source-uid uid :child]))))})\n\n     [autosize/textarea {:value       (:atom-string @state)\n                         :class       [(when is-editing \"is-editing\") \"textarea\"]\n                         :auto-focus  true\n                         :id          (str \"editable-uid-\" uid)\n                         ;; never actually use on change. rather, use :string-listener to update datascript. necessary to make react happy\n                         :on-change   (fn [_])\n                         :on-key-down (fn [e]\n                                        (block-key-down e uid state))}]\n     [parse-and-render string]\n     ;; don't show drop indicator when dragging to its children\n     (when (and (empty? children) (not (:dragging @state)))\n       [:div.drag-n-drop (use-style (merge {:height \"2px\"}\n                                           (when (= (:drag-target @state) :child) {:background-color \"red\"})))])]))\n\n;; flipped around\n\n(def inline-selected-search-option\n  {:background-color (color :link-color)\n   :color            (color :app-bg-color)})\n\n\n(defn page-search-el\n  [_block state]\n  (let [{:search/keys [page block query results index]} @state]\n    (when (or block page)\n      [dropdown {:style   {:position \"absolute\"\n                           :top      \"100%\"\n                           :left     \"-0.125em\"}\n                 :content (if (clojure.string/blank? query)\n                            [:div \"Start Typing!\"]\n                            (doall\n                              [:<>\n                               (for [[i {:keys [node/title block/string block/uid]}] (map-indexed list results)]\n                                 ^{:key (str \"inline-search-item\" uid)}\n                                 [:div (use-style\n                                         (merge {} (when (= index i) inline-selected-search-option))\n                                         {:on-click #(prn \"expand\")})\n                                  (or title string)])]))}])))\n\n\n;;TODO: more clarity on open? and closed? predicates, why we use `cond` in one case and `if` in another case)\n(defn block-el\n  \"Two checks to make sure block is open or not: children exist and :block/open bool\"\n  [block]\n  (let [state (r/atom {:atom-string (:block/string block)\n                       :slash? false\n                       :search/page false\n                       :search/query nil\n                       :search/block false\n                       :search/index 0\n                       :dragging false\n                       :drag-target nil\n                       :edit/time (:edit/time block)})]\n    (add-watch state :string-listener\n               (fn [_context _atom old new]\n                 (let [{:keys [atom-string]} new]\n                   (when (not= (:atom-string old) atom-string)\n                     (db-on-change atom-string (:block/uid block))))))\n\n    (fn [block]\n      (let [{:block/keys [uid string open children order] edit-time :edit/time} block\n            {dragging :dragging drag-target :drag-target state-edit-time :edit/time} @state\n            parent (db/get-parent [:block/uid uid])\n            last-child? (= order (dec (count (:block/children parent))))\n            editing-uid @(subscribe [:editing/uid])\n            is-editing (= (:block/uid block) editing-uid)]\n\n        ;;(prn uid state-edit-time edit-time)\n\n        ;; if block is updated in datascript, update local block state\n        (when (< state-edit-time edit-time)\n          (let [new-state {:edit/time edit-time :atom-string string}]\n            (swap! state merge new-state)))\n\n\n        [:<>\n\n         ;; should be (when dragging-global) but this causes react to void the original component, preventing on-drag-end from firing\n         ;; need surface to drag over. probably a better way to do this\n         ;; FIXME drop-area-indicator styles no longer work because using a div now and document structure has changed\n         (when true\n           [:div.drag-n-drop (use-style (merge {:height \"2px\"}\n                                               (when (= drag-target :container) {:background-color \"blue\"})))])\n\n         [:div.block-container\n          (use-style (merge block-style (when dragging dragging-style))\n            ;; TODO: is it possible to make this show-tree-indicator a mergable -style map like above?\n                     {:class         [(when dragging \"dragging\")\n                                      (when (and (seq children) open) \"show-tree-indicator\")]\n                      :on-drag-enter (fn [e]\n                                       (.. e stopPropagation)\n                                       (swap! state assoc :drag-target :container))\n                      :on-drag-over  (fn [e]\n                                       (.. e preventDefault)\n                                       (.. e stopPropagation)\n                                       false)\n                      :on-drag-leave (fn [e]\n                                       (let [related-container (getAncestorByClass (.. e -relatedTarget) \"block-container\")\n                                             source-container  (getAncestorByClass (.. e -target) \"block-container\")]\n                                         (when-not (= related-container source-container)\n                                           (swap! state assoc :drag-target nil))))\n                      :on-drop       (fn [e]\n                                       (let [source-uid      (.. e -dataTransfer (getData \"text/plain\"))\n                                             parent-dragging (getAncestorByClass (.. e -target) \"dragging\")]\n                                         (.. e preventDefault)\n                                         (.. e stopPropagation)\n                                         (swap! state assoc :dragging false)\n                                         (swap! state assoc :drag-target nil)\n                                         (when (and (nil? parent-dragging) (not= source-uid uid))\n                                           (dispatch [:drop-bullet source-uid uid :sibling]))))})\n\n          [:div {:style {:display \"flex\"}}\n           [toggle-el block]\n           [bullet-el block state]\n           [tooltip-el block state]\n           [block-content-el block state is-editing]]\n\n          (when (:slash? @state)\n            [slash-menu-component {:style {:position \"absolute\" :top \"100%\" :left \"-0.125em\"}}])\n          [page-search-el block state]\n\n          ;; Children\n          ;; if last element and no children, allow drop\n          (when (and open (seq children))\n            (for [child children]\n              [:div {:style {:margin-left \"32px\"} :key (:db/id child)}\n               [block-el child]]))]\n\n         (when last-child?\n           [:div.drag-n-drop (use-style (merge {:height \"2px\"}\n                                               (when (= drag-target :container) {:background-color \"green\"})))])]))))\n\n\n(defn block-component\n  [ident]\n  (let [block (db/get-block-document ident)]\n    [block-el block]))\n"]}