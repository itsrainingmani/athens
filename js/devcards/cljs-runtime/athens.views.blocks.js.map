{"version":3,"sources":["athens/views/blocks.cljs"],"mappings":"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","names":["athens.views.blocks/block-container-style","athens.style.color.cljs$core$IFn$_invoke$arity$1","athens.style.color.cljs$core$IFn$_invoke$arity$2","garden.selectors._GT_.cljs$core$IFn$_invoke$arity$2","stylefy.core/class","athens.views.blocks/block-disclosure-toggle-style","athens.views.blocks/bullet-style","G__58419","garden.selectors/&","garden.selectors/after","athens.style/OPACITIES","G__58420","garden.selectors/before","stylefy.core.keyframes.cljs$core$IFn$_invoke$arity$variadic","athens.views.blocks/drop-area-indicator","athens.views.blocks/block-content-style","G__58421","G__58422","garden.selectors/not","garden.selectors/attr=","athens.views.blocks/tooltip-style","athens.style/ZINDICES","athens.style/DEPTH-SHADOWS","athens.views.blocks/dragging-style","athens.views.blocks/walk-parse-tree-for-links","source-str","link-fn","db-fn","G__58423","G__58424","instaparse.core/transform","title","inner-title","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/+","now","athens.util/now-ts","uid","athens.util/gen-block-uid","athens.parser/parse-to-ast","athens.views.blocks/on-change","oldvalue","value","G__58425","re-frame.core/dispatch","athens.db/search-exact-node-title","now-time","G__58426","block","athens.db/get-block-document","athens.db/count-linked-references-excl-uid","_","cljs.core/deref","athens.parse-renderer/pull-node-from-string","G__58427","athens.views.blocks/db-on-change","goog.functions/debounce","athens.views.blocks/toggle","id","open","G__58428","cljs.core/not","p__58429","map__58430","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","athens.views.blocks/toggle-el","children","cljs.core/seq","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$2","js/module$node_modules$$material_ui$icons$index.KeyboardArrowDown","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$1","p__58432","map__58433","athens.views.blocks/tooltip-el","order","dbid","edit-time","state","map__58435","dragging","tooltip","and__4174__auto__","e","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","athens.util/date-string","athens.views.blocks/inline-search-el","map__58437","query","results","index","type","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","athens.views.dropdown/dropdown-style","clojure.string/blank?","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","athens.views.dropdown/menu-style","iter__4582__auto__","s__58440","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__58442","cljs.core/chunk-buffer","i__58441","vec__58443","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","map__58446","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__58439","cljs.core/chunk-rest","vec__58448","cljs.core/first","map__58451","cljs.core/cons","cljs.core/rest","i","string","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","cljs.core/list","athens.views.buttons/button","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","or__4185__auto__","athens.views.blocks/slash-menu-el","map__58453","s__58456","b__58458","i__58457","vec__58459","vec__58462","iter__58455","vec__58465","vec__58468","icon","text","_expansion","kbd","athens.keybindings/slash-options","athens.keybindings/select-slash-cmd","reagent.core/adapt-react-class","athens.views.blocks/block-content-el","is-editing","map__58472","G__58474","komponentit.autosize/textarea","athens.keybindings/block-key-down","vec__58475","target","node-page","source-uid","G__58478","re-frame.core/subscribe","target-block","blocks","cljs.core/vec","cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1","start","end","cljs.core.keep_indexed.cljs$core$IFn$_invoke$arity$2","el","cljs.core.sort.cljs$core$IFn$_invoke$arity$1","selected-blocks","cljs.core.subvec.cljs$core$IFn$_invoke$arity$3","selected-uids","p1__58471#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","G__58479","goog.events/listen","js/window","goog.events.EventType/MOUSEOVER","athens.listeners/multi-block-select-over","goog.events.EventType/MOUSEUP","athens.listeners/multi-block-select-up","athens.parse-renderer/parse-and-render","athens.views.blocks/bullet-el","p__58480","map__58481","related","goog.dom.classlist/contains","athens.views.blocks/block-el","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/add-watch","_context","_atom","old","new","map__58483","atom-string","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","G__58485","G__58486","G__58487","map__58488","map__58489","drag-target","state-edit-time","G__58492","is-selected","G__58493","new-state","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","offset","athens.util/mouse-offset","middle-y","athens.util/vertical-center","closest-container","next-sibling","last-child?","dragging-ancestor","not-dragging?","cljs.core/empty?","G__58494","G__58495","s__58497","b__58499","i__58498","iter__58496","child","athens.views.blocks/block-component","ident","cljs.core/chunk-first"],"sourcesContent":["(ns athens.views.blocks\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.db :as db :refer [count-linked-references-excl-uid]]\n    [athens.keybindings :refer [block-key-down]]\n    [athens.listeners :refer [multi-block-select-over multi-block-select-up]]\n    [athens.parse-renderer :refer [parse-and-render pull-node-from-string]]\n    [athens.parser :as parser]\n    [athens.style :refer [color DEPTH-SHADOWS OPACITIES ZINDICES]]\n    [athens.util :refer [now-ts gen-block-uid mouse-offset vertical-center date-string]]\n    [athens.views.buttons :refer [button]]\n    [athens.views.dropdown :refer [menu-style dropdown-style]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [garden.selectors :as selectors]\n    [goog.dom.classlist :refer [contains]]\n    [goog.events :as events]\n    [goog.functions :refer [debounce]]\n    [instaparse.core :as parse]\n    [komponentit.autosize :as autosize]\n    [re-frame.core :refer [dispatch subscribe]]\n    [reagent.core :as r]\n    [stylefy.core :as stylefy :refer [use-style]])\n  (:import\n    (goog.events\n      EventType)))\n\n;;; Styles\n;;; \n;;; Blocks use Em units in many places rather than Rem units because\n;;; blocks need to scale with their container: sidebar blocks are\n;;; smaller than main content blocks, for instance.\n\n\n(def block-container-style\n  {:display \"flex\"\n   :line-height \"2em\"\n   :position \"relative\"\n   :border-radius \"0.125rem\"\n   :justify-content \"flex-start\"\n   :flex-direction \"column\"\n   ::stylefy/manual [[:&.show-tree-indicator:before {:content \"''\"\n                                                     :position \"absolute\"\n                                                     :width \"1px\"\n                                                     :left \"calc(1.25em + 1px)\"\n                                                     :top \"2em\"\n                                                     :bottom \"0\"\n                                                     :transform \"translateX(50%)\"\n                                                     :background (color :border-color)}]\n                     [:&:after {:content \"''\"\n                                :z-index -1\n                                :position \"absolute\"\n                                :top \"0.75px\"\n                                :right 0\n                                :bottom \"0.75px\"\n                                :left 0\n                                :opacity 0\n                                :pointer-events \"none\"\n                                :border-radius \"0.25rem\"\n                                :transition \"opacity 0.075s ease\"\n                                :background (color :link-color :opacity-lower)\n                                :box-shadow [[\"0 0.25rem 0.5rem -0.25rem\" (color :background-color :opacity-med)]]}]\n                     [:&.is-selected:after {:opacity 1}]\n                     [:.block-body {:display \"flex\"\n                                    :border-radius \"0.5rem\"\n                                    :transition \"all 0.1s ease\"\n                                    :position \"relative\"}\n                      [:button.block-edit-toggle {:position \"absolute\"\n                                                  :appearance \"none\"\n                                                  :width \"100%\"\n                                                  :background \"none\"\n                                                  :border 0\n                                                  :cursor \"text\"\n                                                  :display \"block\"\n                                                  :z-index 1\n                                                  :top 0\n                                                  :right 0\n                                                  :bottom 0\n                                                  :left 0}]\n                      [:&:hover {:background (color :background-minus-1)}]]\n                     ;; Darken block body when block editing, \n                     [(selectors/> :.is-editing :.block-body) {:background (color :background-minus-1)}]\n                     ;; Inset child blocks\n                     [:.block-container {:margin-left \"2rem\"}]]})\n\n\n(stylefy/class \"block-container\" block-container-style)\n\n\n(def block-disclosure-toggle-style\n  {:width \"1em\"\n   :height \"2em\"\n   :position \"relative\"\n   :z-index 2\n   :flex-shrink \"0\"\n   :display \"flex\"\n   :background \"none\"\n   :border \"none\"\n   :transition \"all 0.05s ease\"\n   :align-items \"center\"\n   :justify-content \"center\"\n   :padding \"0\"\n   :-webkit-appearance \"none\"\n   :color (color :body-text-color 0.4)\n   ::stylefy/mode [[:hover {:color (color :link-color)}]\n                   [\":is(button)\" {:cursor \"pointer\"}]]\n   ::stylefy/manual [[:&.closed [:svg {:transform \"rotate(-90deg)\"}]]\n                     [:&:empty {:pointer-events \"none\"}]]})\n\n\n(def bullet-style\n  {:flex-shrink \"0\"\n   :position \"relative\"\n   :z-index 2\n   :cursor \"pointer\"\n   :width \"0.75em\"\n   :margin-right \"0.25em\"\n   :transition \"all 0.05s ease\"\n   :height \"2em\"\n   :color (color :body-text-color :opacity-low)\n   ::stylefy/mode [[:after {:content \"''\"\n                            :background \"currentColor\"\n                            :transition \"all 0.05s ease\"\n                            :border-radius \"100px\"\n                            :box-shadow \"0 0 0 0.125rem transparent\"\n                            :display \"inline-flex\"\n                            :margin \"50% 0 0 50%\"\n                            :transform \"translate(-50%, -50%)\"\n                            :height \"0.3125em\"\n                            :width \"0.3125em\"}]\n                   [:hover {:color (color :link-color)}]]\n   ::stylefy/manual [[:&.closed-with-children [(selectors/& (selectors/after)) {:box-shadow (str \"0 0 0 0.125rem \" (color :body-text-color))\n                                                                                :opacity (:opacity-med OPACITIES)}]]\n                     [:&.closed-with-children [(selectors/& (selectors/before)) {:content \"none\"}]]\n                     [:&:hover:after {:transform \"translate(-50%, -50%) scale(1.3)\"}]\n                     [:&.dragging {:z-index 1\n                                   :cursor \"grabbing\"\n                                   :color (color :body-text-color)}]]})\n\n\n(stylefy/keyframes \"drop-area-appear\"\n                   [:from\n                    {:opacity \"0\"}]\n                   [:to\n                    {:opacity \"1\"}])\n\n\n(stylefy/keyframes \"drop-area-color-pulse\"\n                   [:from\n                    {:opacity (:opacity-lower OPACITIES)}]\n                   [:to\n                    {:opacity (:opacity-med OPACITIES)}])\n\n\n(def drop-area-indicator\n  {:display \"block\"\n   :height \"1px\"\n   :margin-bottom \"-1px\"\n   :color (color :link-color :opacity-high)\n   :position \"relative\"\n   :transform-origin \"left\"\n   :z-index 3\n   :width \"100%\"\n   :opacity 0\n   ::stylefy/manual [[:&:after {:position \"absolute\"\n                                :content \"''\"\n                                :top \"-0.5px\"\n                                :right \"0\"\n                                :bottom \"-0.5px\"\n                                :left \"2em\"\n                                :border-radius \"100px\"\n                                :background \"currentColor\"}]]})\n\n\n(def block-content-style\n  {:position \"relative\"\n   :overflow \"visible\"\n   :z-index 2\n   :flex-grow \"1\"\n   :word-break \"break-word\"\n   ::stylefy/manual [[:textarea {:display \"none\"}]\n                     [:&:hover [:textarea [(selectors/& (selectors/not :.is-editing)) {:display \"block\"\n                                                                                       :z-index 1}]]]\n                     [:textarea {:-webkit-appearance \"none\"\n                                 :cursor \"text\"\n                                 :resize \"none\"\n                                 :transform \"translate3d(0,0,0)\"\n                                 :color \"inherit\"\n                                 :padding \"0\"\n                                 :background (color :background-minus-1)\n                                 :position \"absolute\"\n                                 :top \"0\"\n                                 :left \"0\"\n                                 :right \"0\"\n                                 :width \"100%\"\n                                 :min-height \"100%\"\n                                 :caret-color (color :link-color)\n                                 :margin \"0\"\n                                 :font-size \"inherit\"\n                                 :line-height \"inherit\"\n                                 :border-radius \"0.25rem\"\n                                 :transition \"opacity 0.15s ease\"\n                                 :box-shadow (str \"-0.25rem 0 0 0\" (color :background-minus-1))\n                                 :border \"0\"\n                                 :opacity \"0\"\n                                 :font-family \"inherit\"}]\n                     [:.is-editing {:outline \"none\"\n                                    :z-index 3\n                                    :display \"block\"\n                                    :opacity \"1\"}]\n                     [:span [:span\n                             :a {:position \"relative\"\n                                 :z-index 2}]]\n                     ;; May want to refactor specific component styles to somewhere else.\n                     ;; Closer to the component perhaps?\n                     ;; Code\n                     [:code :pre {:font-family \"IBM Plex Mono\"}]\n                     ;; Media Containers\n                     ;; Using a CSS hack/convention here to create a responsive container\n                     ;; of a specific aspect ratio.\n                     ;; TODO: Replace this with the CSS aspect-ratio property once available.\n                     [:.media-16-9 {:height 0\n                                    :width \"calc(100% - 0.25rem)\"\n                                    :z-index 1\n                                    :transform-origin \"right center\"\n                                    :transition \"all 0.2s ease\"\n                                    :padding-bottom (str (* (/ 9 16) 100) \"%\")\n                                    :margin-block \"0.25rem\"\n                                    :margin-inline-end \"0.25rem\"\n                                    :position \"relative\"}]\n                     ;; Media (YouTube embeds, map embeds, etc.)\n                     [:iframe {:border 0\n                               :box-shadow [[\"inset 0 0 0 0.125rem\" (color :background-minus-1)]]\n                               :position \"absolute\"\n                               :height \"100%\"\n                               :width \"100%\"\n                               :cursor \"default\"\n                               :top 0\n                               :right 0\n                               :left 0\n                               :bottom 0\n                               :border-radius \"0.25rem\"}]\n                     ;; Images\n                     [:img {:border-radius \"0.25rem\"\n                            :max-width \"calc(100% - 0.25rem)\"}]\n                     ;; Checkboxes\n                     ;; TODO: Refactor these complicated styles into clip paths or SVGs\n                     ;; or something nicer than this\n                     [:input [:& (selectors/attr= :type :checkbox) {:appearance \"none\"\n                                                                    :border-radius \"0.25rem\"\n                                                                    :cursor \"pointer\"\n                                                                    :color (color :link-color)\n                                                                    :margin-inline-end \"0.25rem\"\n                                                                    :position \"relative\"\n                                                                    :top \"0.13em\"\n                                                                    :width \"1rem\"\n                                                                    :height \"1rem\"\n                                                                    :transition \"all 0.05s ease\"\n                                                                    :transform \"scale(1)\"\n                                                                    :box-shadow \"inset 0 0 0 1px\"}\n                              [:&:after {:content \"''\"\n                                         :position \"absolute\"\n                                         :top \"45%\" ;; How are the top and left values calculated?\n                                         :left \"20%\" ;;\n                                         :width \"30%\"\n                                         :height \"60%\"\n                                         :border-width \"0 1.5px 1.5px 0\"\n                                         :border-style \"solid\"\n                                         :opacity 0\n                                         :transform \"rotate(45deg) translate(-40%, -50%)\"}]\n                              [:&:checked {:background (color :link-color)}\n                               [:&:after {:opacity 1\n                                          :color (color :background-color)}]]\n                              [:&:active {:transform \"scale(0.9)\"}]]]]})\n\n\n(stylefy/class \"block-content\" block-content-style)\n\n\n(stylefy/keyframes \"tooltip-appear\"\n                   [:from\n                    {:opacity \"0\"\n                     :transform \"scale(0)\"}]\n                   [:to\n                    {:opacity \"1\"\n                     :transform \"scale(1)\"}])\n\n\n(def tooltip-style\n  {:z-index (:zindex-dropdown ZINDICES)\n   :position \"absolute\"\n   :box-shadow [[(:64 DEPTH-SHADOWS) \", 0 0 0 1px \" (color :body-text-color :opacity-lower)]]\n   :flex-direction \"column\"\n   :background-color (color :background-plus-1)\n   :padding \"0.5rem 0.75rem\"\n   :border-radius \"0.25rem\"\n   :line-height \"1.75rem\"\n   :left \"0.5rem\"\n   :top \"2rem\"\n   :transform-origin \"0.5rem 1.5rem\"\n   :min-width \"9rem\"\n   :animation \"tooltip-appear .2s ease\"\n   :transition \"background .1s ease\"\n   :display \"table\"\n   :color (color :body-text-color :opacity-high)\n   :border-spacing \"0.25rem\"\n   ::stylefy/manual [[:div {:display \"table-row\"}]\n                     [:b {:display \"table-cell\"\n                          :user-select \"none\"\n                          :text-align \"right\"\n                          :text-transform \"uppercase\"\n                          :font-size \"12px\"\n                          :letter-spacing \"0.1em\"\n                          :opacity (:opacity-med OPACITIES)}]\n                     [:span {:display \"table-cell\"\n                             :user-select \"all\"}\n                      [:&:hover {:color (color :header-text-color)}]]\n                     [:&:after {:content \"''\"\n                                :position \"absolute\"\n                                :top \"-0.75rem\"\n                                :bottom \"-1rem\"\n                                :border-radius \"inherit\"\n                                :left \"-1rem\"\n                                :right \"-1rem\"\n                                :z-index -1\n                                :display \"block\"}]]})\n\n\n(def dragging-style\n  {:opacity \"0.25\"})\n\n\n(stylefy/class \"dragging\" dragging-style)\n\n;; Helpers\n\n\n(defn walk-parse-tree-for-links\n  [source-str link-fn db-fn]\n  (parse/transform {:page-link (fn [& title]\n                                 (let [inner-title (apply + title)]\n                                   ;; `apply +` can return 0 if `title` is nil or empty string\n                                   (when (and (string? inner-title)\n                                              (link-fn inner-title))\n                                     (let [now (now-ts)\n                                           uid (gen-block-uid)]\n                                       (db-fn inner-title now uid)))\n                                   (str \"[[\" inner-title \"]]\")))\n                    :hashtag   (fn [& title]\n                                 (let [inner-title (apply + title)]\n                                   (when (and (string? inner-title)\n                                              (link-fn inner-title))\n                                     (let [now (now-ts)\n                                           uid (gen-block-uid)]\n                                       (db-fn inner-title now uid)))\n                                   (str \"#\" inner-title)))} (parser/parse-to-ast source-str)))\n\n\n(defn on-change\n  [oldvalue value uid]\n  ;; (prn \"ONCHANGE\" value)\n  ;; TODO: move this to somewhere more comfortable using reframe dispatch\n  (dispatch [:transact [{:db/id [:block/uid uid] :block/string value :edit/time (now-ts)}]])\n  (walk-parse-tree-for-links\n    value\n    (fn [inner-title]              (nil? (db/search-exact-node-title inner-title)))\n    (fn [inner-title now-time uid]\n      (dispatch [:transact [{:node/title  inner-title\n                             :block/uid   uid\n                             :edit/time   now-time\n                             :create/time now-time}]])))\n  (walk-parse-tree-for-links\n    oldvalue\n    (fn [inner-title]\n      (let [block (db/search-exact-node-title inner-title)]\n        (and (not (nil? block))\n             (nil? (:block/children (db/get-block-document (:db/id block))))\n             (zero? (count-linked-references-excl-uid inner-title uid)))))\n    (fn [inner-title _ _]\n      (let [uid (:block/uid @(pull-node-from-string inner-title))]\n        (when (some? uid) (dispatch [:page/delete uid]))))))\n\n\n(def db-on-change (debounce on-change 1000))\n\n\n(defn toggle\n  [id open]\n  (dispatch [:transact [[:db/add id :block/open (not open)]]]))\n\n\n;;; Components\n\n(defn toggle-el\n  [{:block/keys [open uid children]}]\n  (if (seq children)\n    [:button (use-style block-disclosure-toggle-style\n                        {:class    (if open \"open\" \"closed\")\n                         :on-click #(toggle [:block/uid uid] open)})\n     [:> mui-icons/KeyboardArrowDown {:style {:font-size \"16px\"}}]]\n    [:span (use-style block-disclosure-toggle-style)]))\n\n\n;; FIXME: fix flicker from on-mouse-enter on-mouse-leave\n(defn tooltip-el\n  [{:block/keys [uid order] dbid :db/id edit-time :edit/time} state]\n  (let [{:keys [dragging tooltip]} @state]\n    (when (and tooltip (not dragging))\n      [:div (use-style tooltip-style\n                       {:class          \"tooltip\"\n                        :on-click (fn [e] (.. e stopPropagation))\n                        :on-mouse-leave #(swap! state assoc :tooltip false)})\n       [:div [:b \"db/id\"] [:span dbid]]\n       [:div [:b \"uid\"] [:span uid]]\n       [:div [:b \"order\"] [:span order]]\n       [:div [:b \"last edit\"] [:span (date-string edit-time)]]])))\n\n\n(defn inline-search-el\n  [state]\n  (let [{:search/keys [query results index type]} @state]\n    [:div (merge (use-style dropdown-style)\n                 {:style {:position   \"absolute\"\n                          :top        \"100%\"\n                          :max-height \"20rem\"\n                          :left       \"1.75em\"}})\n     (if (clojure.string/blank? query)\n       [:div (str \"Search for a \" (symbol type))]\n       (doall\n         [:div (use-style menu-style {:id \"dropdown-menu\"})\n          (for [[i {:keys [node/title block/string block/uid]}] (map-indexed list results)]\n            ^{:key (str \"inline-search-item\" uid)}\n            ;; todo: implement expand\n            [button {:on-click #(prn \"expand\")\n                     :active   (= index i)\n                     :id       (str \"result-\" i)}\n             (or title string)])]))]))\n\n\n(defn slash-menu-el\n  [state]\n  (let [{index :search/index} @state]\n    [:div (merge (use-style dropdown-style) {:style {:position \"absolute\" :top \"100%\" :left \"-0.125em\"}})\n     [:div#slash-menu-container (merge (use-style menu-style) {:style {:max-height \"8em\"}})\n      (for [[i [icon text _expansion kbd]] (map-indexed list athens.keybindings/slash-options)]\n        [button {:active   (= i index)\n                 :key      text\n                 :on-click #(athens.keybindings/select-slash-cmd i state)}\n         [:<> [(r/adapt-react-class icon)] [:span text] (when kbd [:kbd kbd])]])]]))\n\n\n;; Actual string contents - two elements, one for reading and one for writing\n;; seems hacky, but so far no better way to click into the correct position with one conditional element\n(defn block-content-el\n  [_ _ _]\n  (fn [block state is-editing]\n    (let [{:block/keys [string uid]} block]\n      [:div {:class \"block-content\"\n             :on-click (fn [e]\n                         (when (false? (.. e -shiftKey))\n                           (dispatch [:editing/uid uid])))}\n       [autosize/textarea {:value         (:atom-string @state)\n                           :class         [(when is-editing \"is-editing\") \"textarea\"]\n                           :auto-focus    true\n                           :id            (str \"editable-uid-\" uid)\n                           ;; never actually use on-change. rather, use :string-listener to update datascript. necessary to make react happy\n                           :on-change     (fn [_])\n                           :on-key-down   (fn [e] (block-key-down e uid state))\n                           :on-mouse-down (fn [e]\n                                            (if (.. e -shiftKey)\n                                              (let [target          (.. e -target)\n                                                    ;; TODO: implement for block-page\n                                                    node-page       (.. target (closest \".node-page\"))\n                                                    source-uid      @(subscribe [:editing/uid])\n                                                    target-block    (.. target (closest \".block-container\"))\n                                                    blocks          (vec (array-seq (.. node-page (querySelectorAll \".block-container\"))))\n                                                    [start end] (-> (keep-indexed (fn [i el]\n                                                                                    (when (or (= el target-block)\n                                                                                              (= source-uid (.. el -dataset -uid)))\n                                                                                      i))\n                                                                                  blocks)\n                                                                    sort)\n                                                    selected-blocks (subvec blocks start (inc end))\n                                                    selected-uids   (mapv #(.. % -dataset -uid) selected-blocks)]\n                                                (dispatch [:selected/add-items selected-uids]))\n                                              (do\n                                                (events/listen js/window EventType.MOUSEOVER multi-block-select-over)\n                                                (events/listen js/window EventType.MOUSEUP multi-block-select-up))))}]\n\n;;(dispatch [:selected/add-item uid]))}]\n       [parse-and-render string uid]\n       [:div (use-style (merge drop-area-indicator (when (= :child (:drag-target @state)) {:opacity 1})))]])))\n\n\n(defn bullet-el\n  [_ _]\n  (fn [{:block/keys [uid children open]} state]\n    [:span (use-style bullet-style\n                      {:class         [(when (and (seq children) (not open))\n                                         \"closed-with-children\")]\n                       :on-mouse-over #(swap! state assoc :tooltip true)\n                       :on-mouse-out  (fn [e]\n                                        (let [related (.. e -relatedTarget)]\n                                          (when-not (and related (contains related \"tooltip\"))\n                                            (swap! state assoc :tooltip false))))\n                       :draggable     true\n                       :on-drag-start (fn [e]\n                                        (set! (.. e -dataTransfer -effectAllowed) \"move\")\n                                        (.. e -dataTransfer (setData \"text/plain\" uid))\n                               ;;(dispatch [:dragging/uid uid])\n                                        (swap! state assoc :dragging true))\n                       :on-drag-end   (fn [_]\n                               ;; FIXME: not always called\n                                        (prn \"DRAG END BULLET\")\n                                        (swap! state assoc :dragging false))})]))\n\n\n;;TODO: more clarity on open? and closed? predicates, why we use `cond` in one case and `if` in another case)\n(defn block-el\n  \"Two checks to make sure block is open or not: children exist and :block/open bool\"\n  [block]\n  (let [state (r/atom {:atom-string (:block/string block)\n                       :old-string (:block/string block) ;; this is for detecting what's deleted to process page deletion\n                       :search/type nil ;; one of #{:page :block :slash}\n                       :search/query nil\n                       :search/index 0\n                       :dragging false\n                       :drag-target nil\n                       :edit/time (:edit/time block)})]\n    (add-watch state :string-listener\n               (fn [_context _atom old new]\n                 (let [{:keys [atom-string]} new]\n                   (when (not= (:atom-string old) atom-string)\n                     (db-on-change (:old-string old) atom-string (:block/uid block))))))\n\n    (fn [block]\n      (let [{:block/keys [uid string open children] edit-time :edit/time} block\n            {:search/keys [type] :keys [dragging drag-target] state-edit-time :edit/time} @state\n            is-editing @(subscribe [:editing/is-editing uid])\n            is-selected @(subscribe [:selected/is-selected uid])]\n\n        ;;(prn uid is-selected)\n\n        ;; if block is updated in datascript, update local block state\n        (when (< state-edit-time edit-time)\n          (let [new-state {:edit/time edit-time :atom-string string :old-string string}]\n            (swap! state merge new-state)))\n\n        [:div\n         {:class         [\"block-container\"\n                          (when dragging \"dragging\")\n                          (when is-editing \"is-editing\")\n                          (when is-selected \"is-selected\")\n                          ;; TODO: is it possible to make this show-tree-indicator a mergable -style map like above?\n                          (when (and (seq children) open) \"show-tree-indicator\")]\n          :data-uid      uid\n          :on-drag-over  (fn [e]\n                           (.. e preventDefault)\n                           (.. e stopPropagation)\n                           ;; if last block-container (i.e. no siblings), allow drop below\n                           ;; if block or ancestor has css dragging class, do not show drop indicator\n                           (let [offset            (mouse-offset e)\n                                 middle-y          (vertical-center (.. e -target))\n                                 closest-container (.. e -target (closest \".block-container\"))\n                                 next-sibling      (.. closest-container -nextElementSibling)\n                                 last-child?       (nil? next-sibling)\n                                 dragging-ancestor (.. e -target (closest \".dragging\"))\n                                 not-dragging?     (nil? dragging-ancestor)\n                                 target            (when not-dragging?\n                                                     (cond\n                                                       ;; if above midpoint, show drop indicator above block\n                                                       (< (:y offset) middle-y) :above\n                                                       ;; if no children and over 50 pixels from the left, show child drop indicator\n                                                       (and (empty? children) (< 50 (:x offset))) :child\n                                                       ;; if below midpoint and last child, show drop indicator below\n                                                       (and last-child? (< middle-y (:y offset))) :below))]\n                             (swap! state assoc :drag-target target)))\n          :on-drag-enter (fn [_])\n          :on-drag-leave (fn [_]\n                           (swap! state assoc :drag-target nil))\n          :on-drop       (fn [e]\n                           (.. e stopPropagation)\n                           (let [source-uid (.. e -dataTransfer (getData \"text/plain\"))]\n                             (cond\n                               (nil? drag-target) nil\n                               (= source-uid uid) nil)\n                             (dispatch [:drop-bullet source-uid uid drag-target])\n                             (swap! state assoc :drag-target nil)))}\n         [:div (use-style (merge drop-area-indicator (when (= drag-target :above) {:opacity \"1\"})))]\n\n         [:div.block-body\n          [:button.block-edit-toggle\n           {:on-click (fn [e]\n                        (when (false? (.. e -shiftKey))\n                          (dispatch [:editing/uid uid])))}]\n\n          [toggle-el block]\n          [bullet-el block state]\n          [tooltip-el block state]\n          [block-content-el block state is-editing]]\n\n         (cond\n           (or (= type :page) (= type :block)) [inline-search-el state]\n           (= type :slash) [slash-menu-el state])\n\n         ;; Children\n         (when (and open (seq children))\n           (for [child children]\n             [:div {:key (:db/id child)}\n              [block-el child]]))\n\n         [:div (use-style (merge drop-area-indicator (when (= drag-target :below) {:opacity \"1\"})))]]))))\n\n\n(defn block-component\n  [ident]\n  (let [block (db/get-block-document ident)]\n    [block-el block]))\n"]}