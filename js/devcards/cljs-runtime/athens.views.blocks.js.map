{"version":3,"sources":["athens/views/blocks.cljs"],"mappings":"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","names":["athens.views.blocks/block-container-style","athens.style.color","garden.selectors._GT_","stylefy.core/class","athens.views.blocks/block-disclosure-toggle-style","athens.views.blocks/bullet-style","G__57074","garden.selectors/&","garden.selectors/after","athens.style/OPACITIES","G__57075","garden.selectors/before","stylefy.core.keyframes","athens.views.blocks/drop-area-indicator","athens.views.blocks/block-content-style","G__57076","garden.selectors/not","garden.selectors/attr=","athens.views.blocks/tooltip-style","athens.style/ZINDICES","athens.style/DEPTH-SHADOWS","athens.views.blocks/dragging-style","athens.views.blocks/walk-parse-tree-for-links","source-str","link-fn","db-fn","G__57077","G__57078","instaparse.core/transform","title","inner-title","cljs.core.apply","cljs.core/+","now","athens.util/now-ts","uid","athens.util/gen-block-uid","athens.parser/parse-to-ast","athens.views.blocks/on-change","oldvalue","value","re-frame.core/dispatch","athens.db/search-exact-node-title","now-time","block","athens.db/get-block-document","athens.db/count-linked-references-excl-uid","clojure.string/includes?","_","cljs.core/deref","athens.parse-renderer/pull-node-from-string","athens.views.blocks/db-on-change","goog.functions/debounce","athens.views.blocks/toggle","id","open","cljs.core/not","p__57079","map__57080","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get","athens.views.blocks/toggle-el","children","cljs.core/seq","stylefy.core.use_style","js/module$node_modules$$material_ui$icons$index.KeyboardArrowDown","p__57082","map__57083","athens.views.blocks/tooltip-el","order","dbid","edit-time","state","map__57085","dragging","tooltip","and__4115__auto__","e","cljs.core.swap_BANG_","cljs.core/assoc","athens.util/date-string","athens.views.blocks/inline-search-el","map__57087","query","results","index","type","cljs.core.merge","athens.views.dropdown/dropdown-style","clojure.string/blank?","cljs.core.symbol","cljs.core.doall","athens.views.dropdown/menu-style","iter__4529__auto__","s__57090","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4527__auto__","size__4528__auto__","cljs.core/count","b__57092","cljs.core/chunk-buffer","i__57091","vec__57093","cljs.core/-nth","cljs.core.nth","map__57096","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__57089","cljs.core/chunk-rest","vec__57098","cljs.core/first","map__57101","cljs.core/cons","cljs.core/rest","i","string","cljs.core.map_indexed","cljs.core/list","athens.views.buttons/button","cljs.core.prn","cljs.core._EQ_","or__4126__auto__","athens.views.blocks/slash-menu-el","map__57103","s__57106","b__57108","i__57107","vec__57109","vec__57112","iter__57105","vec__57115","vec__57118","icon","text","_expansion","kbd","athens.keybindings/slash-options","athens.keybindings/select-slash-cmd","reagent.core/adapt-react-class","athens.views.blocks/paste","map__57121","data","is-block","cljs.core/re-find","last-keydown","shift","athens.views.blocks/block-on-change","_uid","athens.views.blocks/block-content-el","is-editing","map__57124","komponentit.autosize/textarea","athens.keybindings/block-key-down","goog.events/listen","js/window","goog.events.EventType/MOUSEOVER","athens.listeners/multi-block-select-over","goog.events.EventType/MOUSEUP","athens.listeners/multi-block-select-up","source-uid","re_frame.core.subscribe","cljs.core.not_EQ_","vec__57126","target","page","target-block","blocks","cljs.core/vec","cljs.core.array_seq","start","end","cljs.core.keep_indexed","el","selected-blocks","cljs.core.subvec","selected-uids","p1__57123#","cljs.core.mapv","athens.parse-renderer/parse-and-render","athens.views.blocks/bullet-el","map__57129","map__57130","show","x","y","selected-items","cljs.core.map","clojure.string.join","js/navigator","related","goog.dom.classlist/contains","athens.router.navigate_uid","rect","new-context-menu-state","cljs.core/empty?","cljs.core/merge","athens.views.blocks/block-el","reagent.core.atom","cljs.core/add-watch","_context","_atom","old","new","map__57133","atom-string","G__57135","G__57136","G__57137","map__57138","map__57139","drag-target","state-edit-time","is-selected","new-state","offset","athens.util/mouse-offset","middle-y","athens.util/vertical-center","closest-container","next-sibling","last-child?","dragging-ancestor","not-dragging?","s__57143","b__57145","i__57144","iter__57142","child","athens.views.blocks/block-component","ident","cljs.core/chunk-first"],"sourcesContent":["(ns athens.views.blocks\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.db :as db :refer [count-linked-references-excl-uid]]\n    [athens.keybindings :refer [block-key-down]]\n    [athens.listeners :refer [multi-block-select-over multi-block-select-up]]\n    [athens.parse-renderer :refer [parse-and-render pull-node-from-string]]\n    [athens.parser :as parser]\n    [athens.router :refer [navigate-uid]]\n    [athens.style :refer [color DEPTH-SHADOWS OPACITIES ZINDICES]]\n    [athens.util :refer [now-ts gen-block-uid mouse-offset vertical-center date-string]]\n    [athens.views.buttons :refer [button]]\n    [athens.views.dropdown :refer [menu-style dropdown-style]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [clojure.string :as str]\n    #_[datascript.transit :as dt]\n    [garden.selectors :as selectors]\n    [goog.dom.classlist :refer [contains]]\n    [goog.events :as events]\n    [goog.functions :refer [debounce]]\n    [instaparse.core :as parse]\n    [komponentit.autosize :as autosize]\n    [re-frame.core :refer [dispatch subscribe]]\n    [reagent.core :as r]\n    [stylefy.core :as stylefy :refer [use-style]])\n  (:import\n    (goog.events\n      EventType)))\n\n;;; Styles\n;;; \n;;; Blocks use Em units in many places rather than Rem units because\n;;; blocks need to scale with their container: sidebar blocks are\n;;; smaller than main content blocks, for instance.\n\n\n(def block-container-style\n  {:display \"flex\"\n   :line-height \"2em\"\n   :position \"relative\"\n   :border-radius \"0.125rem\"\n   :justify-content \"flex-start\"\n   :flex-direction \"column\"\n   ::stylefy/manual [[:&.show-tree-indicator:before {:content \"''\"\n                                                     :position \"absolute\"\n                                                     :width \"1px\"\n                                                     :left \"calc(1.25em + 1px)\"\n                                                     :top \"2em\"\n                                                     :bottom \"0\"\n                                                     :transform \"translateX(50%)\"\n                                                     :background (color :border-color)}]\n                     [:&:after {:content \"''\"\n                                :z-index -1\n                                :position \"absolute\"\n                                :top \"0.75px\"\n                                :right 0\n                                :bottom \"0.75px\"\n                                :left 0\n                                :opacity 0\n                                :pointer-events \"none\"\n                                :border-radius \"0.25rem\"\n                                :transition \"opacity 0.075s ease\"\n                                :background (color :link-color :opacity-lower)\n                                :box-shadow [[\"0 0.25rem 0.5rem -0.25rem\" (color :background-color :opacity-med)]]}]\n                     [:&.is-selected:after {:opacity 1}]\n                     [:.block-body {:display \"flex\"\n                                    :border-radius \"0.5rem\"\n                                    :transition \"all 0.1s ease\"\n                                    :position \"relative\"}\n                      [:button.block-edit-toggle {:position \"absolute\"\n                                                  :appearance \"none\"\n                                                  :width \"100%\"\n                                                  :background \"none\"\n                                                  :border 0\n                                                  :cursor \"text\"\n                                                  :display \"block\"\n                                                  :z-index 1\n                                                  :top 0\n                                                  :right 0\n                                                  :bottom 0\n                                                  :left 0}]\n                      [:&:hover {:background (color :background-minus-1)}]]\n                     ;; Darken block body when block editing, \n                     [(selectors/> :.is-editing :.block-body) {:background (color :background-minus-1)}]\n                     ;; Inset child blocks\n                     [:.block-container {:margin-left \"2rem\"}]]})\n\n\n(stylefy/class \"block-container\" block-container-style)\n\n\n(def block-disclosure-toggle-style\n  {:width \"1em\"\n   :height \"2em\"\n   :position \"relative\"\n   :z-index 2\n   :flex-shrink \"0\"\n   :display \"flex\"\n   :background \"none\"\n   :border \"none\"\n   :transition \"all 0.05s ease\"\n   :align-items \"center\"\n   :justify-content \"center\"\n   :padding \"0\"\n   :-webkit-appearance \"none\"\n   :color (color :body-text-color 0.4)\n   ::stylefy/mode [[:hover {:color (color :link-color)}]\n                   [\":is(button)\" {:cursor \"pointer\"}]]\n   ::stylefy/manual [[:&.closed [:svg {:transform \"rotate(-90deg)\"}]]\n                     [:&:empty {:pointer-events \"none\"}]]})\n\n\n(def bullet-style\n  {:flex-shrink \"0\"\n   :position \"relative\"\n   :z-index 2\n   :cursor \"pointer\"\n   :width \"0.75em\"\n   :margin-right \"0.25em\"\n   :transition \"all 0.05s ease\"\n   :height \"2em\"\n   :color (color :body-text-color :opacity-low)\n   ::stylefy/mode [[:after {:content \"''\"\n                            :background \"currentColor\"\n                            :transition \"all 0.05s ease\"\n                            :border-radius \"100px\"\n                            :box-shadow \"0 0 0 0.125rem transparent\"\n                            :display \"inline-flex\"\n                            :margin \"50% 0 0 50%\"\n                            :transform \"translate(-50%, -50%)\"\n                            :height \"0.3125em\"\n                            :width \"0.3125em\"}]\n                   [:hover {:color (color :link-color)}]]\n   ::stylefy/manual [[:&.closed-with-children [(selectors/& (selectors/after)) {:box-shadow (str \"0 0 0 0.125rem \" (color :body-text-color))\n                                                                                :opacity (:opacity-med OPACITIES)}]]\n                     [:&.closed-with-children [(selectors/& (selectors/before)) {:content \"none\"}]]\n                     [:&:hover:after {:transform \"translate(-50%, -50%) scale(1.3)\"}]\n                     [:&.dragging {:z-index 1\n                                   :cursor \"grabbing\"\n                                   :color (color :body-text-color)}]]})\n\n\n(stylefy/keyframes \"drop-area-appear\"\n                   [:from\n                    {:opacity \"0\"}]\n                   [:to\n                    {:opacity \"1\"}])\n\n\n(stylefy/keyframes \"drop-area-color-pulse\"\n                   [:from\n                    {:opacity (:opacity-lower OPACITIES)}]\n                   [:to\n                    {:opacity (:opacity-med OPACITIES)}])\n\n\n(def drop-area-indicator\n  {:display \"block\"\n   :height \"1px\"\n   :margin-bottom \"-1px\"\n   :color (color :link-color :opacity-high)\n   :position \"relative\"\n   :transform-origin \"left\"\n   :z-index 3\n   :width \"100%\"\n   :opacity 0\n   ::stylefy/manual [[:&:after {:position \"absolute\"\n                                :content \"''\"\n                                :top \"-0.5px\"\n                                :right \"0\"\n                                :bottom \"-0.5px\"\n                                :left \"2em\"\n                                :border-radius \"100px\"\n                                :background \"currentColor\"}]]})\n\n\n(def block-content-style\n  {:position \"relative\"\n   :overflow \"visible\"\n   :z-index 2\n   :flex-grow \"1\"\n   :word-break \"break-word\"\n   ::stylefy/manual [[:textarea {:display \"none\"}]\n                     [:&:hover [:textarea [(selectors/& (selectors/not :.is-editing)) {:display \"block\"\n                                                                                       :z-index 1}]]]\n                     [:textarea {:-webkit-appearance \"none\"\n                                 :cursor \"text\"\n                                 :resize \"none\"\n                                 :transform \"translate3d(0,0,0)\"\n                                 :color \"inherit\"\n                                 :padding \"0\"\n                                 :background (color :background-minus-1)\n                                 :position \"absolute\"\n                                 :top \"0\"\n                                 :left \"0\"\n                                 :right \"0\"\n                                 :width \"100%\"\n                                 :min-height \"100%\"\n                                 :caret-color (color :link-color)\n                                 :margin \"0\"\n                                 :font-size \"inherit\"\n                                 :line-height \"inherit\"\n                                 :border-radius \"0.25rem\"\n                                 :transition \"opacity 0.15s ease\"\n                                 :box-shadow (str \"-0.25rem 0 0 0\" (color :background-minus-1))\n                                 :border \"0\"\n                                 :opacity \"0\"\n                                 :font-family \"inherit\"}]\n                     [:.is-editing {:outline \"none\"\n                                    :z-index 3\n                                    :display \"block\"\n                                    :opacity \"1\"}]\n                     [:span [:span\n                             :a {:position \"relative\"\n                                 :z-index 2}]]\n                     ;; May want to refactor specific component styles to somewhere else.\n                     ;; Closer to the component perhaps?\n                     ;; Code\n                     [:code :pre {:font-family \"IBM Plex Mono\"}]\n                     ;; Media Containers\n                     ;; Using a CSS hack/convention here to create a responsive container\n                     ;; of a specific aspect ratio.\n                     ;; TODO: Replace this with the CSS aspect-ratio property once available.\n                     [:.media-16-9 {:height 0\n                                    :width \"calc(100% - 0.25rem)\"\n                                    :z-index 1\n                                    :transform-origin \"right center\"\n                                    :transition \"all 0.2s ease\"\n                                    :padding-bottom (str (* (/ 9 16) 100) \"%\")\n                                    :margin-block \"0.25rem\"\n                                    :margin-inline-end \"0.25rem\"\n                                    :position \"relative\"}]\n                     ;; Media (YouTube embeds, map embeds, etc.)\n                     [:iframe {:border 0\n                               :box-shadow [[\"inset 0 0 0 0.125rem\" (color :background-minus-1)]]\n                               :position \"absolute\"\n                               :height \"100%\"\n                               :width \"100%\"\n                               :cursor \"default\"\n                               :top 0\n                               :right 0\n                               :left 0\n                               :bottom 0\n                               :border-radius \"0.25rem\"}]\n                     ;; Images\n                     [:img {:border-radius \"0.25rem\"\n                            :max-width \"calc(100% - 0.25rem)\"}]\n                     ;; Checkboxes\n                     ;; TODO: Refactor these complicated styles into clip paths or SVGs\n                     ;; or something nicer than this\n                     [:input [:& (selectors/attr= :type :checkbox) {:appearance \"none\"\n                                                                    :border-radius \"0.25rem\"\n                                                                    :cursor \"pointer\"\n                                                                    :color (color :link-color)\n                                                                    :margin-inline-end \"0.25rem\"\n                                                                    :position \"relative\"\n                                                                    :top \"0.13em\"\n                                                                    :width \"1rem\"\n                                                                    :height \"1rem\"\n                                                                    :transition \"all 0.05s ease\"\n                                                                    :transform \"scale(1)\"\n                                                                    :box-shadow \"inset 0 0 0 1px\"}\n                              [:&:after {:content \"''\"\n                                         :position \"absolute\"\n                                         :top \"45%\" ;; How are the top and left values calculated?\n                                         :left \"20%\" ;;\n                                         :width \"30%\"\n                                         :height \"60%\"\n                                         :border-width \"0 1.5px 1.5px 0\"\n                                         :border-style \"solid\"\n                                         :opacity 0\n                                         :transform \"rotate(45deg) translate(-40%, -50%)\"}]\n                              [:&:checked {:background (color :link-color)}\n                               [:&:after {:opacity 1\n                                          :color (color :background-color)}]]\n                              [:&:active {:transform \"scale(0.9)\"}]]]]})\n\n\n(stylefy/class \"block-content\" block-content-style)\n\n\n(stylefy/keyframes \"tooltip-appear\"\n                   [:from\n                    {:opacity \"0\"\n                     :transform \"scale(0)\"}]\n                   [:to\n                    {:opacity \"1\"\n                     :transform \"scale(1)\"}])\n\n\n(def tooltip-style\n  {:z-index (:zindex-dropdown ZINDICES)\n   :position \"absolute\"\n   :box-shadow [[(:64 DEPTH-SHADOWS) \", 0 0 0 1px \" (color :body-text-color :opacity-lower)]]\n   :flex-direction \"column\"\n   :background-color (color :background-plus-1)\n   :padding \"0.5rem 0.75rem\"\n   :border-radius \"0.25rem\"\n   :line-height \"1.75rem\"\n   :left \"0.5rem\"\n   :top \"2rem\"\n   :transform-origin \"0.5rem 1.5rem\"\n   :min-width \"9rem\"\n   :animation \"tooltip-appear .2s ease\"\n   :transition \"background .1s ease\"\n   :display \"table\"\n   :color (color :body-text-color :opacity-high)\n   :border-spacing \"0.25rem\"\n   ::stylefy/manual [[:div {:display \"table-row\"}]\n                     [:b {:display \"table-cell\"\n                          :user-select \"none\"\n                          :text-align \"right\"\n                          :text-transform \"uppercase\"\n                          :font-size \"12px\"\n                          :letter-spacing \"0.1em\"\n                          :opacity (:opacity-med OPACITIES)}]\n                     [:span {:display \"table-cell\"\n                             :user-select \"all\"}\n                      [:&:hover {:color (color :header-text-color)}]]\n                     [:&:after {:content \"''\"\n                                :position \"absolute\"\n                                :top \"-0.75rem\"\n                                :bottom \"-1rem\"\n                                :border-radius \"inherit\"\n                                :left \"-1rem\"\n                                :right \"-1rem\"\n                                :z-index -1\n                                :display \"block\"}]]})\n\n\n(def dragging-style\n  {:opacity \"0.25\"})\n\n\n(stylefy/class \"dragging\" dragging-style)\n\n;; Helpers\n\n\n(defn walk-parse-tree-for-links\n  [source-str link-fn db-fn]\n  (parse/transform {:page-link (fn [& title]\n                                 (let [inner-title (apply + title)]\n                                   ;; `apply +` can return 0 if `title` is nil or empty string\n                                   (when (and (string? inner-title)\n                                              (link-fn inner-title))\n                                     (let [now (now-ts)\n                                           uid (gen-block-uid)]\n                                       (db-fn inner-title now uid)))\n                                   (str \"[[\" inner-title \"]]\")))\n                    :hashtag   (fn [& title]\n                                 (let [inner-title (apply + title)]\n                                   (when (and (string? inner-title)\n                                              (link-fn inner-title))\n                                     (let [now (now-ts)\n                                           uid (gen-block-uid)]\n                                       (db-fn inner-title now uid)))\n                                   (str \"#\" inner-title)))} (parser/parse-to-ast source-str)))\n\n\n(defn on-change\n  [oldvalue value uid]\n  ;; (prn \"ONCHANGE\" value)\n  ;; TODO: move this to somewhere more comfortable using reframe dispatch\n  (dispatch [:transact [{:db/id [:block/uid uid] :block/string value :edit/time (now-ts)}]])\n  (walk-parse-tree-for-links\n    value\n    (fn [inner-title]              (nil? (db/search-exact-node-title inner-title)))\n    (fn [inner-title now-time uid]\n      (dispatch [:transact [{:node/title  inner-title\n                             :block/uid   uid\n                             :edit/time   now-time\n                             :create/time now-time}]])))\n  (walk-parse-tree-for-links\n    oldvalue\n    (fn [inner-title]\n      (let [block (db/search-exact-node-title inner-title)]\n        (and (not (nil? block))                                                     ;; makes sure the page link is valid\n             (nil? (:block/children (db/get-block-document (:db/id block))))        ;; makes sure the page link has no children\n             (zero? (count-linked-references-excl-uid inner-title uid))             ;; makes sure the page link is not present in other pages\n             (not (clojure.string/includes? value inner-title)))))  ;; makes sure the page link is deleted in this node as well\n    (fn [inner-title _ _]\n      (let [uid (:block/uid @(pull-node-from-string inner-title))]\n        (when (some? uid) (dispatch [:page/delete uid]))))))\n\n\n(def db-on-change (debounce on-change 1000))\n\n\n(defn toggle\n  [id open]\n  (dispatch [:transact [[:db/add id :block/open (not open)]]]))\n\n\n;;; Components\n\n(defn toggle-el\n  [{:block/keys [open uid children]}]\n  (if (seq children)\n    [:button (use-style block-disclosure-toggle-style\n                        {:class    (if open \"open\" \"closed\")\n                         :on-click #(toggle [:block/uid uid] open)})\n     [:> mui-icons/KeyboardArrowDown {:style {:font-size \"16px\"}}]]\n    [:span (use-style block-disclosure-toggle-style)]))\n\n\n;; FIXME: fix flicker from on-mouse-enter on-mouse-leave\n(defn tooltip-el\n  [{:block/keys [uid order] dbid :db/id edit-time :edit/time} state]\n  (let [{:keys [dragging tooltip]} @state]\n    (when (and tooltip (not dragging))\n      [:div (use-style tooltip-style\n                       {:class          \"tooltip\"\n                        :on-click (fn [e] (.. e stopPropagation))\n                        :on-mouse-leave #(swap! state assoc :tooltip false)})\n       [:div [:b \"db/id\"] [:span dbid]]\n       [:div [:b \"uid\"] [:span uid]]\n       [:div [:b \"order\"] [:span order]]\n       [:div [:b \"last edit\"] [:span (date-string edit-time)]]])))\n\n\n(defn inline-search-el\n  [state]\n  (let [{:search/keys [query results index type]} @state]\n    [:div (merge (use-style dropdown-style)\n                 {:style {:position   \"absolute\"\n                          :top        \"100%\"\n                          :max-height \"20rem\"\n                          :left       \"1.75em\"}})\n     (if (clojure.string/blank? query)\n       [:div (str \"Search for a \" (symbol type))]\n       (doall\n         [:div (use-style menu-style {:id \"dropdown-menu\"})\n          (for [[i {:keys [node/title block/string block/uid]}] (map-indexed list results)]\n            ^{:key (str \"inline-search-item\" uid)}\n            ;; todo: implement expand\n            [button {:on-click #(prn \"expand\")\n                     :active   (= index i)\n                     :id       (str \"result-\" i)}\n             (or title string)])]))]))\n\n\n(defn slash-menu-el\n  [state]\n  (let [{index :search/index} @state]\n    [:div (merge (use-style dropdown-style) {:style {:position \"absolute\" :top \"100%\" :left \"-0.125em\"}})\n     [:div#slash-menu-container (merge (use-style menu-style) {:style {:max-height \"8em\"}})\n      (for [[i [icon text _expansion kbd]] (map-indexed list athens.keybindings/slash-options)]\n        [button {:active   (= i index)\n                 :key      text\n                 :on-click #(athens.keybindings/select-slash-cmd i state)}\n         [:<> [(r/adapt-react-class icon)] [:span text] (when kbd [:kbd kbd])]])]]))\n\n\n(defn paste\n  \"if user does typical copy and paste, meta+v, and \"\n  [e uid state]\n  (let [data (.. e -clipboardData (getData \"text\"))\n        is-block (re-find #\"\\r?\\n\" data)\n        last-keydown (:last-keydown @state)\n        {:keys [shift]} last-keydown]\n    ;; if `not shift`, do normal plain-text paste\n    (when (and is-block (not shift))\n      (.. e preventDefault)\n      (dispatch [:paste uid data]))))\n\n\n(defn block-on-change\n  [e _uid state]\n  (swap! state assoc :atom-string (.. e -target -value)))\n\n\n;; Actual string contents - two elements, one for reading and one for writing\n;; seems hacky, but so far no better way to click into the correct position with one conditional element\n(defn block-content-el\n  [_ _ _]\n  (fn [block state is-editing]\n    (let [{:block/keys [string uid]} block]\n      [:div {:class \"block-content\"\n             :on-click (fn [e]\n                         (when (false? (.. e -shiftKey))\n                           (dispatch [:editing/uid uid])))}\n       [autosize/textarea {:value         (:atom-string @state)\n                           :class         [(when is-editing \"is-editing\") \"textarea\"]\n                           :auto-focus    true\n                           :id            (str \"editable-uid-\" uid)\n                           ;; use a combination of on-change and on-key-down. imperfect, but good enough until we rewrite keybindings\n                           :on-change     (fn [e] (block-on-change e uid state))\n                           :on-paste      (fn [e] (paste e uid state))\n                           :on-key-down   (fn [e] (block-key-down e uid state))\n                           ;; TODO: allow user to select multiple times while holding shift\n                           ;; FIXME: always unselects on mouse up\n                           :on-mouse-down (fn [_]\n                                            (events/listen js/window EventType.MOUSEOVER multi-block-select-over)\n                                            (events/listen js/window EventType.MOUSEUP multi-block-select-up))\n                           :on-click      (fn [e]\n                                            (let [source-uid @(subscribe [:editing/uid])]\n                                              ;; if shift key is held when user clicks across multiple blocks, select the blocks\n                                              (when (and source-uid uid (not= source-uid uid) (.. e -shiftKey))\n                                                (let [target (.. e -target)\n                                                      page (or (.. target (closest \".node-page\")) (.. target (closest \".block-page\")))\n                                                      target-block (.. target (closest \".block-container\"))\n                                                      blocks (vec (array-seq (.. page (querySelectorAll \".block-container\"))))\n                                                      [start end] (-> (keep-indexed (fn [i el]\n                                                                                      (when (or (= el target-block)\n                                                                                                (= source-uid (.. el -dataset -uid)))\n                                                                                        i))\n                                                                                    blocks))]\n                                                  (when (and start end)\n                                                    (let [selected-blocks (subvec blocks start (inc end))\n                                                          selected-uids (mapv #(.. % -dataset -uid) selected-blocks)]\n                                                      (dispatch [:editing/uid nil])\n                                                      (dispatch [:selected/add-items selected-uids])))))))}]\n       [parse-and-render string uid]\n       [:div (use-style (merge drop-area-indicator (when (= :child (:drag-target @state)) {:opacity 1})))]])))\n\n\n(defn bullet-el\n  [_ _]\n  (fn [block state]\n    (let [{:block/keys [uid children open]} block\n          {:context-menu/keys [show x y]} @state]\n\n      [:<>\n       (when show\n         [:div (merge (use-style dropdown-style)\n                      {:style {:position \"fixed\"\n                               :x        (str x \"px\")\n                               :y        (str y \"px\")}})\n          [:div (use-style menu-style)\n           ;; TODO: create listener that lets user exit context menu if click outside\n           [button {:on-click (fn [_]\n                                (let [selected-items @(subscribe [:selected/items])\n                                      ;; use this when using datascript-transit\n                                      ;uids (map (fn [x] [:block/uid x]) selected-items)\n                                      ;blocks (d/pull-many @db/dsdb '[*] ids)\n                                      data (cond\n                                             (= show :one) (str \"((\" uid \"))\")\n                                             (= show :many) (->> (map (fn [uid] (str \"((\" uid \"))\\n\")) selected-items)\n                                                                 (str/join \"\")))]\n                                  (.. js/navigator -clipboard (writeText data))\n                                  (swap! state assoc :context-menu/show false)))}\n                                  ; TODO: unable to copy with roam/data as data type. leaving this scrap here until return to this problem\n                                  ;(= show :many) (dt/write-transit-str\n                                  ;                 {:db-id       nil ;; roam has a value for this\n                                  ;                  :type        :copy ;; or :cut\n                                  ;                  :copied-data block-refs}))]\n                                  ;(let [blob (js/Blob. [dt-data] (clj->js {\"type\" \"roam/data\"}))\n                                  ;      item (js/ClipboardItem. (clj->js {\"roam/data\" blob}))]\n                                  ;  (.then (.. js/navigator -clipboard (write [item]))\n                                  ;         #(js/console.log \"suc\" %)\n                                  ;         #(js/console.log \"fail\" %)))))}\n\n\n\n            (cond\n              (= show :one) \"Copy block ref\"\n              (= show :many) \"Copy block refs\")]]])\n       [:span (use-style bullet-style\n                         {:class           [(when (and (seq children) (not open))\n                                              \"closed-with-children\")]\n                          :on-mouse-over   #(swap! state assoc :tooltip true)\n                          :on-mouse-out    (fn [e]\n                                             (let [related (.. e -relatedTarget)]\n                                               (when-not (and related (contains related \"tooltip\"))\n                                                 (swap! state assoc :tooltip false))))\n                          :on-click        (fn [e] (navigate-uid uid e))\n                          :draggable       true\n                          :on-context-menu (fn [e]\n                                             (.. e preventDefault)\n                                             (let [selected-blocks @(subscribe [:selected/items])\n                                                   rect (.. e -target getBoundingClientRect)\n                                                   new-context-menu-state (merge {:context-menu/x    (.. rect -left)\n                                                                                  :context-menu/y    (.. rect -bottom)\n                                                                                  :context-menu/show (if (empty? selected-blocks)\n                                                                                                       :one\n                                                                                                       :many)})]\n                                               (if (empty? selected-blocks)\n                                                 (swap! state merge new-context-menu-state)\n                                                 (swap! state merge new-context-menu-state))))\n                          :on-drag-start   (fn [e]\n                                             (set! (.. e -dataTransfer -effectAllowed) \"move\")\n                                             (.. e -dataTransfer (setData \"text/plain\" uid))\n                                             (swap! state assoc :dragging true))\n                          :on-drag-end     (fn [_]\n                                             ;; FIXME: not always called\n                                             ;         (prn \"DRAG END BULLET\")\n                                             (swap! state assoc :dragging false))})]])))\n\n\n;;TODO: more clarity on open? and closed? predicates, why we use `cond` in one case and `if` in another case)\n(defn block-el\n  \"Two checks to make sure block is open or not: children exist and :block/open bool\"\n  [block]\n  (let [state (r/atom {:atom-string (:block/string block)\n                       :old-string (:block/string block) ;; this is for detecting what's deleted to process page deletion\n                       :search/type nil ;; one of #{:page :block :slash}\n                       :search/query nil\n                       :search/index 0\n                       :dragging false\n                       :drag-target nil\n                       :edit/time (:edit/time block)\n                       :last-keydown nil\n                       :context-menu/x nil\n                       :context-menu/y nil\n                       :context-menu/show false})]\n    (add-watch state :string-listener\n               (fn [_context _atom old new]\n                 (let [{:keys [atom-string]} new]\n                   (when (not= (:atom-string old) atom-string)\n                     (db-on-change (:old-string old) atom-string (:block/uid block))))))\n\n    (fn [block]\n      (let [{:block/keys [uid string open children] edit-time :edit/time} block\n            {:search/keys [type] :keys [dragging drag-target] state-edit-time :edit/time} @state\n            is-editing @(subscribe [:editing/is-editing uid])\n            is-selected @(subscribe [:selected/is-selected uid])]\n\n        ;;(prn uid is-selected)\n\n        ;; if block is updated in datascript, update local block state\n        (when (< state-edit-time edit-time)\n          (let [new-state {:edit/time edit-time :atom-string string :old-string string}]\n            (swap! state merge new-state)))\n\n        [:div\n         {:class         [\"block-container\"\n                          (when dragging \"dragging\")\n                          (when is-editing \"is-editing\")\n                          (when is-selected \"is-selected\")\n                          ;; TODO: is it possible to make this show-tree-indicator a mergable -style map like above?\n                          (when (and (seq children) open) \"show-tree-indicator\")]\n          :data-uid      uid\n          :on-drag-over  (fn [e]\n                           (.. e preventDefault)\n                           (.. e stopPropagation)\n                           ;; if last block-container (i.e. no siblings), allow drop below\n                           ;; if block or ancestor has css dragging class, do not show drop indicator\n                           (let [offset            (mouse-offset e)\n                                 middle-y          (vertical-center (.. e -target))\n                                 closest-container (.. e -target (closest \".block-container\"))\n                                 next-sibling      (.. closest-container -nextElementSibling)\n                                 last-child?       (nil? next-sibling)\n                                 dragging-ancestor (.. e -target (closest \".dragging\"))\n                                 not-dragging?     (nil? dragging-ancestor)\n                                 target            (when not-dragging?\n                                                     (cond\n                                                       ;; if above midpoint, show drop indicator above block\n                                                       (< (:y offset) middle-y) :above\n                                                       ;; if no children and over 50 pixels from the left, show child drop indicator\n                                                       (and (empty? children) (< 50 (:x offset))) :child\n                                                       ;; if below midpoint and last child, show drop indicator below\n                                                       (and last-child? (< middle-y (:y offset))) :below))]\n                             (swap! state assoc :drag-target target)))\n          :on-drag-enter (fn [_])\n          :on-drag-leave (fn [_]\n                           (swap! state assoc :drag-target nil))\n          :on-drop       (fn [e]\n                           (.. e stopPropagation)\n                           (let [source-uid (.. e -dataTransfer (getData \"text/plain\"))]\n                             (cond\n                               (nil? drag-target) nil\n                               (= source-uid uid) nil)\n                             (dispatch [:drop-bullet source-uid uid drag-target])\n                             (swap! state assoc :drag-target nil)))}\n         [:div (use-style (merge drop-area-indicator (when (= drag-target :above) {:opacity \"1\"})))]\n\n         [:div.block-body\n          [:button.block-edit-toggle\n           {:on-click (fn [e]\n                        (when (false? (.. e -shiftKey))\n                          (dispatch [:editing/uid uid])))}]\n\n          [toggle-el block]\n          [bullet-el block state]\n          [tooltip-el block state]\n          [block-content-el block state is-editing]]\n\n         (cond\n           (or (= type :page) (= type :block)) [inline-search-el state]\n           (= type :slash) [slash-menu-el state])\n\n         ;; Children\n         (when (and open (seq children))\n           (for [child children]\n             [:div {:key (:db/id child)}\n              [block-el child]]))\n\n         [:div (use-style (merge drop-area-indicator (when (= drag-target :below) {:opacity \"1\"})))]]))))\n\n\n(defn block-component\n  [ident]\n  (let [block (db/get-block-document ident)]\n    [block-el block]))\n"]}