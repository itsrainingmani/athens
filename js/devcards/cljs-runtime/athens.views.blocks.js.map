{"version":3,"sources":["athens/views/blocks.cljs"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AA8BA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKA,AAa4D,AAAA,AAACC;AAGlE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC,AAaK,AAAA,AAAA,AAACC,AACwB,AAAA,AAACF;AAKpC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKG,AAOK,AAAA,AAAA,AAACD,AAWwB,AAAA,AAACF,AAEW,AAAAI,AAAa,AAACE,AAAAA,AAAAA;AAAd,AAAA,AAAAF,AAAAA,AAACC,AAAAA,AAAAA;AApBhD,AAAA,AAAA,AAAA,AAAA,AAAA,AAoB4F,AAAA,AAAkB,AAAA,AAACL,AACtB,AAAA,AAAcO,AACxD,AAAAC,AAAa,AAACC,AAAAA,AAAAA;AAAd,AAAA,AAAAD,AAAAA,AAACH,AAAAA,AAAAA;AAtBhD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AA0B0C,AAAA,AAACL;AAG3C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACU;AAOD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACA,AAE6B,AAAA,AAAgBH,AAEhB,AAAA,AAAcA;AAG5C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKI,AAIK,AAAA,AAAA,AAACT;AAgBX,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKU,AAMsC,AAAAC,AAAa,AAAAC,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACC,AAAAA,AAAAA;;AAAd,AAAA,AAAAF,AAAAA,AAACR,AAAAA,AAAAA;AAN5C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAc6C,AAAA,AAACL,AAOA,AAAA,AAACA,AAMF,AAAA,AAAkB,AAAA,AAACA;AAahE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACU;AASD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKM,AAGY,AAAA,AAAKC,AAA8B,AAAA,AAAA,AAACf,AAEhC,AAAA,AAACF,AAWZ,AAAA,AAAA,AAACE,AASwB,AAAA,AAAcK,AAGT,AAAA,AAACP;AAYzC,AAAA,AAAA,AAAA,AAAKkB;AAML,AAAA,AAAMC,AACHC,AAAMC;AADT,AAGE,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAA0CD,AAAmBD,AAAiB,AAACI;AAA/E,AAAA,AAAAF,AAAAA,AAACC,AAAAA,AAAAA;;AAGD,AAAAE,AAAA,AAAA,AAA6B;AAAOG;AAAP,AACE,AAAMC,AAAY,AAACC,AAAMC,AAAEH;AAA3B,AACE,AAAM,AAAA,AAAM,AAACI,AAA2BH;AAAxC,AACE,AAAMI,AAAI,AAACT;AACLH,AAAI,AAACa;AADX,AAEE,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAuCN,AACAR,AACAY,AACAA;AAHvC,AAAA,AAAAE,AAAAA,AAACZ,AAAAA,AAAAA;;AAHL;;AAOA,AAAA,AAAA,AAAUM;;;AATPD;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;;AAApCF,AASgE,AAACU,AAAoBhB;AATrF,AAAA,AAAAK,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;;AAYH,AAAKU,AAAa,AAAA,AAACC,AAASnB;AAG5B,AAAA,AAAMoB,AACHC,AAAGC;AADN,AAEE,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAA+BF,AAAe,AAACG,AAAIF;AAAnD,AAAA,AAAAC,AAAAA,AAACnB,AAAAA,AAAAA;;AAKH,AAAA,AAAAqB,AAAMK;AAAN,AAAA,AAAAJ,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAf,AAAAiB,AAAAF,AAAAA;AAAA,AAAAG,AAAAH,AAAA,AACiBJ;AADjB,AAAAO,AAAAH,AAAA,AACsBxB;AADtB,AAAA2B,AAAAH,AAAA,AAC0BK;AAD1B,AAEE,AAAI,AAACC,AAAID;AAAT,AAAA,AACW,AAAA,AAAA,AAAA,AAAA,AAACE,AAAUnD,AACW,AAAA,AAAA,AAAIwC;AAD1B,AAEuB,AAAA,AAAA,AAACF,AAAmBlB,AAAKoB;AAH3D,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIOY;;AAJP,AAAA,AAKS,AAACC,AAAUrD;;;AAItB,AAAA,AAAAsD,AAAME,AACwDI;AAD9D,AAAA,AAAAL,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAV,AAAA,AAAAU,AAAA,AAAA,AAAA,AAAA,AAAA1B,AAAAiB,AAAAS,AAAAA;AAAA,AAAAR,AAAAQ,AAAA,AAC4BG;AAD5B,AAAAX,AAAAQ,AAAA,AACwCI;AADxC,AAAAZ,AAAAQ,AAAA,AACiBnC;AADjB,AAAA2B,AAAAQ,AAAA,AACqBE;AADrB,AAEE,AAAAI,AAAA,AAAAC,AAAkCF;AAAlCC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAhB,AAAA,AAAAgB,AAAA,AAAA,AAAA,AAAA,AAAAhC,AAAAiB,AAAAe,AAAAA;AAAA,AAAAd,AAAAc,AAAA,AAAcE;AAAd,AAAAhB,AAAAc,AAAA,AAAuBG;AAAvB,AACE,AAAM,AAAAC,AAAKD;AAAL,AAAA,AAAAC;AAAa,AAACvB,AAAIqB;;AAAlBE;;;AAAN,AAAA,AAAA,AACQ,AAAA,AAAA,AAAA,AAAA,AAAA,AAACd,AAAUpC;AAAX,AAE6B,AAAA,AAAA,AAACmD,AAAMN,AAAMO;AAHlD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAI6BT,AACFtC,AACEqC,AACI,AAACW,AAAYT;;AAP9C;;;AAYJ,AAAA,AAAMU,AACHC,AAAOV;AADV,AAEE,AAAAW,AAAA,AAAAT,AAAuDF;AAAvDW,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1B,AAAA,AAAA0B,AAAA,AAAA,AAAA,AAAA,AAAA1C,AAAAiB,AAAAyB,AAAAA;AAAA,AAAAxB,AAAAwB,AAAA,AAAqBC;AAArB,AAAAzB,AAAAwB,AAAA,AAA0BE;AAA1B,AAAA1B,AAAAwB,AAAA,AAAgCG;AAAhC,AAAA3B,AAAAwB,AAAA,AAAsCI;AAAtC,AAAA5B,AAAAwB,AAAA,AAA8CK;AAA9C,AACE,AAAM,AAAAC,AAAIJ;AAAJ,AAAA,AAAAI;AAAAA;;AAAUL;;;AAAhB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACGM,AAImB,AAAA,AAAA,AAAA,AAAI,AAACC,AAAsBL,AAEzB,AAAA,AAAA,AAACM,AACO,AAAA,AAAA,AAAA,AAAC7B,AAAU8B,AAChB,AAAAC,AAAA,AAAAC;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAD,AAAAA;;AAAA,AAAA,AAAAE,AAAA,AAAAnC,AAAAiC;AAAA,AAAA,AAAAE;AAAA,AAAA,AAAAF,AAAAE;AAAA,AAAA,AAAA,AAAAC,AAAAH;AAAA,AAAAI,AAspEoB,AAAA8F,AAAAlG;AAtpEpBK,AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAAC,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAI,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAJ;AAAA,AAAAK,AAAA,AAAAC,AAAAP,AAAAK;AAAA,AAAAG,AAAAF,AAAA,AAAA,AAAOc;AAAPX,AAAA,AAAAD,AAAAF,AAAA,AAAA;AAAAG,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAnD,AAAA,AAAAmD,AAAA,AAAA,AAAA,AAAA,AAAAnE,AAAAiB,AAAAkD,AAAAA;AAAA,AAAAjD,AAAAiD,AAAA,AAAiBrE;AAAjB,AAAAoB,AAAAiD,AAAA,AAA4BY;AAA5B,AAAA7D,AAAAiD,AAAA,AAAyC5E;AAAzC,AAAA,AAAA,AAAA6E,AAAAP,AAAA,AAAA,AAAA,AAEQ,AAAA,AAAA,AAAA,AAACvC,AACC,AAAC4D,AAAMC,AAAgB,AAAA,AAAA,AAAM,AAACC,AAAErC,AAAM+B,AAAGO;;AAD3C,AAEc,AAAA,AAACC;;AAFf,AAGO,AAAA,AAAeR,AAC3B,AAAA9B,AAAIlD;AAAJ,AAAA,AAAAkD;AAAAA;;AAAU+B;;AANb,AAAA,AACS,AAAA,AAA0BxF;;AADnC,AAAA,AAAAwE,AAAA;;;;AAAA;;;;;AAAA,AAAAM,AAAA,AAAAC,AAAAT,AAAA,AAAAU,AAAA,AAAAC,AAAAlB;;AAAA,AAAAe,AAAA,AAAAC,AAAAT,AAAA;;;AAAA,AAAAY,AAAA,AAAAC,AAAApB;AAAA,AAAAY,AAAAO,AAAA,AAAA,AAAOK;AAAPH,AAAA,AAAAT,AAAAO,AAAA,AAAA;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA3D,AAAA,AAAA2D,AAAA,AAAA,AAAA,AAAA,AAAA3E,AAAAiB,AAAA0D,AAAAA;AAAA,AAAAzD,AAAAyD,AAAA,AAAiB7E;AAAjB,AAAAoB,AAAAyD,AAAA,AAA4BI;AAA5B,AAAA7D,AAAAyD,AAAA,AAAyCpF;AAAzC,AAAA,AAAAqF,AAAA,AAAA,AAAA,AAEQ,AAAA,AAAA,AAAA,AAACtD,AACC,AAAC4D,AAAMC,AAAgB,AAAA,AAAA,AAAM,AAACC,AAAErC,AAAM+B,AAAGO;;AAD3C,AAEc,AAAA,AAACC;;AAFf,AAGO,AAAA,AAAeR,AAC3B,AAAA9B,AAAIlD;AAAJ,AAAA,AAAAkD;AAAAA;;AAAU+B;;AANb,AAAA,AAAA,AAAAR,AAAA,AAAAM,AAAAvB,AACS,AAAA,AAA0B/D;;;AADnC;;;;AAAA,AAAA;;AAAA,AAAA,AAAA8D,AAAsD,AAAC2B,AAAYC,AAAKnC;;;AATnG;;;AAoBJ,AAAA,AAAMyC,AACHC,AAAEA,AAAEA;AADP,AAEE,AAAK5C,AAAMb,AAAM0D;AAAjB,AACE,AAAAC,AAAiC9C;AAAjC8C,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1E,AAAA,AAAA0E,AAAA,AAAA,AAAA,AAAA,AAAA1F,AAAAiB,AAAAyE,AAAAA;AAAA,AAAAxE,AAAAwE,AAAA,AAAoBX;AAApB,AAAA7D,AAAAwE,AAAA,AAA2BnG;AAA3B,AAAA,AAAA,AACQ,AAAA,AAAA,AAAA,AAAA,AAAC+B,AAAUxC,AAEgB,AAAK0G;AAAL,AAAQ,AAAAG,AAAA,AAAA,AAAwBpG;AAAxB,AAAA,AAAAoG,AAAAA,AAAClG,AAAAA,AAAAA;AAH5C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIImG,AAAkC,AAAA,AAAA,AAAA3D,AAAeF,AACd,AAAA,AAAA,AAAA,AAAM0D,AAEP,AAAA,AAAqBlG,AAErB,AAAKiG;AAAL,AAAA;AATtC,AAUsC,AAAKK;AAAL,AAAQ,AAACC,AAAeD,AAAEtG,AAAIwC;AAVpE,AAWsC,AAAK8D;AAAL,AACE,AAAI,AAAIA;AACN,AAAA,AAACP;;AACD,AACE,AAACS,AAAcC,AAAUC,AAAoBC;;AAC7C,AAACH,AAAcC,AAAUG,AAAkBC;;AAhBvF,AAAA,AAAA,AAmBIC,AAAiBtB,AACZ,AAACvD,AAAU,AAAC0D,AAAMrG,AAAoB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAM,AAAA,AAACuG,AAAS,AAAA,AAAA,AAAAnD,AAAeF;;;AAGlF,AAAA,AAAMuE,AACHd,AAAEA;AADL,AAEE,AAAAe,AAAuCxE;AAAvC,AAAA,AAAAyE,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxF,AAAA,AAAAwF,AAAA,AAAA,AAAA,AAAA,AAAAxG,AAAAiB,AAAAuF,AAAAA;AAAA,AAAAtF,AAAAsF,AAAA,AAAmBjH;AAAnB,AAAA2B,AAAAsF,AAAA,AAAuBpF;AAAvB,AAAAF,AAAAsF,AAAA,AAAgC7F;AAAhC,AAAA,AAAA,AACS,AAACuE,AAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC5D,AAAUjD,AACiB,AAAA,AAAA,AAAA,AAAM,AAAK,AAACgD,AAAID,AAAU,AAACP,AAAIF;AAD3D,AAG4B,AAAA,AAAA,AAAC0B,AAAMN,AAAMO;AAHzC,AAI2B,AAAKuD;AAAL,AACE,AAAMY,AAAQ,AAAIZ;AAAlB,AACE,AAAU,AAAAzD,AAAKqE;AAAL,AAAA,AAAArE;AAAa,AAAA,AAACsE,AAASD;;AAAvBrE;;;AAAV;;AAAA,AACE,AAAA,AAAA,AAACC,AAAMN,AAAMO;;AAP9C,AAAA,AAAA,AAS2B,AAAKuD;AAAL,AACE,AAAA,AAAM,AAAA,AAAIA;;AACV,AAAA,AAAA,AAAIA,AAAsCtG;;AAE1C,AAAA,AAAA,AAAC8C,AAAMN,AAAMO;AAb1C,AAc2B,AAAKkD;AAAL,AAEE,AAAA,AAACF;;AACD,AAAA,AAAA,AAACjD,AAAMN,AAAMO;;;;AAI5D;;;AAAA,AAAMqE,AAEH/D;AAFH,AAGE,AAAMb,AAAM,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAC6E,AAAqB,AAAA,AAAehE,AAQjB,AAAA,AAAYA;AAR5C,AASE,AAAA,AAACiE,AAAU9E,AACA,AAAK+E,AAASC,AAAMC,AAAIC;AAAxB,AACE,AAAAC,AAA4BD;AAA5BC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlG,AAAA,AAAAkG,AAAA,AAAA,AAAA,AAAA,AAAAlH,AAAAiB,AAAAiG,AAAAA;AAAA,AAAAhG,AAAAgG,AAAA,AAAcC;AAAd,AACE,AAAM,AAACC,AAAK,AAAA,AAAcJ,AAAKG;AAA/B,AACE,AAAAE,AAAcF;AAAdG,AAA0B,AAAA,AAAY1E;AAAtC,AAAA,AAAAyE,AAAAC,AAAAD,AAAAC,AAAC/G,AAAAA,AAAAA;;AADH;;;;AAGf,AAAKqC;AAAL,AACE,AAAA2E,AAAoE3E;AAApE2E,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAvG,AAAA,AAAAuG,AAAA,AAAA,AAAA,AAAA,AAAAvH,AAAAiB,AAAAsG,AAAAA;AAAA,AAAArG,AAAAqG,AAAA,AAA8CzF;AAA9C,AAAAZ,AAAAqG,AAAA,AAAoBhI;AAApB,AAAA2B,AAAAqG,AAAA,AAAwBxC;AAAxB,AAAA7D,AAAAqG,AAAA,AAA+B5G;AAA/B,AAAAO,AAAAqG,AAAA,AAAoCnG;AAApCoG,AAAA,AAAAvF,AACgFF;AADhFyF,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxG,AAAA,AAAAwG,AAAA,AAAA,AAAA,AAAA,AAAAxH,AAAAiB,AAAAuG,AAAAA;AAAA,AAAAtG,AAAAsG,AAAA,AACOtF;AADP,AAAAhB,AAAAsG,AAAA,AAC0BC;AAD1B,AAAAvG,AAAAsG,AAAA,AACmDE;AADnD,AAAAzF,AAEMwD,AAAY,AAAAkC,AAAA,AAAA,AAAgCpI;AAAhC,AAAA,AAAAoI,AAAAA,AAACC,AAAAA,AAAAA;;AAFnB,AAAA3F,AAGM4F,AAAa,AAAAC,AAAA,AAAA,AAAkCvI;AAAlC,AAAA,AAAAuI,AAAAA,AAACF,AAAAA,AAAAA;;AAHpB,AAQE,AAAM,AAAGF,AAAgB5F;AAAzB,AACE,AAAA,AAAA,AAAA,AAAMiG,AAAsBjG,AAAuBiD;AAAnD,AACE,AAACiD,AAAMjG,AAAMkG,AAAMF;;AAFvB;;AARF,AAAA,AAcG,AAAA,AAAA,AAAA,AAACzG,AAAU,AAAC4D,AAAMjH,AACA,AAAA,AAAA,AAAMiE,AAAS9C,AACf,AAAA,AAAA,AAAA,AAAA,AAAMyI,AAA+B,AAAA,AAAA,AAACzJ,AAE5B,AAAA,AAAA,AAAA,AAAM8D,AACN,AAAM,AAAAE,AAAK,AAACf,AAAID;AAAV,AAAA,AAAAgB;AAAoBzB;;AAApByB;;AALlC,AAAA,AAK4B,AAAA,AAAA,AACD7C,AACA,AAAKsG;AAAL,AACE,AAAIA;;AACJ,AAAIA;;AAGJ,AAAMqC,AAAkB,AAACC,AAAatC;AAChCuC,AAAkB,AAACC,AAAgB,AAAIxC;AACvCyC,AAAkB,AAAA,AAAA,AAAIzC;AACtB0C,AAAkB,AAAID;AACtBE,AAAkB,AAAA,AAAMD;AACxBE,AAAkB,AAAA,AAAA,AAAI5C;AACtB6C,AAAkB,AAAA,AAAMD;AACxBE,AAAkB,AAAA,AAAA,AAAMD,AACJ,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEE,AAAG,AAAA,AAAIR,AAAQE,AAEf,AAAK,AAACQ,AAAOxH,AAAU,AAAA,AAAM,AAAA,AAAI8G,AAEjC,AAAKM,AAAY,AAAGJ,AAAS,AAAA,AAAIF;AAd7D,AAeE,AAAA,AAAC7F,AAAMN,AAAMO,AAAmBqG;AA3B/D,AA4B2B,AAAKnD;AAAL,AAAA;AA5B3B,AA6B2B,AAAKA;AAAL,AACE,AAAA,AAAA,AAACnD,AAAMN,AAAMO;AA9B1C,AA+B2B,AAAKuD;AAAL,AACE,AAAIA;;AACJ,AAAMgD,AAAW,AAAA,AAAA,AAAIhD;AAArB,AACE,AACE,AAAA,AAAM4B;AADR;AAAA,AAEE,AAACrC,AAAEyD,AAAWtJ;AAFhB;AAAA;;;AAGA,AAAAuJ,AAAA,AAAA,AAAwBD,AAAWtJ,AAAIkI;AAAvC,AAAA,AAAAqB,AAAAA,AAACrJ,AAAAA,AAAAA;;AACD,AAAA,AAAA,AAAC4C,AAAMN,AAAMO;AApD/C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAqDS,AAACd,AAAU,AAAC0D,AAAMrG,AAAoB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAM,AAAA,AAACuG,AAAEqC,AAGnDtG,AAAUyB,AACV0D,AAAU1D,AAAMb,AAChBJ,AAAWiB,AAAMb,AACjBwD,AAAiB3C,AAAMb,AAAM0D,AAE/B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAM,AAAA,AAAA,AAAAxD,AAAUF,AACbgH,AACFvG,AAAeI,AAAMb,AAGtB,AAAM,AAAAK,AAAKzB;AAAL,AAAA,AAAAyB;AAAU,AAACf,AAAID;;AAAfgB;;AAAN,AACE,AAAAiB,AAAA,AAAA2F;AAAA,AAAA,AAAAzF,AAAA,AAAA;AAAA,AAAA,AAAAyF,AAAAA;;AAAA,AAAA,AAAAxF,AAAA,AAAAnC,AAAA2H;AAAA,AAAA,AAAAxF;AAAA,AAAA,AAAAwF,AAAAxF;AAAA,AAAA,AAAA,AAAAC,AAAAuF;AAAA,AAAAtF,AAmgEwC,AAAA8F,AAAAR;AAngExCrF,AAAA,AAAAC,AAAAF;AAAAuF,AAAA,AAAAnF,AAAAH;AAAA,AAAA,AAAA,AAAA,AAAAuF,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAvF;AAAA,AAAA,AAAAM,AAAAP,AAAAwF,AAAME;AAAN,AAAA,AAAA,AAAAhF,AAAA6E,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAC2C,AAAA,AAAQG,AAC/CzC,AAASyC;;AAFb,AAAA,AAAAF,AAAA;;;;AAAA;;;;;AAAA,AAAA7E,AAAA,AAAAC,AAAA2E,AAAA,AAAAE,AAAA,AAAA3E,AAAAwE;;AAAA,AAAA3E,AAAA,AAAAC,AAAA2E,AAAA;;;AAAA,AAAA,AAAAvE,AAAAsE,AAAMI;AAAN,AAAA,AAAAxE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAuE,AAAA,AAAAtE,AAAAmE,AAC2C,AAAA,AAAQI,AAC/CzC,AAASyC;;;AAFb;;;;AAAA,AAAA;;AAAA,AAAA,AAAA/F,AAAYjC;AAnEjB,AAAA,AAkEG,AAKM,AAACI,AAAU,AAAC0D,AAAMrG,AAAoB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAM,AAAA,AAACuG,AAAEqC;;;AAG9D,AAAA,AAAM4B,AACHC;AADH,AAEE,AAAM1G,AAAM,AAAC2G,AAAsBD;AAAnC,AAAA,AACG3C,AAAS/D","names":["athens.views.blocks/block-style","athens.style.color.cljs$core$IFn$_invoke$arity$1","athens.views.blocks/block-disclosure-toggle-style","athens.style.color.cljs$core$IFn$_invoke$arity$2","athens.views.blocks/bullet-style","G__58433","garden.selectors/&","garden.selectors/after","athens.style/OPACITIES","G__58434","garden.selectors/before","stylefy.core.keyframes.cljs$core$IFn$_invoke$arity$variadic","athens.views.blocks/drop-area-indicator","athens.views.blocks/block-content-style","G__58435","G__58436","garden.selectors/not","athens.views.blocks/tooltip-style","athens.style/DEPTH-SHADOWS","athens.views.blocks/dragging-style","athens.views.blocks/on-change","value","uid","G__58437","re-frame.core/dispatch","athens.util/now-ts","G__58438","G__58439","instaparse.core/transform","title","inner-title","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/+","athens.db/search-exact-node-title","now","athens.util/gen-block-uid","G__58440","athens.parser/parse-to-ast","athens.views.blocks/db-on-change","goog.functions/debounce","athens.views.blocks/toggle","id","open","G__58441","cljs.core/not","p__58442","map__58443","cljs.core/PROTOCOL_SENTINEL","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","athens.views.blocks/toggle-el","children","cljs.core/seq","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$2","js/module$node_modules$$material_ui$icons$index.KeyboardArrowDown","stylefy.core.use_style.cljs$core$IFn$_invoke$arity$1","p__58445","map__58446","athens.views.blocks/tooltip-el","order","dbid","edit-time","state","map__58448","cljs.core/deref","dragging","tooltip","and__4174__auto__","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","athens.views.all-pages/date-string","athens.views.blocks/page-search-el","_block","map__58450","page","block","query","results","index","or__4185__auto__","athens.views.dropdown/dropdown","clojure.string/blank?","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","athens.views.dropdown/menu-style","iter__4582__auto__","s__58453","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__58455","cljs.core/chunk-buffer","i__58454","vec__58456","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","map__58459","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__58452","cljs.core/chunk-rest","vec__58461","cljs.core/first","map__58464","cljs.core/cons","cljs.core/rest","i","string","cljs.core.map_indexed.cljs$core$IFn$_invoke$arity$2","cljs.core/list","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","athens.views.dropdown/menu-item-style","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","athens.views.dropdown/menu-item-active-style","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","athens.views.blocks/block-content-el","_","is-editing","map__58466","G__58468","komponentit.autosize/textarea","e","athens.keybindings/block-key-down","goog.events/listen","js/window","goog.events.EventType/MOUSEOVER","athens.listeners/multi-block-select-over","goog.events.EventType/MOUSEUP","athens.listeners/multi-block-select-up","athens.parse-renderer/parse-and-render","athens.views.blocks/bullet-el","p__58469","map__58470","related","goog.dom.classlist/contains","athens.views.blocks/block-el","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","cljs.core/add-watch","_context","_atom","old","new","map__58472","atom-string","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","G__58474","G__58475","map__58476","map__58477","drag-target","state-edit-time","G__58480","re-frame.core/subscribe","is-selected","G__58481","new-state","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","cljs.core/merge","offset","athens.util/mouse-offset","middle-y","athens.util/vertical-center","closest-container","next-sibling","last-child?","dragging-ancestor","not-dragging?","target","cljs.core/empty?","source-uid","G__58482","athens.views.dropdown/slash-menu-component","s__58484","b__58486","i__58485","iter__58483","child","athens.views.blocks/block-component","ident","athens.db/get-block-document","cljs.core/chunk-first"],"sourcesContent":["(ns athens.views.blocks\n  (:require\n    [\"@material-ui/icons\" :as mui-icons]\n    [athens.db :as db]\n    [athens.keybindings :refer [block-key-down]]\n    [athens.listeners :refer [multi-block-select-over multi-block-select-up]]\n    [athens.parse-renderer :refer [parse-and-render]]\n    [athens.parser :as parser]\n    [athens.style :refer [color DEPTH-SHADOWS OPACITIES]]\n    [athens.util :refer [now-ts gen-block-uid mouse-offset vertical-center]]\n    [athens.views.all-pages :refer [date-string]]\n    [athens.views.dropdown :refer [slash-menu-component menu-item-style menu-item-active-style menu-style dropdown]]\n    [cljsjs.react]\n    [cljsjs.react.dom]\n    [garden.selectors :as selectors]\n    [goog.dom.classlist :refer [contains]]\n    [goog.events :as events]\n    [goog.functions :refer [debounce]]\n    [instaparse.core :as parse]\n    [komponentit.autosize :as autosize]\n    [re-frame.core :refer [dispatch subscribe]]\n    [reagent.core :as r]\n    [stylefy.core :as stylefy :refer [use-style]])\n  (:import\n    (goog.events\n      EventType)))\n\n;;; Styles\n\n\n(def block-style\n  {:display \"flex\"\n   :line-height \"2em\"\n   :position \"relative\"\n   :justify-content \"flex-start\"\n   :flex-direction \"column\"\n   ::stylefy/manual [[:&.show-tree-indicator:before {:content \"''\"\n                                                     :position \"absolute\"\n                                                     :width \"1px\"\n                                                     :left \"calc(1.25em + 1px)\"\n                                                     :top \"2em\"\n                                                     :bottom \"0\"\n                                                     :transform \"translateX(50%)\"\n                                                     :background (color :border-color)}]]})\n\n\n(def block-disclosure-toggle-style\n  {:width \"1em\"\n   :height \"2em\"\n   :flex-shrink \"0\"\n   :display \"flex\"\n   :background \"none\"\n   :border \"none\"\n   :border-radius \"100px\"\n   :transition \"all 0.05s ease\"\n   :align-items \"center\"\n   :justify-content \"center\"\n   :padding \"0\"\n   :-webkit-appearance \"none\"\n   :color (color :body-text-color 0.4)\n   ::stylefy/mode [[:hover {:color (color :link-color)}]\n                   [\":is(button)\" {:cursor \"pointer\"}]]\n   ::stylefy/manual [[:&.closed [:svg {:transform \"rotate(-90deg)\"}]]]})\n\n\n(def bullet-style\n  {:flex-shrink \"0\"\n   :cursor \"pointer\"\n   :width \"0.75em\"\n   :margin-right \"0.25em\"\n   :transition \"all 0.05s ease\"\n   :height \"2em\"\n   :color (color :body-text-color :opacity-low)\n   ::stylefy/mode [[:after {:content \"''\"\n                            :background \"currentColor\"\n                            :transition \"all 0.05s ease\"\n                            :border-radius \"100px\"\n                            :box-shadow \"0 0 0 2px transparent\"\n                            :display \"inline-flex\"\n                            :margin \"50% 0 0 50%\"\n                            :transform \"translate(-50%, -50%)\"\n                            :height \"0.3125em\"\n                            :width \"0.3125em\"}]\n                   [:hover {:color (color :link-color)}]]\n\n   ::stylefy/manual [[:&.closed-with-children [(selectors/& (selectors/after)) {:box-shadow (str \"0 0 0 2px \" (color :body-text-color))\n                                                                                :opacity (:opacity-med OPACITIES)}]]\n                     [:&.closed-with-children [(selectors/& (selectors/before)) {:content \"none\"}]]\n                     [:&:hover:after {:transform \"translate(-50%, -50%) scale(1.3)\"}]\n                     [:&.dragging {:z-index 1\n                                   :cursor \"grabbing\"\n                                   :color (color :body-text-color)}]]})\n\n\n(stylefy/keyframes \"drop-area-appear\"\n                   [:from\n                    {:opacity \"0\"}]\n                   [:to\n                    {:opacity \"1\"}])\n\n\n(stylefy/keyframes \"drop-area-color-pulse\"\n                   [:from\n                    {:opacity (:opacity-lower OPACITIES)}]\n                   [:to\n                    {:opacity (:opacity-med OPACITIES)}])\n\n\n(def drop-area-indicator\n  {:display \"block\"\n   :height \"1px\"\n   :margin-bottom \"-1px\"\n   :color (color :link-color :opacity-high)\n   :position \"relative\"\n   :transform-origin \"left\"\n   :z-index 3\n   :width \"100%\"\n   :opacity 0\n   ::stylefy/manual [[:&:after {:position \"absolute\"\n                                :content \"''\"\n                                :top \"-0.5px\"\n                                :right \"0\"\n                                :bottom \"-0.5px\"\n                                :left \"2em\"\n                                :border-radius \"100px\"\n                                :background \"currentColor\"}]]})\n\n\n(def block-content-style\n  {:position \"relative\"\n   :overflow \"visible\"\n   :flex-grow \"1\"\n   :word-break \"break-word\"\n   ::stylefy/manual [[:textarea {:display \"none\"}]\n                     [:&:hover [:textarea [(selectors/& (selectors/not :.is-editing)) {:display \"block\"\n                                                                                       :z-index 1}]]]\n                     [:textarea {:-webkit-appearance \"none\"\n                                 :cursor \"text\"\n                                 :resize \"none\"\n                                 :transform \"translate3d(0,0,0)\"\n                                 :color \"inherit\"\n                                 :padding \"0\"\n                                 :background (color :background-minus-1)\n                                 :position \"absolute\"\n                                 :top \"0\"\n                                 :left \"0\"\n                                 :right \"0\"\n                                 :width \"100%\"\n                                 :min-height \"100%\"\n                                 :caret-color (color :link-color)\n                                 :margin \"0\"\n                                 :font-size \"inherit\"\n                                 :line-height \"inherit\"\n                                 :border-radius \"4px\"\n                                 :transition \"opacity 0.15s ease\"\n                                 :box-shadow (str \"-4px 0 0 0\" (color :background-minus-1))\n                                 :border \"0\"\n                                 :opacity \"0\"\n                                 :font-family \"inherit\"}]\n                     [:.is-editing {:outline \"none\"\n                                    :z-index 3\n                                    :display \"block\"\n                                    :opacity \"1\"}]\n                     [:span [:span\n                             :a {:position \"relative\"\n                                 :z-index 2}]]]})\n\n\n(stylefy/keyframes \"tooltip-appear\"\n                   [:from\n                    {:opacity \"0\"\n                     :transform \"scale(0)\"}]\n                   [:to\n                    {:opacity \"1\"\n                     :transform \"scale(1)\"}])\n\n\n(def tooltip-style\n  {:z-index    4\n   :position \"absolute\"\n   :box-shadow [[(:64 DEPTH-SHADOWS) \", 0 0 0 1px \" (color :body-text-color :opacity-lower)]]\n   :flex-direction \"column\"\n   :background-color (color :background-plus-1)\n   :padding \"8px 12px\"\n   :border-radius \"4px\"\n   :line-height \"24px\"\n   :left \"8px\"\n   :top \"32px\"\n   :transform-origin \"8px 24px\"\n   :min-width \"150px\"\n   :animation \"tooltip-appear .2s ease\"\n   :transition \"background .1s ease\"\n   :display \"table\"\n   :color (color :body-text-color :opacity-high)\n   :border-spacing \"4px\"\n   ::stylefy/manual [[:div {:display \"table-row\"}]\n                     [:b {:display \"table-cell\"\n                          :user-select \"none\"\n                          :text-align \"right\"\n                          :text-transform \"uppercase\"\n                          :font-size \"12px\"\n                          :letter-spacing \"0.1em\"\n                          :opacity (:opacity-med OPACITIES)}]\n                     [:span {:display \"table-cell\"\n                             :user-select \"all\"}\n                      [:&:hover {:color (color :header-text-color)}]]\n                     [:&:after {:content \"''\"\n                                :position \"absolute\"\n                                :top \"-12px\"\n                                :bottom \"-16px\"\n                                :border-radius \"inherit\"\n                                :left \"-16px\"\n                                :right \"-16px\"\n                                :z-index -1\n                                :display \"block\"}]]})\n\n\n(def dragging-style\n  {:opacity \"0.25\"})\n\n\n;; Helpers\n\n(defn on-change\n  [value uid]\n  ;; (prn \"ONCHANGE\" value)\n  (dispatch [:transact [{:db/id [:block/uid uid] :block/string value :edit/time (now-ts)}]])\n  ;; automatically add non-existent pages\n  ;; TODO: delete pages that are no longer connected to anything else\n  (parse/transform {:page-link (fn [& title]\n                                 (let [inner-title (apply + title)]\n                                   (when (nil? (db/search-exact-node-title inner-title))\n                                     (let [now (now-ts)\n                                           uid (gen-block-uid)]\n                                       (dispatch [:transact [{:node/title     inner-title\n                                                              :block/uid      uid\n                                                              :edit/time      now\n                                                              :create/time    now}]])))\n                                   (str \"[[\" inner-title \"]]\")))} (parser/parse-to-ast value)))\n\n\n(def db-on-change (debounce on-change 1000))\n\n\n(defn toggle\n  [id open]\n  (dispatch [:transact [[:db/add id :block/open (not open)]]]))\n\n\n;;; Components\n\n(defn toggle-el\n  [{:block/keys [open uid children]}]\n  (if (seq children)\n    [:button (use-style block-disclosure-toggle-style\n                        {:class    (if open \"open\" \"closed\")\n                         :on-click #(toggle [:block/uid uid] open)})\n     [:> mui-icons/KeyboardArrowDown {:style {:font-size \"16px\"}}]]\n    [:span (use-style block-disclosure-toggle-style)]))\n\n\n;; FIXME: fix flicker from on-mouse-enter on-mouse-leave\n(defn tooltip-el\n  [{:block/keys [uid order] dbid :db/id edit-time :edit/time} state]\n  (let [{:keys [dragging tooltip]} @state]\n    (when (and tooltip (not dragging))\n      [:div (use-style tooltip-style\n                       {:class          \"tooltip\"\n                        :on-mouse-leave #(swap! state assoc :tooltip false)})\n       [:div [:b \"db/id\"] [:span dbid]]\n       [:div [:b \"uid\"] [:span uid]]\n       [:div [:b \"order\"] [:span order]]\n       [:div [:b \"last edit\"] [:span (date-string edit-time)]]])))\n\n\n;; flipped around\n\n(defn page-search-el\n  [_block state]\n  (let [{:search/keys [page block query results index]} @state]\n    (when (or block page)\n      [dropdown {:style   {:position \"absolute\"\n                           :top      \"100%\"\n                           :max-height \"20rem\"\n                           :left     \"1.75em\"}\n                 :content (if (clojure.string/blank? query)\n                            [:div \"Start Typing!\"]\n                            (doall\n                              [:div (use-style menu-style {:id \"dropdown-menu\"})\n                               (for [[i {:keys [node/title block/string block/uid]}] (map-indexed list results)]\n                                 ^{:key (str \"inline-search-item\" uid)}\n                                 [:div (use-style\n                                         (merge menu-item-style (when (= index i) menu-item-active-style))\n                                         {:on-click #(prn \"expand\")\n                                          :id (str \"result-\" i)})\n                                  (or title string)])]))}])))\n\n\n;; Actual string contents - two elements, one for reading and one for writing\n;; seems hacky, but so far no better way to click into the correct position with one conditional element\n(defn block-content-el\n  [_ _ _]\n  (fn [block state is-editing]\n    (let [{:block/keys [string uid]} block]\n      [:div (use-style block-content-style\n                       {:class         \"block-content\"\n                        :on-click      (fn [_] (dispatch [:editing/uid uid]))})\n       [autosize/textarea {:value         (:atom-string @state)\n                           :class         [(when is-editing \"is-editing\") \"textarea\"]\n                           :auto-focus    true\n                           :id            (str \"editable-uid-\" uid)\n                           ;; never actually use on-change. rather, use :string-listener to update datascript. necessary to make react happy\n                           :on-change     (fn [_])\n                           :on-key-down   (fn [e] (block-key-down e uid state))\n                           :on-mouse-down (fn [e]\n                                            (if (.. e -shiftKey)\n                                              (prn \"find linear distance between source and target block. select all\")\n                                              (do\n                                                (events/listen js/window EventType.MOUSEOVER multi-block-select-over)\n                                                (events/listen js/window EventType.MOUSEUP multi-block-select-up))))}]\n\n;;(dispatch [:selected/add-item uid]))}]\n       [parse-and-render string]\n       [:div (use-style (merge drop-area-indicator (when (= :child (:drag-target @state)) {:opacity 1})))]])))\n\n\n(defn bullet-el\n  [_ _]\n  (fn [{:block/keys [uid children open]} state]\n    [:span (merge (use-style bullet-style\n                             {:class         [(when (and (seq children) (not open))\n                                                \"closed-with-children\")]\n                              :on-mouse-over #(swap! state assoc :tooltip true)\n                              :on-mouse-out  (fn [e]\n                                               (let [related (.. e -relatedTarget)]\n                                                 (when-not (and related (contains related \"tooltip\"))\n                                                   (swap! state assoc :tooltip false))))\n                              :draggable     true\n                              :on-drag-start (fn [e]\n                                               (set! (.. e -dataTransfer -effectAllowed) \"move\")\n                                               (.. e -dataTransfer (setData \"text/plain\" uid))\n                                      ;;(dispatch [:dragging/uid uid])\n                                               (swap! state assoc :dragging true))\n                              :on-drag-end   (fn [_]\n                                      ;; FIXME: not always called\n                                               (prn \"DRAG END BULLET\")\n                                               (swap! state assoc :dragging false))}))]))\n\n\n;;TODO: more clarity on open? and closed? predicates, why we use `cond` in one case and `if` in another case)\n(defn block-el\n  \"Two checks to make sure block is open or not: children exist and :block/open bool\"\n  [block]\n  (let [state (r/atom {:atom-string (:block/string block)\n                       :slash? false\n                       :search/page false\n                       :search/query nil\n                       :search/block false\n                       :search/index 0\n                       :dragging false\n                       :drag-target nil\n                       :edit/time (:edit/time block)})]\n    (add-watch state :string-listener\n               (fn [_context _atom old new]\n                 (let [{:keys [atom-string]} new]\n                   (when (not= (:atom-string old) atom-string)\n                     (db-on-change atom-string (:block/uid block))))))\n\n    (fn [block]\n      (let [{:block/keys [uid string open children] edit-time :edit/time} block\n            {dragging :dragging drag-target :drag-target state-edit-time :edit/time} @state\n            is-editing @(subscribe [:editing/is-editing uid])\n            is-selected @(subscribe [:selected/is-selected uid])]\n\n        ;;(prn uid is-selected)\n\n        ;; if block is updated in datascript, update local block state\n        (when (< state-edit-time edit-time)\n          (let [new-state {:edit/time edit-time :atom-string string}]\n            (swap! state merge new-state)))\n\n        [:div.block-container\n\n         (use-style (merge block-style\n                           (when dragging dragging-style)\n                           (when is-selected {:background-color (color :link-color :opacity-low)}))\n           ;; TODO: is it possible to make this show-tree-indicator a mergable -style map like above?\n                    {:class         [(when dragging \"dragging\")\n                                     (when (and (seq children) open) \"show-tree-indicator\")]\n                     :data-uid      uid\n                     :on-drag-over  (fn [e]\n                                      (.. e preventDefault)\n                                      (.. e stopPropagation)\n                             ;; if last block-container (i.e. no siblings), allow drop below\n                             ;; if block or ancestor has css dragging class, do not show drop indicator\n                                      (let [offset            (mouse-offset e)\n                                            middle-y          (vertical-center (.. e -target))\n                                            closest-container (.. e -target (closest \".block-container\"))\n                                            next-sibling      (.. closest-container -nextElementSibling)\n                                            last-child?       (nil? next-sibling)\n                                            dragging-ancestor (.. e -target (closest \".dragging\"))\n                                            not-dragging?     (nil? dragging-ancestor)\n                                            target            (when not-dragging?\n                                                                (cond\n                                                         ;; if above midpoint, show drop indicator above block\n                                                                  (< (:y offset) middle-y) :above\n                                                         ;; if no children and over 50 pixels from the left, show child drop indicator\n                                                                  (and (empty? children) (< 50 (:x offset))) :child\n                                                         ;; if below midpoint and last child, show drop indicator below\n                                                                  (and last-child? (< middle-y (:y offset))) :below))]\n                                        (swap! state assoc :drag-target target)))\n                     :on-drag-enter (fn [_])\n                     :on-drag-leave (fn [_]\n                                      (swap! state assoc :drag-target nil))\n                     :on-drop       (fn [e]\n                                      (.. e stopPropagation)\n                                      (let [source-uid (.. e -dataTransfer (getData \"text/plain\"))]\n                                        (cond\n                                          (nil? drag-target) nil\n                                          (= source-uid uid) nil)\n                                        (dispatch [:drop-bullet source-uid uid drag-target])\n                                        (swap! state assoc :drag-target nil)))})\n         [:div (use-style (merge drop-area-indicator (when (= drag-target :above) {:opacity \"1\"})))]\n\n         [:div {:style {:display \"flex\"}}\n          [toggle-el block]\n          [bullet-el block state]\n          [tooltip-el block state]\n          [block-content-el block state is-editing]]\n\n         (when (:slash? @state)\n           [slash-menu-component {:style {:position \"absolute\" :top \"100%\" :left \"-0.125em\"}}])\n         [page-search-el block state]\n\n         ;; Children\n         (when (and open (seq children))\n           (for [child children]\n             [:div {:style {:margin-left \"32px\"} :key (:db/id child)}\n              [block-el child]]))\n\n         [:div (use-style (merge drop-area-indicator (when (= drag-target :below) {:opacity \"1\"})))]]))))\n\n\n(defn block-component\n  [ident]\n  (let [block (db/get-block-document ident)]\n    [block-el block]))\n"]}