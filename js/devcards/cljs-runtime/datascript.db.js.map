{"version":3,"sources":["datascript/db.cljc"],"mappings":"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","names":["datascript.db/Exception","js/Error","datascript.db/IllegalArgumentException","datascript.db/UnsupportedOperationException","datascript.db/e0","datascript.db/tx0","datascript.db/emax","datascript.db/txmax","datascript.db/implicit-schema","datascript.db/seqable?","x","cljs.core/seqable?","me.tonsky.persistent-sorted-set.arrays/array?","datascript.db/conjv","cljs.core.fnil.cljs$core$IFn$_invoke$arity$2","cljs.core/conj","datascript.db/conjs","datascript.db/reduce-indexed","f","init","xs","cljs.core/first","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","p__25776","vec__25777","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","acc","idx","res","cljs.core/reduced?","cljs.core/reduced","datascript.db/cljs-env?","env","cljs.core/boolean","datascript.db/combine-hashes","y","cljs.core/hash-combine","x__4487__auto__","m__4488__auto__","datascript.db/datom-tx","goog/typeOf","m__4485__auto__","cljs.core/missing-protocol","datascript.db/datom-added","datascript.db/IDatom","this","cljs.core/PROTOCOL_SENTINEL","this__4428__auto__","writer__4429__auto__","opt__4430__auto__","cljs.core/-write","datascript.db/Datom","datascript.db/->Datom","e","a","v","tx","_hash","d","datascript.db/hash-datom","o","datascript.db/equiv-datom","datascript.db/seq-datom","k","datascript.db/val-at-datom","nf","i","datascript.db/nth-datom","not-found","datascript.db/assoc-datom","writer","opts","cljs.core/pr-sequential-writer","cljs.core/pr-writer","goog/exportSymbol","var_args","G__25781","datascript.db/datom","added","datascript.db/datom?","cljs.core/hash","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core/List","G__25782","G__25784","G__25785","G__25786","G__25787","cljs.core/Keyword","datascript.db.datom.cljs$core$IFn$_invoke$arity$5","datascript.db/datom-from-reader","vec","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","datascript.db/cmp","cljs.core/compare","datascript.db/value-compare","cljs.core/native-satisfies?","cljs.core/IComparable","cljs.core/-compare","cljs.core/array?","cljs.core/type","goog.array/defaultCompare","datascript.db/value-cmp","datascript.db/cmp-datoms-eavt","d1","d2","c__25159__auto__","datascript.db/cmp-datoms-aevt","datascript.db/cmp-datoms-avet","datascript.db/cmp-attr-quick","a1","a2","datascript.db/cmp-datoms-eav-quick","datascript.db/cmp-datoms-eavt-quick","datascript.db/cmp-datoms-aevt-quick","datascript.db/cmp-datoms-avet-quick","datascript.db/diff-sorted","b","cmp","only-a","only-b","both","cljs.core/empty?","cljs.core/not-empty","cljs.core.into.cljs$core$IFn$_invoke$arity$2","first-a","first-b","diff","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/next","datascript.db/-search","datascript.db/ISearch","data","pattern","datascript.db/-datoms","datascript.db/-seek-datoms","datascript.db/-rseek-datoms","datascript.db/-index-range","datascript.db/IIndexAccess","db","index","components","attr","start","end","datascript.db/validate-indexed","temp__5739__auto__","datascript.db/indexing?","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","datascript.db/-schema","datascript.db/-attrs-by","datascript.db/IDB","property","datascript.db/db-transient","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core/transient","datascript.db/db-persistent!","cljs.core/persistent!","this__4439__auto__","k__4440__auto__","this__4441__auto__","k25792","else__4442__auto__","G__25796","schema","eavt","aevt","avet","max-eid","max-tx","rschema","hash","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4458__auto__","f__4459__auto__","init__4460__auto__","ret__4461__auto__","p__25797","vec__25798","k__4462__auto__","v__4463__auto__","this__4453__auto__","writer__4454__auto__","opts__4455__auto__","pr-pair__4456__auto__","keyval__4457__auto__","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__25791","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4437__auto__","__meta","this__4434__auto__","__hash","this__4443__auto__","cljs.core/count","this__4435__auto__","h__4297__auto__","fexpr__25801","coll__4436__auto__","cljs.core/hash-unordered-coll","this25793","other25794","this__4448__auto__","k__4449__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","this__4446__auto__","k__4447__auto__","pred__25802","cljs.core/keyword-identical?","expr__25803","G__25805","G__25806","G__25807","G__25808","G__25809","G__25810","G__25811","G__25812","G__25813","G__25814","G__25815","G__25816","G__25817","G__25818","G__25819","G__25820","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4451__auto__","cljs.core/seq","cljs.core/MapEntry","this__4438__auto__","this__4444__auto__","entry__4445__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","datascript.db/DB","this__4482__auto__","writer__4483__auto__","G__25795","extmap__4478__auto__","G__25821","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","datascript.db/->DB","datascript.db/map->DB","datascript.db/hash-db","other","datascript.db/equiv-db","cljs.core/-seq","cljs.core/-rseq","cljs.core/with-meta","G__25822","datascript.db/empty-db","cljs.core/meta","w","datascript.db/pr-db","key","fexpr__25825","vec__25826","multival?","me.tonsky.persistent_sorted_set.slice.cljs$core$IFn$_invoke$arity$3","datascript.db.datom.cljs$core$IFn$_invoke$arity$4","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cs","cljs.core.get.cljs$core$IFn$_invoke$arity$2","datascript.db/components->pattern","me.tonsky.persistent_sorted_set.rslice.cljs$core$IFn$_invoke$arity$3","G__25823","G__25824","datascript.db/validate-attr","datascript.db/resolve-datom","datascript.db/db?","k25840","G__25844","unfiltered-db","pred","p__25845","vec__25846","G__25839","fexpr__25849","this25841","other25842","pred__25850","expr__25851","G__25853","G__25854","G__25855","G__25856","G__25857","G__25858","datascript.db/FilteredDB","G__25843","G__25859","datascript.db/->FilteredDB","datascript.db/map->FilteredDB","datascript.db/hash-fdb","_","datascript.db/attr->properties","G__25860","datascript.db/attr-tuples","m","tuple-attr","src-attr","cljs.core.update.cljs$core$IFn$_invoke$arity$5","cljs.core/assoc","datascript.db/rschema","cljs.core/reduce-kv","attr-schema","value","prop","cljs.core.update.cljs$core$IFn$_invoke$arity$4","datascript.db/validate-schema-key","expected","datascript.db/validate-schema","seq__25861","chunk__25862","count__25863","i__25864","vec__25883","temp__5735__auto__","cljs.core/chunked-seq?","c__4609__auto__","cljs.core/chunk-first","cljs.core/chunk-rest","vec__25892","kv","comp?","and__4174__auto__","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","ex-data","attrs","cljs.core/sequential?","seq__25886","chunk__25888","count__25889","i__25890","seq__25895","chunk__25897","count__25898","i__25899","G__25902","datascript.db.empty_db.cljs$core$IFn$_invoke$arity$1","cljs.core/map?","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","me.tonsky.persistent_sorted_set.sorted_set_by.cljs$core$IFn$_invoke$arity$1","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","datascript.db/init-max-eid","or__4185__auto__","G__25904","datascript.db/init-db","datoms","datascript.db.init_db.cljs$core$IFn$_invoke$arity$2","not-datom","cljs.core.drop_while.cljs$core$IFn$_invoke$arity$2","indexed","arr","G__25905","me.tonsky.persistent-sorted-set.arrays/into-array","me.tonsky.persistent-sorted-set.arrays/asort","me.tonsky.persistent-sorted-set/from-sorted-array","avet-datoms","avet-arr","cljs.core/to-array","cljs.core.transduce.cljs$core$IFn$_invoke$arity$4","cljs.core.map.cljs$core$IFn$_invoke$arity$1","cljs.core/max","datascript.db/equiv-db-index","ys","cljs.core/deref","h","cljs.core/reset!","p__25906","map__25907","cljs.core/hash-map","datascript.db/db-from-reader","cljs.core.map.cljs$core$IFn$_invoke$arity$2","p__25909","vec__25910","t","default-e","default-tx","G__25913","G__25914","datascript.db/entid-some","datascript.db/ref?","datascript.db/entid-strict","p__25915","vec__25916","c0","c1","c2","c3","G__25919","k25921","G__25925","db-before","db-after","tx-data","tempids","tx-meta","p__25926","vec__25927","G__25920","fexpr__25930","this25922","other25923","pred__25931","expr__25932","G__25934","G__25935","G__25936","G__25937","G__25938","G__25939","G__25940","G__25941","G__25942","G__25943","datascript.db/TxReport","G__25924","G__25944","datascript.db/->TxReport","datascript.db/map->TxReport","datascript.db/is-attr?","datascript.db/multival?","datascript.db/component?","datascript.db/tuple?","datascript.db/tuple-source?","datascript.db/entid","eid","vec__25945","cljs.core.array_seq.cljs$core$IFn$_invoke$arity$1","datascript.db/validate-datom","datom","found","at","datascript.db/validate-val","datascript.db/current-tx","report","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","datascript.db/next-eid","datascript.db/tx-id?","datascript.db/tempid?","datascript.db/new-eid?","datascript.db/advance-max-eid","G__25948","G__25950","datascript.db/allocate-eid","G__25951","datascript.db/with-datom","indexing?","G__25952","me.tonsky.persistent-sorted-set/conj","temp__5737__auto__","removing","G__25953","me.tonsky.persistent-sorted-set/disj","datascript.db/queue-tuple","queue","tuple","tuple-value","cljs.core/vec","cljs.core.repeat.cljs$core$IFn$_invoke$arity$2","tuple-value'","datascript.db/queue-tuples","tuples","datascript.db/transact-report","report'","queue'","datascript.db/reverse-ref?","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","cljs.core/name","cljs.core/re-matches","datascript.db/reverse-ref","cljs.core.keyword.cljs$core$IFn$_invoke$arity$2","cljs.core/namespace","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","vec__25954","ns","name","datascript.db/resolve-upserts","entity","idents","resolve","split","vs","p__25957","vec__25958","upserts","cljs.core/coll?","vec__25961","insert","upsert","G__25964","G__25965","datascript.db/validate-upserts","upsert-ids","v->e","vec__25966","vec__25969","vec__25972","vec__25975","e1","v1","e2","v2","cljs.core/second","vec__25978","vec__25981","upsert-id","datascript.db/maybe-wrap-multival","datascript.db/explode","iter__4582__auto__","s__25985","cljs.core/LazySeq","xs__6292__auto__","vec__25990","iterys__4578__auto__","s__25987","c__4580__auto__","size__4581__auto__","b__25989","cljs.core/chunk-buffer","i__25988","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__25986","cljs.core/cons","cljs.core/rest","fs__4579__auto__","iter__25984","reverse?","straight-a","p__25993","vec__25994","datascript.db/transact-add","ent","new-datom","old-datom","datascript.db/transact-retract-datom","datascript.db/retract-components","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core.comp.cljs$core$IFn$_invoke$arity$2","cljs.core.filter.cljs$core$IFn$_invoke$arity$1","datascript.db/retry-with-tempid","initial-report","es","tempid","upserted-eid","tempids'","datascript.db/transact-tx-data","datascript.db/builtin-fn?","datascript.db/flush-tuples","attr-tuples","entities","tuples+values","cljs.core/every?","cljs.core/nil?","current","datascript.db/check-value-tempids","all-tempids","reduce-fn","unused","cljs.core.sort.cljs$core$IFn$_invoke$arity$1","cljs.core/vals","initial-es","initial-report'","has-tuples?","initial-es'","cljs.core.interleave.cljs$core$IFn$_invoke$arity$2","cljs.core.repeat.cljs$core$IFn$_invoke$arity$1","vec__26015","seq__26016","first__26017","cljs.core/update","cljs.core/inc","old-eid","vec__26018","id","datascript.db.allocate_eid.cljs$core$IFn$_invoke$arity$3","entity'","new-eid","new-entity","vec__26021","op","vec__26024","seq__26025","first__26026","args","cljs.core.apply.cljs$core$IFn$_invoke$arity$3","cljs.core/not","ident","fun","cljs.core/fn?","vec__26027","ov","nv","cljs.core/some","resolved","allocated-eid","e-datoms","v-datoms","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","vec__26030"],"sourcesContent":["(ns ^:no-doc ^:lean-ns datascript.db\n  (:require\n    #?(:cljs [goog.array :as garray])\n    [clojure.walk]\n    [clojure.data]\n    [me.tonsky.persistent-sorted-set :as set]\n    [me.tonsky.persistent-sorted-set.arrays :as arrays])\n  #?(:cljs (:require-macros [datascript.db :refer [case-tree combine-cmp raise defrecord-updatable cond+]]))\n  (:refer-clojure :exclude [seqable?])) \n\n;; ----------------------------------------------------------------------------\n\n#?(:cljs\n   (do\n     (def Exception js/Error)\n     (def IllegalArgumentException js/Error)\n     (def UnsupportedOperationException js/Error)))\n\n(def ^:const e0    0)\n(def ^:const tx0   0x20000000)\n(def ^:const emax  0x7FFFFFFF)\n(def ^:const txmax 0x7FFFFFFF)\n(def ^:const implicit-schema {:db/ident {:db/unique :db.unique/identity}})\n\n;; ----------------------------------------------------------------------------\n\n#?(:clj\n  (defmacro raise [& fragments]\n    (let [msgs (butlast fragments)\n          data (last fragments)]\n      `(throw (ex-info (str ~@(map (fn [m#] (if (string? m#) m# (list 'pr-str m#))) msgs)) ~data)))))\n\n(defn #?@(:clj  [^Boolean seqable?]  \n          :cljs [^boolean seqable?])\n  [x]\n  (and (not (string? x))\n  #?(:cljs (or (cljs.core/seqable? x)\n               (arrays/array? x))\n     :clj  (or (seq? x)\n               (instance? clojure.lang.Seqable x)\n               (nil? x)\n               (instance? Iterable x)\n               (arrays/array? x)\n               (instance? java.util.Map x)))))\n\n#?(:clj\n  (defmacro cond+ [& clauses]\n    (when-some [[test expr & rest] clauses]\n      (case test\n        :let `(let ~expr (cond+ ~@rest))\n        `(if ~test ~expr (cond+ ~@rest))))))\n\n#?(:clj\n(defmacro some-of\n  ([] nil)\n  ([x] x)\n  ([x & more]\n    `(let [x# ~x] (if (nil? x#) (some-of ~@more) x#)))))\n\n(def conjv (fnil conj []))\n(def conjs (fnil conj #{}))\n\n(defn reduce-indexed\n  \"Same as reduce, but `f` takes [acc el idx]\"\n  [f init xs]\n  (first\n    (reduce\n      (fn [[acc idx] x]\n        (let [res (f acc x idx)]\n          (if (reduced? res)\n            (reduced [res idx])\n            [res (inc idx)])))\n      [init 0]\n      xs)))\n\n;; ----------------------------------------------------------------------------\n;; macros and funcs to support writing defrecords and updating\n;; (replacing) builtins, i.e., Object/hashCode, IHashEq hasheq, etc.\n;; code taken from prismatic:\n;;  https://github.com/Prismatic/schema/commit/e31c419c56555c83ef9ee834801e13ef3c112597\n;;\n\n(defn- cljs-env?\n  \"Take the &env from a macro, and tell whether we are expanding into cljs.\"\n  [env]\n  (boolean (:ns env)))\n\n#?(:clj\n   (defmacro if-cljs\n     \"Return then if we are generating cljs code and else for Clojure code.\n     https://groups.google.com/d/msg/clojurescript/iBY5HaQda4A/w1lAQi9_AwsJ\"\n     [then else]\n     (if (cljs-env? &env) then else)))\n\n(defn combine-hashes [x y]\n  #?(:clj  (clojure.lang.Util/hashCombine x y)\n     :cljs (hash-combine x y)))\n\n#?(:clj\n   (defn- get-sig [method]\n     ;; expects something like '(method-symbol [arg arg arg] ...)\n     ;; if the thing matches, returns [fully-qualified-symbol arity], otherwise nil\n     (and (sequential? method)\n          (symbol? (first method))\n          (vector? (second method))\n          (let [sym (first method)\n                ns  (or (some->> sym resolve meta :ns str) \"clojure.core\")]\n            [(symbol ns (name sym)) (-> method second count)]))))\n\n#?(:clj\n   (defn- dedupe-interfaces [deftype-form]\n     ;; get the interfaces list, remove any duplicates, similar to remove-nil-implements in potemkin\n     ;; verified w/ deftype impl in compiler:\n     ;; (deftype* tagname classname [fields] :implements [interfaces] :tag tagname methods*)\n     (let [[deftype* tagname classname fields implements interfaces & rest] deftype-form]\n       (when (or (not= deftype* 'deftype*) (not= implements :implements))\n         (throw (IllegalArgumentException. \"deftype-form mismatch\")))\n       (list* deftype* tagname classname fields implements (vec (distinct interfaces)) rest))))\n\n#?(:clj\n   (defn- make-record-updatable-clj [name fields & impls]\n     (let [impl-map (->> impls (map (juxt get-sig identity)) (filter first) (into {}))\n           body     (macroexpand-1 (list* 'defrecord name fields impls))]\n       (clojure.walk/postwalk\n        (fn [form]\n          (if (and (sequential? form) (= 'deftype* (first form)))\n            (->> form\n                 dedupe-interfaces\n                 (remove (fn [method]\n                           (when-some [impl (-> method get-sig impl-map)]\n                             (not= method impl)))))\n            form))\n        body))))\n\n#?(:clj\n   (defn- make-record-updatable-cljs [name fields & impls]\n     `(do\n        (defrecord ~name ~fields)\n        (extend-type ~name ~@impls))))\n\n#?(:clj\n   (defmacro defrecord-updatable [name fields & impls]\n     `(if-cljs\n       ~(apply make-record-updatable-cljs name fields impls)\n       ~(apply make-record-updatable-clj  name fields impls))))\n\n;; ----------------------------------------------------------------------------\n\n(declare hash-datom equiv-datom seq-datom nth-datom assoc-datom val-at-datom)\n\n(defprotocol IDatom\n  (datom-tx [this])\n  (datom-added [this]))\n\n(deftype Datom #?(:clj [^int e a v ^int tx ^:unsynchronized-mutable ^int _hash]\n                  :cljs [^number e a v ^number tx ^:mutable ^number _hash])\n  IDatom\n  (datom-tx [d] (if (pos? tx) tx (- tx)))\n  (datom-added [d] (pos? tx))\n\n  #?@(:cljs\n       [IHash\n        (-hash [d] (if (zero? _hash)\n                     (set! _hash (hash-datom d))\n                     _hash))\n        IEquiv\n        (-equiv [d o] (and (instance? Datom o) (equiv-datom d o)))\n\n        ISeqable\n        (-seq [d] (seq-datom d))\n\n        ILookup\n        (-lookup [d k] (val-at-datom d k nil))\n        (-lookup [d k nf] (val-at-datom d k nf))\n\n        IIndexed\n        (-nth [this i] (nth-datom this i))\n        (-nth [this i not-found] (nth-datom this i not-found))\n        \n        IAssociative\n        (-assoc [d k v] (assoc-datom d k v))\n\n        IPrintWithWriter\n        (-pr-writer [d writer opts]\n                    (pr-sequential-writer writer pr-writer\n                                          \"#datascript/Datom [\" \" \" \"]\"\n                                          opts [(.-e d) (.-a d) (.-v d) (datom-tx d) (datom-added d)]))]\n      :clj\n       [Object\n        (hashCode [d]\n          (if (zero? _hash)\n            (let [h (int (hash-datom d))]\n              (set! _hash h)\n              h)\n            _hash))\n        (toString [d] (pr-str d))\n\n        clojure.lang.IHashEq\n        (hasheq [d] (.hashCode d))\n\n        clojure.lang.Seqable\n        (seq [d] (seq-datom d))\n\n        clojure.lang.IPersistentCollection\n        (equiv [d o] (and (instance? Datom o) (equiv-datom d o)))\n        (empty [d] (throw (UnsupportedOperationException. \"empty is not supported on Datom\")))\n        (count [d] 5)\n        (cons [d [k v]] (assoc-datom d k v))\n        \n        clojure.lang.Indexed\n        (nth [this i]           (nth-datom this i))\n        (nth [this i not-found] (nth-datom this i not-found))\n\n        clojure.lang.ILookup\n        (valAt [d k] (val-at-datom d k nil))\n        (valAt [d k nf] (val-at-datom d k nf))\n\n        clojure.lang.Associative\n        (entryAt [d k] (some->> (val-at-datom d k nil) (clojure.lang.MapEntry k)))\n        (containsKey [e k] (#{:e :a :v :tx :added} k))\n        (assoc [d k v] (assoc-datom d k v))]\n))\n\n#?(:cljs (goog/exportSymbol \"datascript.db.Datom\" Datom))\n\n(defn ^Datom datom\n  ([e a v] (Datom. e a v tx0 0))\n  ([e a v tx] (Datom. e a v tx 0))\n  ([e a v tx added] (Datom. e a v (if added tx (- tx)) 0)))\n\n(defn datom? [x] (instance? Datom x))\n\n(defn- hash-datom [^Datom d]\n  (-> (hash (.-e d))\n      (combine-hashes (hash (.-a d)))\n      (combine-hashes (hash (.-v d)))))\n\n(defn- equiv-datom [^Datom d ^Datom o]\n  (and (== (.-e d) (.-e o))\n       (= (.-a d) (.-a o))\n       (= (.-v d) (.-v o))))\n\n(defn- seq-datom [^Datom d]\n  (list (.-e d) (.-a d) (.-v d) (datom-tx d) (datom-added d)))\n\n;; keep it fast by duplicating for both keyword and string cases\n;; instead of using sets or some other matching func\n(defn- val-at-datom [^Datom d k not-found]\n  (case k\n    :e      (.-e d) \"e\"     (.-e d)\n    :a      (.-a d) \"a\"     (.-a d)\n    :v      (.-v d) \"v\"     (.-v d)\n    :tx     (datom-tx d)\n    \"tx\"    (datom-tx d)\n    :added  (datom-added d)\n    \"added\" (datom-added d)\n    not-found))\n\n(defn- nth-datom\n  ([^Datom d ^long i]\n    (case i\n      0 (.-e d)\n      1 (.-a d)\n      2 (.-v d)\n      3 (datom-tx d)\n      4 (datom-added d)\n        #?(:clj  (throw (IndexOutOfBoundsException.))\n           :cljs (throw (js/Error. (str \"Datom/-nth: Index out of bounds: \" i))))))\n  ([^Datom d ^long i not-found]\n    (case i\n      0 (.-e d)\n      1 (.-a d)\n      2 (.-v d)\n      3 (datom-tx d)\n      4 (datom-added d)\n        not-found)))\n\n(defn- ^Datom assoc-datom [^Datom d k v]\n  (case k\n    :e     (datom v       (.-a d) (.-v d) (datom-tx d) (datom-added d))\n    :a     (datom (.-e d) v       (.-v d) (datom-tx d) (datom-added d))\n    :v     (datom (.-e d) (.-a d) v       (datom-tx d) (datom-added d))\n    :tx    (datom (.-e d) (.-a d) (.-v d) v            (datom-added d))\n    :added (datom (.-e d) (.-a d) (.-v d) (datom-tx d) v)\n    (throw (IllegalArgumentException. (str \"invalid key for #datascript/Datom: \" k)))))\n\n;; printing and reading\n;; #datomic/DB {:schema <map>, :datoms <vector of [e a v tx]>}\n\n(defn ^Datom datom-from-reader [vec]\n  (apply datom vec))\n\n#?(:clj\n   (defmethod print-method Datom [^Datom d, ^java.io.Writer w]\n     (.write w (str \"#datascript/Datom \"))\n     (binding [*out* w]\n       (pr [(.-e d) (.-a d) (.-v d) (datom-tx d) (datom-added d)]))))\n\n;; ----------------------------------------------------------------------------\n;; datom cmp macros/funcs\n;;\n\n#?(:clj\n  (defmacro combine-cmp [& comps]\n    (loop [comps (reverse comps)\n           res   (num 0)]\n      (if (not-empty comps)\n        (recur\n          (next comps)\n          `(let [c# ~(first comps)]\n             (if (== 0 c#)\n               ~res\n               c#)))\n        res))))\n\n#?(:clj\n   (defn- -case-tree [queries variants]\n     (if queries\n       (let [v1 (take (/ (count variants) 2) variants)\n             v2 (drop (/ (count variants) 2) variants)]\n         (list 'if (first queries)\n               (-case-tree (next queries) v1)\n               (-case-tree (next queries) v2)))\n       (first variants))))\n\n#?(:clj\n   (defmacro case-tree [qs vs]\n     (-case-tree qs vs)))\n\n(defn cmp [x y]\n  (if (nil? x) 0\n    (if (nil? y) 0\n      (compare x y))))\n\n(defn value-compare [x y]\n  (cond\n    (= x y) 0\n    #?@(:clj  [(instance? Number x)       (clojure.lang.Numbers/compare x y)])\n    #?@(:clj  [(instance? Comparable x)   (.compareTo ^Comparable x y)]\n        :cljs [(satisfies? IComparable x) (-compare x y)])\n    #?@(:cljs [(and (or (string? x) (array? x) (true? x) (false? x))\n                 (identical? (type x) (type y))) (garray/defaultCompare x y)])\n    :else (- (hash x) (hash y))))\n\n(defn value-cmp [x y]\n  (cond \n    (nil? x) 0\n    (nil? y) 0\n    :else     (value-compare x y)))\n\n;; Slower cmp-* fns allows for datom fields to be nil.\n;; Such datoms come from slice method where they are used as boundary markers.\n\n(defn cmp-datoms-eavt [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (cmp (.-a d1) (.-a d2))\n    (value-cmp (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n(defn cmp-datoms-aevt [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (cmp (.-a d1) (.-a d2))\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (value-cmp (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n(defn cmp-datoms-avet [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (cmp (.-a d1) (.-a d2))\n    (value-cmp (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n;; fast versions without nil checks\n\n(defn- cmp-attr-quick [a1 a2]\n  ;; either both are keywords or both are strings\n  #?(:cljs\n     (if (keyword? a1)\n       (-compare a1 a2)\n       (garray/defaultCompare a1 a2))\n     :clj\n     (.compareTo ^Comparable a1 a2)))\n\n(defn cmp-datoms-eav-quick [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (cmp-attr-quick (.-a d1) (.-a d2))\n    (value-compare (.-v d1) (.-v d2))))\n\n(defn cmp-datoms-eavt-quick [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (cmp-attr-quick (.-a d1) (.-a d2))\n    (value-compare (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n(defn cmp-datoms-aevt-quick [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (cmp-attr-quick (.-a d1) (.-a d2))\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (value-compare (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n(defn cmp-datoms-avet-quick [^Datom d1, ^Datom d2]\n  (combine-cmp\n    (cmp-attr-quick (.-a d1) (.-a d2))\n    (value-compare (.-v d1) (.-v d2))\n    (#?(:clj Integer/compare :cljs -) (.-e d1) (.-e d2))\n    (#?(:clj Integer/compare :cljs -) (datom-tx d1) (datom-tx d2))))\n\n(defn- diff-sorted [a b cmp]\n  (loop [only-a []\n         only-b []\n         both   []\n         a      a\n         b      b]\n    (cond\n      (empty? a) [(not-empty only-a) (not-empty (into only-b b)) (not-empty both)]\n      (empty? b) [(not-empty (into only-a a)) (not-empty only-b) (not-empty both)]\n      :else\n      (let [first-a (first a)\n            first-b (first b)\n            diff (cmp first-a first-b)]\n        (cond\n          (== diff 0) (recur only-a                only-b                (conj both first-a) (next a) (next b))\n          (< diff 0)  (recur (conj only-a first-a) only-b                both                (next a) b)\n          (> diff 0)  (recur only-a                (conj only-b first-b) both                a        (next b)))))))\n\n;; ----------------------------------------------------------------------------\n\n(declare hash-db hash-fdb equiv-db empty-db resolve-datom validate-attr components->pattern indexing?)\n#?(:cljs (declare pr-db))\n\n;;;;;;;;;; Searching\n\n(defprotocol ISearch\n  (-search [data pattern]))\n\n(defprotocol IIndexAccess\n  (-datoms [db index components])\n  (-seek-datoms [db index components])\n  (-rseek-datoms [db index components])\n  (-index-range [db attr start end]))\n\n(defn validate-indexed [db index components]\n  (when (= index :avet)\n    (when-some [attr (first components)]\n      (when-not (indexing? db attr)\n        (raise \"Attribute \" attr \" should be marked as :db/index true\"\n          {:error :index-access :index :avet :components components})))))\n\n(defprotocol IDB\n  (-schema [db])\n  (-attrs-by [db property]))\n\n;; ----------------------------------------------------------------------------\n\n(defn db-transient [db]\n  (-> db\n    (update :eavt transient)\n    (update :aevt transient)\n    (update :avet transient)))\n\n(defn db-persistent! [db]\n  (-> db\n    (update :eavt persistent!)\n    (update :aevt persistent!)\n    (update :avet persistent!)))\n\n(defrecord-updatable DB [schema eavt aevt avet max-eid max-tx rschema hash]\n  #?@(:cljs\n      [IHash                (-hash  [db]        (hash-db db))\n       IEquiv               (-equiv [db other]  (equiv-db db other))\n       ISeqable             (-seq   [db]        (-seq  (.-eavt db)))\n       IReversible          (-rseq  [db]        (-rseq (.-eavt db)))\n       ICounted             (-count [db]        (count (.-eavt db)))\n       IEmptyableCollection (-empty [db]        (with-meta (empty-db (.-schema db)) (meta db)))\n       IPrintWithWriter     (-pr-writer [db w opts] (pr-db db w opts))\n       IEditableCollection  (-as-transient [db] (db-transient db))\n       ITransientCollection (-conj! [db key] (throw (ex-info \"datascript.DB/conj! is not supported\" {})))\n                            (-persistent! [db] (db-persistent! db))]\n\n      :clj\n      [Object               (hashCode [db]      (hash-db db))\n       clojure.lang.IHashEq (hasheq [db]        (hash-db db))\n       clojure.lang.Seqable (seq [db]           (seq eavt))\n       clojure.lang.IPersistentCollection\n                            (count [db]         (count eavt))\n                            (equiv [db other]   (equiv-db db other))\n       clojure.lang.IEditableCollection \n                            (empty [db]         (with-meta (empty-db schema) (meta db)))\n                            (asTransient [db] (db-transient db))\n       clojure.lang.ITransientCollection\n                            (conj [db key] (throw (ex-info \"datascript.DB/conj! is not supported\" {})))\n                            (persistent [db] (db-persistent! db))])\n\n  IDB\n  (-schema [db] (.-schema db))\n  (-attrs-by [db property] ((.-rschema db) property))\n\n  ISearch\n  (-search [db pattern]\n    (let [[e a v tx] pattern\n          eavt       (.-eavt db)\n          aevt       (.-aevt db)\n          avet       (.-avet db)\n          multival?  (contains? (-attrs-by db :db.cardinality/many) a)]\n      (case-tree [e a (some? v) tx]\n        [(set/slice eavt (datom e a v tx) (datom e a v tx))                   ;; e a v tx\n         (set/slice eavt (datom e a v tx0) (datom e a v txmax))               ;; e a v _\n         (->> (set/slice eavt (datom e a nil tx0) (datom e a nil txmax))      ;; e a _ tx\n              (filter (fn [^Datom d] (= tx (datom-tx d)))))\n         (set/slice eavt (datom e a nil tx0) (datom e a nil txmax))           ;; e a _ _\n         (->> (set/slice eavt (datom e nil nil tx0) (datom e nil nil txmax))  ;; e _ v tx\n              (filter (fn [^Datom d] (and (= v (.-v d))\n                                          (= tx (datom-tx d))))))\n         (->> (set/slice eavt (datom e nil nil tx0) (datom e nil nil txmax))  ;; e _ v _\n              (filter (fn [^Datom d] (= v (.-v d)))))\n         (->> (set/slice eavt (datom e nil nil tx0) (datom e nil nil txmax))  ;; e _ _ tx\n              (filter (fn [^Datom d] (= tx (datom-tx d)))))\n         (set/slice eavt (datom e nil nil tx0) (datom e nil nil txmax))       ;; e _ _ _\n         (if (indexing? db a)                                                   ;; _ a v tx\n           (->> (set/slice avet (datom e0 a v tx0) (datom emax a v txmax))      \n                (filter (fn [^Datom d] (= tx (datom-tx d)))))\n           (->> (set/slice aevt (datom e0 a nil tx0) (datom emax a nil txmax))\n                (filter (fn [^Datom d] (and (= v (.-v d))\n                                            (= tx (datom-tx d)))))))\n         (if (indexing? db a)                                                   ;; _ a v _\n           (set/slice avet (datom e0 a v tx0) (datom emax a v txmax))\n           (->> (set/slice aevt (datom e0 a nil tx0) (datom emax a nil txmax))\n                (filter (fn [^Datom d] (= v (.-v d))))))\n         (->> (set/slice aevt (datom e0 a nil tx0) (datom emax a nil txmax))  ;; _ a _ tx\n              (filter (fn [^Datom d] (= tx (datom-tx d)))))\n         (set/slice aevt (datom e0 a nil tx0) (datom emax a nil txmax))       ;; _ a _ _\n         (filter (fn [^Datom d] (and (= v (.-v d))\n                                     (= tx (datom-tx d)))) eavt)                ;; _ _ v tx\n         (filter (fn [^Datom d] (= v (.-v d))) eavt)                            ;; _ _ v _\n         (filter (fn [^Datom d] (= tx (datom-tx d))) eavt)                      ;; _ _ _ tx\n         eavt])))                                                               ;; _ _ _ _\n\n  IIndexAccess\n  (-datoms [db index cs]\n    (validate-indexed db index cs)\n    (set/slice (get db index) (components->pattern db index cs e0 tx0) (components->pattern db index cs emax txmax)))\n\n  (-seek-datoms [db index cs]\n    (validate-indexed db index cs)\n    (set/slice (get db index) (components->pattern db index cs e0 tx0) (datom emax nil nil txmax)))\n\n  (-rseek-datoms [db index cs]\n    (validate-indexed db index cs)\n    (set/rslice (get db index) (components->pattern db index cs emax txmax) (datom e0 nil nil tx0)))\n\n  (-index-range [db attr start end]\n    (validate-indexed db :avet [attr])\n    (validate-attr attr (list '-index-range 'db attr start end))\n    (set/slice (.-avet db)\n      (resolve-datom db nil attr start nil e0 tx0)\n      (resolve-datom db nil attr end nil emax txmax)))\n                \n  clojure.data/EqualityPartition\n  (equality-partition [x] :datascript/db)\n\n  clojure.data/Diff\n  (diff-similar [a b]\n    (diff-sorted (:eavt a) (:eavt b) cmp-datoms-eav-quick)))\n\n(defn db? [x]\n  (and (satisfies? ISearch x)\n       (satisfies? IIndexAccess x)\n       (satisfies? IDB x)))\n\n;; ----------------------------------------------------------------------------\n(defrecord-updatable FilteredDB [unfiltered-db pred hash]\n  #?@(:cljs\n      [IHash                (-hash  [db]        (hash-fdb db))\n       IEquiv               (-equiv [db other]  (equiv-db db other))\n       ISeqable             (-seq   [db]        (seq (-datoms db :eavt [])))\n       ICounted             (-count [db]        (count (-datoms db :eavt [])))\n       IPrintWithWriter     (-pr-writer [db w opts] (pr-db db w opts))\n\n       IEmptyableCollection (-empty [_]         (throw (js/Error. \"-empty is not supported on FilteredDB\")))\n\n       ILookup              (-lookup ([_ _]     (throw (js/Error. \"-lookup is not supported on FilteredDB\")))\n                                     ([_ _ _]   (throw (js/Error. \"-lookup is not supported on FilteredDB\"))))\n\n\n       IAssociative         (-contains-key? [_ _] (throw (js/Error. \"-contains-key? is not supported on FilteredDB\")))\n                            (-assoc [_ _ _]       (throw (js/Error. \"-assoc is not supported on FilteredDB\")))]\n\n      :clj\n      [Object               (hashCode [db]      (hash-fdb db))\n\n       clojure.lang.IHashEq (hasheq [db]        (hash-fdb db))\n\n       clojure.lang.IPersistentCollection\n                            (count [db]         (count (-datoms db :eavt [])))\n                            (equiv [db o]       (equiv-db db o))\n                            (cons [db [k v]]    (throw (UnsupportedOperationException. \"cons is not supported on FilteredDB\")))\n                            (empty [db]         (throw (UnsupportedOperationException. \"empty is not supported on FilteredDB\")))\n\n       clojure.lang.Seqable (seq [db]           (seq (-datoms db :eavt [])))\n\n       clojure.lang.ILookup (valAt [db k]       (throw (UnsupportedOperationException. \"valAt/2 is not supported on FilteredDB\")))\n                            (valAt [db k nf]    (throw (UnsupportedOperationException. \"valAt/3 is not supported on FilteredDB\")))\n       clojure.lang.IKeywordLookup (getLookupThunk [db k]\n                                                (throw (UnsupportedOperationException. \"getLookupThunk is not supported on FilteredDB\")))\n\n       clojure.lang.Associative\n                            (containsKey [e k]  (throw (UnsupportedOperationException. \"containsKey is not supported on FilteredDB\")))\n                            (entryAt [db k]     (throw (UnsupportedOperationException. \"entryAt is not supported on FilteredDB\")))\n                            (assoc [db k v]     (throw (UnsupportedOperationException. \"assoc is not supported on FilteredDB\")))])\n\n  IDB\n  (-schema [db]\n    (-schema (.-unfiltered-db db)))\n\n  (-attrs-by [db property]\n    (-attrs-by (.-unfiltered-db db) property))\n\n  ISearch\n  (-search [db pattern]\n    (filter (.-pred db) (-search (.-unfiltered-db db) pattern)))\n\n  IIndexAccess\n  (-datoms [db index cs]\n    (filter (.-pred db) (-datoms (.-unfiltered-db db) index cs)))\n\n  (-seek-datoms [db index cs]\n    (filter (.-pred db) (-seek-datoms (.-unfiltered-db db) index cs)))\n\n  (-rseek-datoms [db index cs]\n    (filter (.-pred db) (-rseek-datoms (.-unfiltered-db db) index cs)))\n\n  (-index-range [db attr start end]\n    (filter (.-pred db) (-index-range (.-unfiltered-db db) attr start end))))\n\n;; ----------------------------------------------------------------------------\n\n(defn attr->properties [k v]\n  (case v\n    :db.unique/identity  [:db/unique :db.unique/identity :db/index]\n    :db.unique/value     [:db/unique :db.unique/value :db/index]\n    :db.cardinality/many [:db.cardinality/many]\n    :db.type/ref         [:db.type/ref :db/index]\n    (cond\n      (and (= :db/isComponent k) (true? v)) [:db/isComponent]\n      (and (= :db/index k) (true? v))       [:db/index]\n      (= :db/tupleAttrs k)                  [:db.type/tuple :db/index]\n      :else [])))\n\n(defn attr-tuples\n  \"e.g. :reg/semester => #{:reg/semester+course+student ...}\"\n  [schema rschema]\n  (reduce\n    (fn [m tuple-attr] ;; e.g. :reg/semester+course+student\n      (reduce-indexed\n        (fn [m src-attr idx] ;; e.g. :reg/semester\n          (update m src-attr assoc tuple-attr idx))\n        m\n        (-> schema tuple-attr :db/tupleAttrs)))\n    {}\n    (:db.type/tuple rschema)))\n\n(defn- rschema\n  \":db/unique           => #{attr ...}\n   :db.unique/identity  => #{attr ...}\n   :db.unique/value     => #{attr ...}\n   :db/index            => #{attr ...}\n   :db.cardinality/many => #{attr ...}\n   :db.type/ref         => #{attr ...}\n   :db/isComponent      => #{attr ...}\n   :db.type/tuple       => #{attr ...}\n   :db/attrTuples       => {attr => {tuple-attr => idx}}\"\n  [schema]\n  (let [rschema (reduce-kv\n                  (fn [rschema attr attr-schema]\n                    (reduce-kv\n                      (fn [rschema key value]\n                        (reduce\n                          (fn [rschema prop]\n                            (update rschema prop conjs attr))\n                          rschema (attr->properties key value)))\n                      rschema attr-schema))\n                  {} schema)]\n    (assoc rschema :db/attrTuples (attr-tuples schema rschema))))\n\n(defn- validate-schema-key [a k v expected]\n  (when-not (or (nil? v)\n                (contains? expected v))\n    (throw (ex-info (str \"Bad attribute specification for \" (pr-str {a {k v}}) \", expected one of \" expected)\n                    {:error :schema/validation\n                     :attribute a\n                     :key k\n                     :value v}))))\n\n(defn- validate-schema [schema]\n  (doseq [[a kv] schema]\n\n    ;; isComponent\n    (let [comp? (:db/isComponent kv false)]\n      (validate-schema-key a :db/isComponent (:db/isComponent kv) #{true false})\n      (when (and comp? (not= (:db/valueType kv) :db.type/ref))\n        (raise \"Bad attribute specification for \" a \": {:db/isComponent true} should also have {:db/valueType :db.type/ref}\"\n          {:error     :schema/validation\n           :attribute a\n           :key       :db/isComponent})))\n\n    (validate-schema-key a :db/unique (:db/unique kv) #{:db.unique/value :db.unique/identity})\n    (validate-schema-key a :db/valueType (:db/valueType kv) #{:db.type/ref})\n    (validate-schema-key a :db/cardinality (:db/cardinality kv) #{:db.cardinality/one :db.cardinality/many})\n\n    ;; :db/tupleAttrs is a non-empty sequential coll\n    (when (contains? kv :db/tupleAttrs)\n      (let [ex-data {:error :schema/validation\n                     :attribute a\n                     :key :db/tupleAttrs}]\n        (when (= :db.cardinality/many (:db/cardinality kv))\n          (raise a \" has :db/tupleAttrs, must be :db.cardinality/one\" ex-data))\n\n        (let [attrs (:db/tupleAttrs kv)]\n          (when-not (sequential? attrs)\n            (raise a \" :db/tupleAttrs must be a sequential collection, got: \" attrs ex-data))\n\n          (when (empty? attrs)\n            (raise a \" :db/tupleAttrs can\u2019t be empty\" ex-data))\n\n          (doseq [attr attrs\n                  :let [ex-data (assoc ex-data :value attr)]]\n            (when (contains? (get schema attr) :db/tupleAttrs)\n              (raise a \" :db/tupleAttrs can\u2019t depend on another tuple attribute: \" attr ex-data))\n\n            (when (= :db.cardinality/many (:db/cardinality (get schema attr)))\n              (raise a \" :db/tupleAttrs can\u2019t depend on :db.cardinality/many attribute: \" attr ex-data))))))))\n\n(defn ^DB empty-db\n  ([] (empty-db nil))\n  ([schema]\n    {:pre [(or (nil? schema) (map? schema))]}\n    (validate-schema schema)\n    (map->DB\n      {:schema  schema\n       :rschema (rschema (merge implicit-schema schema))\n       :eavt    (set/sorted-set-by cmp-datoms-eavt)\n       :aevt    (set/sorted-set-by cmp-datoms-aevt)\n       :avet    (set/sorted-set-by cmp-datoms-avet)\n       :max-eid e0\n       :max-tx  tx0\n       :hash    (atom 0)})))\n\n(defn- init-max-eid [eavt]\n  (or (-> (set/rslice eavt (datom (dec tx0) nil nil txmax) (datom e0 nil nil tx0))\n        (first)\n        (:e))\n    e0))\n\n(defn ^DB init-db\n  ([datoms] (init-db datoms nil))\n  ([datoms schema]\n    (when-some [not-datom (first (drop-while datom? datoms))]\n      (raise \"init-db expects list of Datoms, got \" (type not-datom)\n        {:error :init-db}))\n    (validate-schema schema)\n    (let [rschema     (rschema (merge implicit-schema schema))\n          indexed     (:db/index rschema)\n          arr         (cond-> datoms\n                        (not (arrays/array? datoms)) (arrays/into-array))\n          _           (arrays/asort arr cmp-datoms-eavt-quick)\n          eavt        (set/from-sorted-array cmp-datoms-eavt arr)\n          _           (arrays/asort arr cmp-datoms-aevt-quick)\n          aevt        (set/from-sorted-array cmp-datoms-aevt arr)\n          avet-datoms (filter (fn [^Datom d] (contains? indexed (.-a d))) datoms)\n          avet-arr    (to-array avet-datoms)\n          _           (arrays/asort avet-arr cmp-datoms-avet-quick)\n          avet        (set/from-sorted-array cmp-datoms-avet avet-arr)\n          max-eid     (init-max-eid eavt)\n          max-tx      (transduce (map (fn [^Datom d] (datom-tx d))) max tx0 eavt)]\n      (map->DB {\n        :schema  schema\n        :rschema rschema\n        :eavt    eavt\n        :aevt    aevt\n        :avet    avet\n        :max-eid max-eid\n        :max-tx  max-tx\n        :hash    (atom 0)}))))\n\n(defn- equiv-db-index [x y]\n  (loop [xs (seq x)\n         ys (seq y)]\n    (cond\n      (nil? xs) (nil? ys)\n      (= (first xs) (first ys)) (recur (next xs) (next ys))\n      :else false)))\n\n(defn- hash-db [^DB db]\n  (let [h @(.-hash db)]\n    (if (zero? h)\n      (reset! (.-hash db) (combine-hashes (hash (.-schema db))\n                                          (hash (.-eavt db))))\n      h)))\n\n(defn- hash-fdb [^FilteredDB db]\n  (let [h @(.-hash db)\n        datoms (or (-datoms db :eavt []) #{})]\n    (if (zero? h)\n      (let [datoms (or (-datoms db :eavt []) #{})]\n        (reset! (.-hash db) (combine-hashes (hash (-schema db))\n                                            (hash-unordered-coll datoms))))\n      h)))\n\n(defn- equiv-db [db other]\n  (and (or (instance? DB other) (instance? FilteredDB other))\n       (= (-schema db) (-schema other))\n       (equiv-db-index (-datoms db :eavt []) (-datoms other :eavt []))))\n\n#?(:cljs\n   (defn pr-db [db w opts]\n     (-write w \"#datascript/DB {\")\n     (-write w \":schema \")\n     (pr-writer (-schema db) w opts)\n     (-write w \", :datoms \")\n     (pr-sequential-writer w\n                           (fn [d w opts]\n                             (pr-sequential-writer w pr-writer \"[\" \" \" \"]\" opts [(.-e d) (.-a d) (.-v d) (datom-tx d)]))\n                           \"[\" \" \" \"]\" opts (-datoms db :eavt []))\n     (-write w \"}\")))\n\n#?(:clj\n   (do\n     (defn pr-db [db, ^java.io.Writer w]\n       (.write w (str \"#datascript/DB {\"))\n       (.write w \":schema \")\n       (binding [*out* w]\n         (pr (-schema db))\n         (.write w \", :datoms [\")\n         (apply pr (map (fn [^Datom d] [(.-e d) (.-a d) (.-v d) (datom-tx d)]) (-datoms db :eavt []))))\n       (.write w \"]}\"))\n\n     (defmethod print-method DB [db w] (pr-db db w))\n     (defmethod print-method FilteredDB [db w] (pr-db db w))     \n))\n\n(defn db-from-reader [{:keys [schema datoms]}]\n  (init-db (map (fn [[e a v tx]] (datom e a v tx)) datoms) schema))\n\n;; ----------------------------------------------------------------------------\n\n(declare entid-strict entid-some ref?)\n\n(defn- resolve-datom [db e a v t default-e default-tx]\n  (when a (validate-attr a (list 'resolve-datom 'db e a v t)))\n  (datom\n    (or (entid-some db e) default-e)  ;; e\n    a                                 ;; a\n    (if (and (some? v) (ref? db a))   ;; v\n      (entid-strict db v)\n      v)\n    (or (entid-some db t) default-tx))) ;; t\n\n(defn- components->pattern [db index [c0 c1 c2 c3] default-e default-tx]\n  (case index\n    :eavt (resolve-datom db c0 c1 c2 c3 default-e default-tx)\n    :aevt (resolve-datom db c1 c0 c2 c3 default-e default-tx)\n    :avet (resolve-datom db c2 c0 c1 c3 default-e default-tx)))\n\n;; ----------------------------------------------------------------------------\n\n(defrecord TxReport [db-before db-after tx-data tempids tx-meta])\n\n(defn #?@(:clj  [^Boolean is-attr?]\n          :cljs [^boolean is-attr?]) [db attr property]\n  (contains? (-attrs-by db property) attr))\n\n(defn #?@(:clj  [^Boolean multival?]\n          :cljs [^boolean multival?]) [db attr]\n  (is-attr? db attr :db.cardinality/many))\n\n(defn #?@(:clj  [^Boolean ref?]\n          :cljs [^boolean ref?]) [db attr]\n  (is-attr? db attr :db.type/ref))\n\n(defn #?@(:clj  [^Boolean component?]\n          :cljs [^boolean component?]) [db attr]\n  (is-attr? db attr :db/isComponent))\n\n(defn #?@(:clj  [^Boolean indexing?]\n          :cljs [^boolean indexing?]) [db attr]\n  (is-attr? db attr :db/index))\n\n(defn #?@(:clj  [^Boolean tuple?]\n          :cljs [^boolean tuple?]) [db attr]\n  (is-attr? db attr :db.type/tuple))\n\n(defn #?@(:clj  [^Boolean tuple-source?]\n          :cljs [^boolean tuple-source?]) [db attr]\n  (is-attr? db attr :db/attrTuples))\n\n(defn entid [db eid]\n  {:pre [(db? db)]}\n  (cond\n    (and (number? eid) (pos? eid))\n    (if (> eid emax)\n      (raise \"Highest supported entity id is \" emax \", got \" eid {:error :entity-id :value eid})\n      eid)\n    \n    (sequential? eid)\n    (let [[attr value] eid]\n      (cond\n        (not= (count eid) 2)\n          (raise \"Lookup ref should contain 2 elements: \" eid\n            {:error :lookup-ref/syntax, :entity-id eid})\n        (not (is-attr? db attr :db/unique))\n          (raise \"Lookup ref attribute should be marked as :db/unique: \" eid\n            {:error :lookup-ref/unique, :entity-id eid})\n        (nil? value)\n          nil\n        :else\n          (-> (-datoms db :avet eid) first :e)))\n    \n    #?@(:cljs [(array? eid) (recur db (array-seq eid))])\n    \n    (keyword? eid)\n    (-> (-datoms db :avet [:db/ident eid]) first :e)\n\n    :else\n    (raise \"Expected number or lookup ref for entity id, got \" eid\n      {:error :entity-id/syntax, :entity-id eid})))\n\n(defn entid-strict [db eid]\n  (or (entid db eid)\n      (raise \"Nothing found for entity id \" eid\n             {:error :entity-id/missing\n              :entity-id eid})))\n\n(defn entid-some [db eid]\n  (when eid\n    (entid-strict db eid)))\n\n;;;;;;;;;; Transacting\n\n(defn validate-datom [db ^Datom datom]\n  (when (and (datom-added datom)\n             (is-attr? db (.-a datom) :db/unique))\n    (when-some [found (not-empty (-datoms db :avet [(.-a datom) (.-v datom)]))]\n      (raise \"Cannot add \" datom \" because of unique constraint: \" found\n             {:error :transact/unique\n              :attribute (.-a datom)\n              :datom datom}))))\n\n(defn- validate-attr [attr at]\n  (when-not (or (keyword? attr) (string? attr))\n    (raise \"Bad entity attribute \" attr \" at \" at \", expected keyword or string\"\n           {:error :transact/syntax, :attribute attr, :context at})))\n\n(defn- validate-val [v at]\n  (when (nil? v)\n    (raise \"Cannot store nil as a value at \" at\n           {:error :transact/syntax, :value v, :context at})))\n\n(defn- current-tx [report]\n  (inc (get-in report [:db-before :max-tx])))\n\n(defn- next-eid [db]\n  (inc (:max-eid db)))\n\n(defn- #?@(:clj  [^Boolean tx-id?]\n           :cljs [^boolean tx-id?])\n  [e]\n  (or (= e :db/current-tx)\n      (= e \":db/current-tx\") ;; for datascript.js interop\n      (= e \"datomic.tx\")\n      (= e \"datascript.tx\")))\n\n(defn- #?@(:clj  [^Boolean tempid?]\n           :cljs [^boolean tempid?])\n  [x]\n  (or (and (number? x) (neg? x)) (string? x)))\n\n(defn- new-eid? [db eid]\n  (and (> eid (:max-eid db))\n       (< eid tx0))) ;; tx0 is max eid\n\n(defn- advance-max-eid [db eid]\n  (cond-> db\n    (new-eid? db eid)\n      (assoc :max-eid eid)))\n\n(defn- allocate-eid\n  ([report eid]\n    (update report :db-after advance-max-eid eid))\n  ([report e eid]\n    (cond-> report\n      (tx-id? e)\n      (update :tempids assoc e eid)\n\n      (tempid? e)\n      (update :tempids assoc e eid)\n\n      (and (not (tempid? e)) (new-eid? (:db-after report) eid))\n      (update :tempids assoc eid eid)\n\n      true\n      (update :db-after advance-max-eid eid))))\n\n;; In context of `with-datom` we can use faster comparators which\n;; do not check for nil (~10-15% performance gain in `transact`)\n\n(defn- with-datom [db ^Datom datom]\n  (validate-datom db datom)\n  (let [indexing? (indexing? db (.-a datom))]\n    (if (datom-added datom)\n      (cond-> db\n        true      (update :eavt set/conj datom cmp-datoms-eavt-quick)\n        true      (update :aevt set/conj datom cmp-datoms-aevt-quick)\n        indexing? (update :avet set/conj datom cmp-datoms-avet-quick)\n        true      (advance-max-eid (.-e datom))\n        true      (assoc :hash (atom 0)))\n      (if-some [removing (first (-search db [(.-e datom) (.-a datom) (.-v datom)]))]\n        (cond-> db\n          true      (update :eavt set/disj removing cmp-datoms-eavt-quick)\n          true      (update :aevt set/disj removing cmp-datoms-aevt-quick)\n          indexing? (update :avet set/disj removing cmp-datoms-avet-quick)\n          true      (assoc :hash (atom 0)))\n        db))))\n\n(defn- queue-tuple [queue tuple idx db e a v]\n  (let [tuple-value  (or (get queue tuple)\n                       (:v (first (-datoms db :eavt [e tuple])))\n                       (vec (repeat (-> db (-schema) (get tuple) :db/tupleAttrs count) nil)))\n        tuple-value' (assoc tuple-value idx v)]\n    (assoc queue tuple tuple-value')))\n\n(defn- queue-tuples [queue tuples db e a v]\n  (reduce-kv\n    (fn [queue tuple idx]\n      (queue-tuple queue tuple idx db e a v))\n    queue\n    tuples))\n\n(defn- transact-report [report datom]\n  (let [db      (:db-after report)\n        a       (:a datom)\n        report' (-> report\n                  (assoc :db-after (with-datom db datom))\n                  (update :tx-data conj datom))]\n    (if (tuple-source? db a)\n      (let [e      (:e datom)\n            v      (if (datom-added datom) (:v datom) nil)\n            queue  (or (-> report' ::queued-tuples (get e)) {})\n            tuples (get (-attrs-by db :db/attrTuples) a)\n            queue' (queue-tuples queue tuples db e a v)]\n        (update report' ::queued-tuples assoc e queue'))\n      report')))\n\n(defn #?@(:clj  [^Boolean reverse-ref?]\n          :cljs [^boolean reverse-ref?]) [attr]\n  (cond\n    (keyword? attr)\n    (= \\_ (nth (name attr) 0))\n    \n    (string? attr)\n    (boolean (re-matches #\"(?:([^/]+)/)?_([^/]+)\" attr))\n   \n    :else\n    (raise \"Bad attribute type: \" attr \", expected keyword or string\"\n           {:error :transact/syntax, :attribute attr})))\n\n(defn reverse-ref [attr]\n  (cond\n    (keyword? attr)\n    (if (reverse-ref? attr)\n      (keyword (namespace attr) (subs (name attr) 1))\n      (keyword (namespace attr) (str \"_\" (name attr))))\n\n   (string? attr)\n   (let [[_ ns name] (re-matches #\"(?:([^/]+)/)?([^/]+)\" attr)]\n     (if (= \\_ (nth name 0))\n       (if ns (str ns \"/\" (subs name 1)) (subs name 1))\n       (if ns (str ns \"/_\" name) (str \"_\" name))))\n   \n   :else\n    (raise \"Bad attribute type: \" attr \", expected keyword or string\"\n           {:error :transact/syntax, :attribute attr})))\n\n(defn- resolve-upserts\n  \"Returns [entity' upserts]. Upsert attributes that resolve to existing entities\n   are removed from entity, rest are kept in entity for insertion. No validation is performed.\n\n   upserts :: {:name  {\\\"Ivan\\\"  1}\n               :email {\\\"ivan@\\\" 2}\n               :alias {\\\"abc\\\"   3\n                       \\\"def\\\"   4}}}\"\n  [db entity]\n  (if-some [idents (not-empty (-attrs-by db :db.unique/identity))]\n    (let [resolve (fn [a v]\n                    (:e (first (-datoms db :avet [a v]))))\n          split   (fn [a vs]\n                    (reduce\n                      (fn [acc v]\n                        (if-some [e (resolve a v)]\n                          (update acc 1 assoc v e)\n                          (update acc 0 conj v)))\n                      [[] {}] vs))]\n      (reduce-kv\n        (fn [[entity upserts] a v]\n          (cond\n            (not (contains? idents a))\n            [(assoc entity a v) upserts]\n\n            (and\n              (multival? db a)\n              (or\n                (arrays/array? v)\n                (and (coll? v) (not (map? v)))))\n            (let [[insert upsert] (split a v)]\n              [(cond-> entity\n                 (not (empty? insert)) (assoc a insert))\n               (cond-> upserts\n                 (not (empty? upsert)) (assoc a upsert))])\n\n            :else\n            (if-some [e (resolve a v)]\n              [entity (assoc upserts a {v e})]\n              [(assoc entity a v) upserts])))\n        [{} {}]\n        entity))\n    [entity nil]))\n\n(defn validate-upserts\n  \"Throws if not all upserts point to the same entity. \n   Returns single eid that all upserts point to, or null.\"\n  [entity upserts]\n  (let [upsert-ids (reduce-kv\n                     (fn [m a v->e]\n                       (reduce-kv\n                         (fn [m v e]\n                           (assoc m e [a v]))\n                         m v->e))\n                     {} upserts)]\n    (if (<= 2 (count upsert-ids))\n      (let [[e1 [a1 v1]] (first upsert-ids)\n            [e2 [a2 v2]] (second upsert-ids)]\n        (raise \"Conflicting upserts: \" [a1 v1] \" resolves to \" e1 \", but \" [a2 v2] \" resolves to \" e2\n          {:error     :transact/upsert\n           :assertion [e1 a1 v1]\n           :conflict  [e2 a2 v2]}))\n      (let [[upsert-id [a v]] (first upsert-ids)\n            eid (:db/id entity)]\n        (when (and\n                (some? upsert-id)\n                (some? eid)\n                (not (tempid? eid))\n                (not= upsert-id eid))\n          (raise \"Conflicting upsert: \" [a v] \" resolves to \" upsert-id \", but entity already has :db/id \" eid\n            {:error     :transact/upsert\n             :assertion [upsert-id a v]\n             :conflict  {:db/id eid}}))\n        upsert-id))))\n\n;; multivals/reverse can be specified as coll or as a single value, trying to guess\n(defn- maybe-wrap-multival [db a vs]\n  (cond\n    ;; not a multival context\n    (not (or (reverse-ref? a)\n             (multival? db a)))\n    [vs]\n\n    ;; not a collection at all, so definitely a single value\n    (not (or (arrays/array? vs)\n             (and (coll? vs) (not (map? vs)))))\n    [vs]\n    \n    ;; probably lookup ref\n    (and (= (count vs) 2)\n         (is-attr? db (first vs) :db.unique/identity))\n    [vs]\n    \n    :else vs))\n\n(defn- explode [db entity]\n  (let [eid (:db/id entity)]\n    (for [[a vs] entity\n          :when  (not= a :db/id)\n          :let   [_          (validate-attr a {:db/id eid, a vs})\n                  reverse?   (reverse-ref? a)\n                  straight-a (if reverse? (reverse-ref a) a)\n                  _          (when (and reverse? (not (ref? db straight-a)))\n                               (raise \"Bad attribute \" a \": reverse attribute name requires {:db/valueType :db.type/ref} in schema\"\n                                      {:error :transact/syntax, :attribute a, :context {:db/id eid, a vs}}))]\n          v      (maybe-wrap-multival db a vs)]\n      (if (and (ref? db straight-a) (map? v)) ;; another entity specified as nested map\n        (assoc v (reverse-ref a) eid)\n        (if reverse?\n          [:db/add v   straight-a eid]\n          [:db/add eid straight-a v])))))\n\n(defn- transact-add [report [_ e a v tx :as ent]]\n  (validate-attr a ent)\n  (validate-val  v ent)\n  (let [tx        (or tx (current-tx report))\n        db        (:db-after report)\n        e         (entid-strict db e)\n        v         (if (ref? db a) (entid-strict db v) v)\n        new-datom (datom e a v tx)]\n    (if (multival? db a)\n      (if (empty? (-search db [e a v]))\n        (transact-report report new-datom)\n        report)\n      (if-some [^Datom old-datom (first (-search db [e a]))]\n        (if (= (.-v old-datom) v)\n          report\n          (-> report\n            (transact-report (datom e a (.-v old-datom) tx false))\n            (transact-report new-datom)))\n        (transact-report report new-datom)))))\n\n(defn- transact-retract-datom [report ^Datom d]\n  (let [tx (current-tx report)]\n    (transact-report report (datom (.-e d) (.-a d) (.-v d) tx false))))\n\n(defn- retract-components [db datoms]\n  (into #{} (comp\n              (filter (fn [^Datom d] (component? db (.-a d))))\n              (map (fn [^Datom d] [:db.fn/retractEntity (.-v d)]))) datoms))\n\n(declare transact-tx-data)\n\n(defn- retry-with-tempid [initial-report report es tempid upserted-eid]\n  (if (contains? (:tempids initial-report) tempid)\n    (raise \"Conflicting upsert: \" tempid \" resolves\"\n           \" both to \" upserted-eid \" and \" (get-in initial-report [:tempids tempid])\n      { :error :transact/upsert })\n    ;; try to re-run from the beginning\n    ;; but remembering that `tempid` will resolve to `upserted-eid`\n    (let [tempids' (-> (:tempids report)\n                     (assoc tempid upserted-eid))\n          report'  (assoc initial-report :tempids tempids')]\n      (transact-tx-data report' es))))\n\n(def builtin-fn?\n  #{:db.fn/call\n    :db.fn/cas\n    :db/cas\n    :db/add\n    :db/retract\n    :db.fn/retractAttribute\n    :db.fn/retractEntity\n    :db/retractEntity})\n\n(defn flush-tuples [report]\n  (let [db          (:db-after report)\n        schema      (-schema db)\n        attr-tuples (-attrs-by db :db/attrTuples)]\n    (reduce-kv\n      (fn [entities eid tuples+values]\n        (reduce-kv\n          (fn [entities tuple value]\n            (let [value   (if (every? nil? value) nil value)\n                  current (:v (first (-datoms db :eavt [eid tuple])))]\n              (cond\n                (= value current) entities\n                (nil? value)      (conj entities ^::internal [:db/retract eid tuple current])\n                :else             (conj entities ^::internal [:db/add eid tuple value]))))\n          entities\n          tuples+values))\n      []\n      (::queued-tuples report))))\n\n(defn check-value-tempids [report]\n  (let [all-tempids (::value-tempids report)\n        reduce-fn   (fn [tempids datom]\n                      (if (datom-added datom)\n                        (dissoc tempids (:e datom))\n                        tempids))\n        unused      (reduce reduce-fn all-tempids (:tx-data report))]\n    (if (empty? unused)\n      (dissoc report ::value-tempids)\n      (raise \"Tempids used only as value in transaction: \" (sort (vals unused))\n        {:error :transact/syntax, :tempids unused}))))\n\n(defn transact-tx-data [initial-report initial-es]\n  (when-not (or (nil? initial-es)\n                (sequential? initial-es))\n    (raise \"Bad transaction data \" initial-es \", expected sequential collection\"\n           {:error :transact/syntax, :tx-data initial-es}))\n  (let [initial-report' (-> initial-report\n                          (update :db-after transient))\n        has-tuples?     (not (empty? (-attrs-by (:db-after initial-report) :db.type/tuple)))\n        initial-es'     (if has-tuples?\n                          (interleave initial-es (repeat ::flush-tuples))\n                          initial-es)]\n    (loop [report initial-report'\n           es     initial-es']\n      (cond+\n        (empty? es)\n        (-> report\n          (check-value-tempids)\n          (update :tempids assoc :db/current-tx (current-tx report))\n          (update :db-after update :max-tx inc)\n          (update :db-after persistent!))\n\n        :let [[entity & entities] es]\n\n        (nil? entity)\n        (recur report entities)\n\n        (= ::flush-tuples entity)\n        (if (contains? report ::queued-tuples)\n          (recur\n            (dissoc report ::queued-tuples)\n            (concat (flush-tuples report) entities))\n          (recur report entities))\n\n        :let [db      (:db-after report)\n              tempids (:tempids report)]\n\n        (map? entity)\n        (let [old-eid (:db/id entity)]\n          (cond+\n            ;; trivial entity\n            ; (if (contains? entity :db/id)\n            ;   (= 1 (count entity))\n            ;   (= 0 (count entity)))\n            ; (recur report entities)\n\n            ;; :db/current-tx / \"datomic.tx\" => tx\n            (tx-id? old-eid)\n            (let [id (current-tx report)]\n              (recur (allocate-eid report old-eid id)\n                     (cons (assoc entity :db/id id) entities)))\n           \n            ;; lookup-ref => resolved | error\n            (sequential? old-eid)\n            (let [id (entid-strict db old-eid)]\n              (recur report\n                     (cons (assoc entity :db/id id) entities)))\n           \n            ;; upserted => explode | error\n            :let [[entity' upserts] (resolve-upserts db entity)\n                  upserted-eid      (validate-upserts entity' upserts)]\n\n            (some? upserted-eid)\n            (if (and (tempid? old-eid)\n                     (contains? tempids old-eid)\n                     (not= upserted-eid (get tempids old-eid)))\n              (retry-with-tempid initial-report report initial-es old-eid upserted-eid)\n              (recur (allocate-eid report old-eid upserted-eid)\n                     (concat (explode db (assoc entity' :db/id upserted-eid)) entities)))\n           \n            ;; resolved | allocated-tempid | tempid | nil => explode\n            (or (number? old-eid)\n                (nil?    old-eid)\n                (string? old-eid))\n            (let [new-eid (cond\n                            (nil? old-eid)    (next-eid db)\n                            (tempid? old-eid) (or (get tempids old-eid) (next-eid db))\n                            :else             old-eid)\n                  new-entity (assoc entity :db/id new-eid)]                \n              (recur (allocate-eid report old-eid new-eid)\n                     (concat (explode db new-entity) entities)))\n           \n            ;; trash => error\n            :else\n            (raise \"Expected number, string or lookup ref for :db/id, got \" old-eid\n              { :error :entity-id/syntax, :entity entity })))\n\n        (sequential? entity)\n        (let [[op e a v] entity]\n          (cond\n            (= op :db.fn/call)\n            (let [[_ f & args] entity]\n              (recur report (concat (apply f db args) entities)))\n            \n            (and (keyword? op)\n              (not (builtin-fn? op)))\n            (if-some [ident (entid db op)]\n              (let [fun  (-> (-search db [ident :db/fn]) first :v)\n                    args (next entity)]\n                (if (fn? fun)\n                  (recur report (concat (apply fun db args) entities))\n                  (raise \"Entity \" op \" expected to have :db/fn attribute with fn? value\"\n                         {:error :transact/syntax, :operation :db.fn/call, :tx-data entity})))\n              (raise \"Can\u2019t find entity for transaction fn \" op\n                     {:error :transact/syntax, :operation :db.fn/call, :tx-data entity}))\n            \n            (and (tempid? e)\n              (not= op :db/add))\n            (raise \"Can't use tempid in '\" entity \"'. Tempids are allowed in :db/add only\"\n              { :error :transact/syntax, :op entity })\n\n            (or (= op :db.fn/cas)\n              (= op :db/cas))\n            (let [[_ e a ov nv] entity\n                  e (entid-strict db e)\n                  _ (validate-attr a entity)\n                  ov (if (ref? db a) (entid-strict db ov) ov)\n                  nv (if (ref? db a) (entid-strict db nv) nv)\n                  _ (validate-val nv entity)\n                  datoms (vec (-search db [e a]))]\n              (if (multival? db a)\n                (if (some (fn [^Datom d] (= (.-v d) ov)) datoms)\n                  (recur (transact-add report [:db/add e a nv]) entities)\n                  (raise \":db.fn/cas failed on datom [\" e \" \" a \" \" (map :v datoms) \"], expected \" ov\n                         {:error :transact/cas, :old datoms, :expected ov, :new nv}))\n                (let [v (:v (first datoms))]\n                  (if (= v ov)\n                    (recur (transact-add report [:db/add e a nv]) entities)\n                    (raise \":db.fn/cas failed on datom [\" e \" \" a \" \" v \"], expected \" ov\n                           {:error :transact/cas, :old (first datoms), :expected ov, :new nv })))))\n\n            (tx-id? e)\n            (recur (allocate-eid report e (current-tx report)) (cons [op (current-tx report) a v] entities))\n\n            (and (ref? db a) (tx-id? v))\n            (recur (allocate-eid report v (current-tx report)) (cons [op e a (current-tx report)] entities))\n\n            (and (ref? db a) (tempid? v))\n            (if-some [resolved (get tempids v)]\n              (let [report' (update report ::value-tempids assoc resolved v)]\n                (recur report' (cons [op e a resolved] entities)))\n              (let [resolved (next-eid db)\n                    report'  (-> report\n                               (allocate-eid v resolved)\n                               (update ::value-tempids assoc resolved v))]\n                (recur report' es)))\n\n            (tempid? e)\n            (let [upserted-eid  (when (is-attr? db a :db.unique/identity)\n                                  (:e (first (-datoms db :avet [a v]))))\n                  allocated-eid (get tempids e)]\n              (if (and upserted-eid allocated-eid (not= upserted-eid allocated-eid))\n                (retry-with-tempid initial-report report initial-es e upserted-eid)\n                (let [eid (or upserted-eid allocated-eid (next-eid db))]\n                  (recur (allocate-eid report e eid) (cons [op eid a v] entities)))))\n\n            (and (not (::internal (meta entity)))\n              (tuple? db a))\n            (raise \"Can\u2019t modify tuple attrs directly: \" entity\n              {:error :transact/syntax, :tx-data entity})\n\n\n            (= op :db/add)\n            (recur (transact-add report entity) entities)\n\n            (and (= op :db/retract) (some? v))\n            (if-some [e (entid db e)]\n              (let [v (if (ref? db a) (entid-strict db v) v)]\n                (validate-attr a entity)\n                (validate-val v entity)\n                (if-some [old-datom (first (-search db [e a v]))]\n                  (recur (transact-retract-datom report old-datom) entities)\n                  (recur report entities)))\n              (recur report entities))\n\n            (or (= op :db.fn/retractAttribute)\n                (= op :db/retract))\n            (if-some [e (entid db e)]\n              (let [_      (validate-attr a entity)\n                    datoms (vec (-search db [e a]))]\n                (recur (reduce transact-retract-datom report datoms)\n                       (concat (retract-components db datoms) entities)))\n              (recur report entities))\n\n            (or (= op :db.fn/retractEntity)\n                (= op :db/retractEntity))\n            (if-some [e (entid db e)]\n              (let [e-datoms (vec (-search db [e]))\n                    v-datoms (vec (mapcat (fn [a] (-search db [nil a e])) (-attrs-by db :db.type/ref)))]\n                (recur (reduce transact-retract-datom report (concat e-datoms v-datoms))\n                       (concat (retract-components db e-datoms) entities)))\n              (recur report entities))\n\n           :else\n           (raise \"Unknown operation at \" entity \", expected :db/add, :db/retract, :db.fn/call, :db.fn/retractAttribute, :db.fn/retractEntity or an ident corresponding to an installed transaction function (e.g. {:db/ident <keyword> :db/fn <Ifn>}, usage of :db/ident requires {:db/unique :db.unique/identity} in schema)\" {:error :transact/syntax, :operation op, :tx-data entity})))\n       \n       (datom? entity)\n       (let [[e a v tx added] entity]\n         (if added\n           (recur (transact-add report [:db/add e a v tx]) entities)\n           (recur report (cons [:db/retract e a v] entities))))\n\n       :else\n       (raise \"Bad entity type at \" entity \", expected map or vector\"\n              {:error :transact/syntax, :tx-data entity})))))\n"]}