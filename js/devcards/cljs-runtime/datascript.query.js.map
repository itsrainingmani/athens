{"version":3,"sources":["datascript/query.cljc"],"mappings":"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","names":["datascript.query/lru-cache-size","this__4439__auto__","k__4440__auto__","this__4441__auto__","k30763","else__4442__auto__","G__30768","cljs.core/Keyword","rels","sources","rules","cljs.core.get.cljs$core$IFn$_invoke$arity$3","__extmap","this__4458__auto__","f__4459__auto__","init__4460__auto__","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","ret__4461__auto__","p__30769","vec__30770","k__4462__auto__","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","v__4463__auto__","this__4453__auto__","writer__4454__auto__","opts__4455__auto__","pr-pair__4456__auto__","keyval__4457__auto__","cljs.core/pr-sequential-writer","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","cljs.core/PersistentVector","G__30762","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4437__auto__","__meta","this__4434__auto__","__hash","this__4443__auto__","cljs.core/count","this__4435__auto__","h__4297__auto__","fexpr__30773","coll__4436__auto__","cljs.core/hash-unordered-coll","this30764","other30765","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","this__4448__auto__","k__4449__auto__","cljs.core/contains?","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$2","cljs.core/-with-meta","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/not-empty","this__4446__auto__","k__4447__auto__","pred__30775","cljs.core/keyword-identical?","expr__30776","G__30778","G__30779","G__30780","G__30781","G__30782","G__30783","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","this__4451__auto__","cljs.core/seq","cljs.core/MapEntry","this__4438__auto__","this__4444__auto__","entry__4445__auto__","cljs.core/vector?","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/-conj","datascript.query/Context","this__4482__auto__","cljs.core/List","writer__4483__auto__","cljs.core/-write","G__30767","extmap__4478__auto__","G__30784","cljs.core.dissoc.cljs$core$IFn$_invoke$arity$variadic","cljs.core/record?","datascript.query/->Context","datascript.query/map->Context","k30786","G__30790","attrs","tuples","p__30791","vec__30792","G__30785","fexpr__30796","this30787","other30788","pred__30797","expr__30798","G__30800","G__30801","G__30802","G__30803","datascript.query/Relation","G__30789","G__30804","datascript.query/->Relation","datascript.query/map->Relation","datascript.query/single","coll","js/Error","cljs.core/next","cljs.core/first","datascript.query/intersect-keys","attrs1","attrs2","clojure.set.intersection.cljs$core$IFn$_invoke$arity$2","cljs.core/set","cljs.core/keys","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","datascript.query/concatv","seq30805","self__4777__auto__","xs","cljs.core.into.cljs$core$IFn$_invoke$arity$3","cljs.core/cat","G__30811","datascript.query/zip","args-arr__4810__auto__","argseq__4811__auto__","seq30808","G__30809","G__30810","self__4776__auto__","a","b","cljs.core.mapv.cljs$core$IFn$_invoke$arity$3","cljs.core/vector","rest","cljs.core.apply.cljs$core$IFn$_invoke$arity$5","cljs.core/mapv","datascript.query/same-keys?","p1__30812#","cljs.core/every?","p1__30813#","datascript.query/looks-like?","pattern","form","cljs.core/sequential?","cljs.core/Symbol","cljs.core/last","p__30818","vec__30819","pattern-el","form-el","cljs.core.map.cljs$core$IFn$_invoke$arity$3","cljs.core/butlast","p__30827","vec__30828","datascript.query/source?","sym","cljs.core/name","datascript.query/free-var?","datascript.query/attr?","datascript.query/lookup-ref?","datascript.query/join-tuples","t1","idxs1","t2","idxs2","l1","l2","res","me.tonsky.persistent-sorted-set.arrays/make-array","n__4666__auto__","i","datascript.query/sum-rel","map__30831","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__30832","attrs-a","tuples-a","attrs-b","tuples-b","cljs.core/vec","cljs.core.ex_info.cljs$core$IFn$_invoke$arity$2","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","cljs.core/number?","cljs.core/vals","idxb->idxa","iter__4582__auto__","s__30837","cljs.core/LazySeq","temp__5735__auto__","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","b__30839","cljs.core/chunk-buffer","i__30838","vec__30840","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__30836","cljs.core/chunk-rest","vec__30843","cljs.core/cons","cljs.core/rest","idx-b","tlen","cljs.core.reduce.cljs$core$IFn$_invoke$arity$2","cljs.core/max","tuples'","cljs.core/persistent!","acc","tuple-b","tuple'","seq__30846","chunk__30847","count__30848","i__30849","vec__30857","c__4609__auto__","cljs.core/chunk-first","vec__30860","idx-a","cljs.core.conj_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core/transient","all-attrs","cljs.core/zipmap","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","cljs.core.range.cljs$core$IFn$_invoke$arity$0","G__30865","G__30866","G__30863","G__30864","G__30868","datascript.query/prod-rel","rel1","rel2","cljs.core/to-array","cljs.core.map.cljs$core$IFn$_invoke$arity$2","datascript.query/-differ?","seq30869","l","cljs.core.not_EQ_.cljs$core$IFn$_invoke$arity$2","cljs.core.take.cljs$core$IFn$_invoke$arity$2","cljs.core.drop.cljs$core$IFn$_invoke$arity$2","datascript.query/-get-else","db","e","else-val","temp__5737__auto__","datom","datascript.db/-search","datascript.query/-get-some","seq30871","G__30872","G__30873","as","_","temp__5739__auto__","cljs.core/reduced","datascript.query/-missing?","datascript.impl.entity/entity","datascript.query/and-fn","seq30874","args","datascript.query/or-fn","seq30875","cljs.core//","datascript.query/built-ins","cljs.core/=","cljs.core/==","cljs.core/not=","cljs.core/<","cljs.core/>","cljs.core/<=","cljs.core/>=","cljs.core/+","cljs.core/-","cljs.core/*","cljs.core/quot","cljs.core/rem","cljs.core/mod","cljs.core/inc","cljs.core/dec","cljs.core/min","cljs.core/zero?","cljs.core/pos?","cljs.core/neg?","cljs.core/even?","cljs.core/odd?","cljs.core/compare","cljs.core/rand","cljs.core/rand-int","cljs.core/true?","cljs.core/false?","cljs.core/nil?","cljs.core/some?","cljs.core/not","cljs.core/complement","cljs.core/identical?","cljs.core/identity","cljs.core/keyword","cljs.core/meta","cljs.core/namespace","cljs.core/type","cljs.core/list","cljs.core/array-map","cljs.core/range","cljs.core/empty?","cljs.core/str","cljs.core/pr-str","cljs.core/print-str","cljs.core/println-str","cljs.core/prn-str","cljs.core/subs","cljs.core/re-find","cljs.core/re-matches","cljs.core/re-seq","cljs.core/re-pattern","clojure.string/blank?","clojure.string/includes?","clojure.string/starts-with?","clojure.string/ends-with?","datascript.query/built-in-aggregates","sum","terms","cljs.core.sort.cljs$core$IFn$_invoke$arity$1","size","med","G__30882","cljs.core.nth.cljs$core$IFn$_invoke$arity$2","mean","avg","s__30884","b__30886","i__30885","iter__30883","x","delta","js/Math.sqrt","variance","median","stddev","n","cljs.core.sort.cljs$core$IFn$_invoke$arity$2","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","cljs.core/rand-nth","cljs.core.repeatedly.cljs$core$IFn$_invoke$arity$2","cljs.core/shuffle","cljs.core.distinct.cljs$core$IFn$_invoke$arity$1","datascript.query/parse-rules","cljs.reader.read_string.cljs$core$IFn$_invoke$arity$1","datascript.parser/parse-rules","cljs.core/group-by","cljs.core/ffirst","datascript.query/empty-rel","binding","vars","datascript.parser/collect-vars-distinct","x__4487__auto__","m__4488__auto__","datascript.query/in->rel","goog/typeOf","m__4485__auto__","cljs.core/missing-protocol","datascript.query/IBinding","value","datascript.parser/BindIgnore","datascript.query.prod_rel.cljs$core$IFn$_invoke$arity$0","datascript.parser/BindScalar","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","cljs.core.into_array.cljs$core$IFn$_invoke$arity$1","datascript.parser/BindColl","datascript.db/seqable?","datascript.parser/source","p1__30888#","datascript.parser/BindTuple","p1__30889#","p2__30890#","p__30892","vec__30893","datascript.query/resolve-in","context","datascript.parser/SrcVar","cljs.core.update.cljs$core$IFn$_invoke$arity$5","cljs.core/assoc","datascript.parser/RulesVar","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","datascript.query/resolve-ins","bindings","values","cb","cv","p1__30896#","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","p1__30897#","datascript.query/*lookup-attrs*","datascript.query/*implicit-source*","datascript.query/getter-fn","attr","idx","tuple","eid","datascript.db/entid","me.tonsky.persistent-sorted-set.arrays/array?","datascript.query/tuple-key-fn","getters","cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$1","p1__30898#","datascript.query/hash-attrs","key-fn","hash-table","key","cljs.core.assoc_BANG_.cljs$core$IFn$_invoke$arity$3","datascript.query/hash-join","tuples1","tuples2","common-attrs","common-gtrs1","p1__30900#","common-gtrs2","p1__30901#","keep-attrs1","keep-attrs2","clojure.set.difference.cljs$core$IFn$_invoke$arity$2","keep-idxs1","keep-idxs2","key-fn1","hash","key-fn2","new-tuples","tuple2","tuple1","datascript.query/subtract-rel","map__30906","map__30907","getters-b","p1__30903#","key-fn-b","getters-a","p1__30904#","key-fn-a","p1__30905#","cljs.core/filterv","G__30910","datascript.query/lookup-pattern-db","search-pattern","p1__30911#","datoms","attr->prop","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","p__30912","vec__30913","s","datascript.query/matches-pattern?","and__4174__auto__","t","p","datascript.query/lookup-pattern-coll","data","p1__30916#","attr->idx","p__30917","vec__30918","datascript.query/normalize-pattern-clause","clause","datascript.query/lookup-pattern","source","cljs.core/native-satisfies?","datascript.db/ISearch","datascript.query/collapse-rels","new-rel","rel","datascript.query/rel-with-attr","p1__30923#","cljs.core/some","datascript.query/context-resolve-val","fexpr__30924","datascript.query/rel-contains-attrs?","p1__30925#","datascript.query/rel-prod-by-attrs","p1__30926#","production","p1__30927#","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core.remove.cljs$core$IFn$_invoke$arity$2","datascript.query/-call-fn","f","len","static-args","tuples-args","arg","me.tonsky.persistent-sorted-set.arrays/aclone","tuple-idx","v","datascript.query/resolve-sym","datascript.query/filter-by-pred","vec__30929","vec__30932","seq__30933","first__30934","vec__30935","pred","or__4185__auto__","cljs.core/symbol?","tuple-pred","p1__30928#","datascript.query/bind-by-fn","vec__30939","vec__30942","seq__30943","first__30944","vec__30945","out","datascript.parser/parse-binding","fun","tuple-fn","s__30949","b__30951","i__30950","iter__30948","val","datascript.query.prod_rel.cljs$core$IFn$_invoke$arity$2","datascript.query/rule?","head","cljs.core/second","datascript.query/rule-seqid","cljs.core.atom.cljs$core$IFn$_invoke$arity$1","datascript.query/expand-rule","used-args","vec__30953","seq__30954","first__30955","rule","call-args","seqid","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","branches","s__30957","b__30959","i__30958","vec__30960","seq__30961","first__30962","vec__30963","seq__30964","first__30965","iter__30956","vec__30966","seq__30967","first__30968","vec__30969","seq__30970","first__30971","branch","rule-args","clauses","replacements","p1__30952#","clojure.walk/postwalk","x__27147__auto__","cljs.core.symbol.cljs$core$IFn$_invoke$arity$1","datascript.query/remove-pairs","ys","pairs","p__30973","vec__30974","y","datascript.query/rule-gen-guards","rule-clause","vec__30977","seq__30978","first__30979","prev-call-args","s__30981","b__30983","i__30982","vec__30984","iter__30980","vec__30987","prev-args","cljs.core.concat.cljs$core$IFn$_invoke$arity$variadic","datascript.query/walk-collect","cljs.core/deref","p1__30990#","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$3","datascript.query/collect-vars","datascript.query/split-guards","guards","bound-vars","p__30991","vec__30992","vec__30995","seq__30996","first__30997","datascript.query/solve-rule","final-attrs","final-attrs-map","solve","prefix-context","datascript.query/-resolve-clause","empty-rels?","p1__30998#","stack","frame","vec__31018","vec__31021","seq__31022","first__31023","next-clauses","p1__30999#","cljs.core/split-with","datascript.query/-collect","vec__31024","seq__31025","first__31026","vec__31027","active-gs","pending-gs","p1__31000#","prefix-clauses","s__31031","b__31033","i__31032","iter__31030","datascript.query.concatv.cljs$core$IFn$_invoke$arity$variadic","datascript.query/resolve-pattern-lookup-refs","datascript.db/IDB","vec__31035","tx","datascript.db/entid-strict","datascript.db/ref?","cljs.core.subvec.cljs$core$IFn$_invoke$arity$3","datascript.query/dynamic-lookup-attrs","vec__31039","G__31042","datascript.query/limit-rel","attrs'","cljs.core/select-keys","datascript.query/limit-context","p1__31043#","cljs.core.keep.cljs$core$IFn$_invoke$arity$2","datascript.query/bound-vars","p1__31044#","cljs.core.mapcat.cljs$core$IFn$_invoke$arity$variadic","datascript.query/check-bound","bound","clojure.set/subset?","missing","datascript.query/check-free-same","free","p1__31045#","datascript.query/check-free-subset","seq__31046","chunk__31047","count__31048","i__31049","cljs.core.prn.cljs$core$IFn$_invoke$arity$variadic","G__31056","datascript.query._resolve_clause.cljs$core$IFn$_invoke$arity$3","orig-clause","pred__31057","expr__31058","G__31060","G__31061","G__31062","G__31063","G__31064","G__31065","G__31071","G__31072","G__31076","G__31077","G__31084","G__31085","G__31090","G__31091","G__31095","G__31096","G__31100","G__31101","G__31105","G__31106","cljs.core/nfirst","vec__31066","seq__31067","first__31068","source-sym","*implicit-source*-orig-val__31069","*implicit-source*-temp-val__31070","vec__31073","seq__31074","first__31075","contexts","p1__31051#","datascript.query/resolve-clause","p1__31052#","vec__31078","seq__31079","first__31080","vec__31081","seq__31082","first__31083","req-vars","cljs.core.list_STAR_.cljs$core$IFn$_invoke$arity$3","vec__31086","seq__31087","first__31088","join-context","p1__31053#","p1__31054#","sum-rel","vec__31092","seq__31093","first__31094","vec__31097","seq__31098","first__31099","negation-vars","context'","negation-context","negation","vec__31102","seq__31103","first__31104","relation","*lookup-attrs*-orig-val__31107","*lookup-attrs*-temp-val__31108","*implicit-source*-orig-val__31110","*implicit-source*-temp-val__31111","G__31112","G__31113","datascript.query._resolve_clause.cljs$core$IFn$_invoke$arity$2","datascript.query/-q","*implicit-source*-orig-val__31114","*implicit-source*-temp-val__31115","G__31118","symbols","datascript.query._collect.cljs$core$IFn$_invoke$arity$3","keep-attrs","copy-map","p1__31116#","s__31120","xs__6292__auto__","iterys__4578__auto__","s__31122","b__31124","i__31123","iter__31121","fs__4579__auto__","iter__31119","cljs.core/aclone","datascript.query/collect","datascript.query._collect.cljs$core$IFn$_invoke$arity$2","datascript.query/-context-resolve","datascript.query/IContextResolve","var","datascript.parser/Variable","datascript.parser/PlainSymbol","datascript.parser/Constant","datascript.query/-aggregate","find-elements","cljs.core.mapv.cljs$core$IFn$_invoke$arity$4","element","fixed-value","datascript.parser/aggregate?","p1__31126#","vals","p1__31127#","datascript.query/idxs-of","p1__31128#","p2__31129#","datascript.query/aggregate","resultset","group-idxs","group-fn","p1__31130#","grouped","s__31132","b__31134","i__31133","vec__31135","iter__31131","vec__31138","datascript.query/map*","p1__31141#","p2__31142#","cljs.core/empty","datascript.query/tuples->return-map","return-map","idxs","cljs.core.range.cljs$core$IFn$_invoke$arity$2","m","datascript.query/-post-process","datascript.query/IPostProcess","find","datascript.parser/FindRel","datascript.parser/FindColl","cljs.core.map.cljs$core$IFn$_invoke$arity$1","datascript.parser/FindScalar","datascript.parser/FindTuple","datascript.query/pull","resolved","s__31145","b__31147","i__31146","iter__31144","datascript.parser/pull?","datascript.pull-parser/parse-pull","s__31150","b__31152","i__31151","iter__31149","env","el","vec__31153","vec__31156","src","spec","datascript.pull-api/pull-spec","datascript.query/query-cache","cljs.core/volatile!","datascript.lru/lru","datascript.query/memoized-parse-query","q","cached","qp","datascript.parser/parse-query","datascript.query/q","seq31160","G__31161","inputs","parsed-q","datascript.parser/find-elements","find-vars","datascript.parser/find-vars","result-arity","with","all-vars","G__31162","datascript.parser/query->map","wheres","G__31163","p1__31159#"],"sourcesContent":["(ns ^:no-doc datascript.query\n  (:require\n   [#?(:cljs cljs.reader :clj clojure.edn) :as edn]\n   [clojure.set :as set]\n   [clojure.string :as str]\n   [clojure.walk :as walk]\n   [datascript.db :as db #?(:cljs :refer-macros :clj :refer) [raise cond+]]\n   [me.tonsky.persistent-sorted-set.arrays :as da]\n   [datascript.lru]\n   [datascript.impl.entity :as de]\n   [datascript.parser :as dp #?@(:cljs [:refer [BindColl BindIgnore BindScalar BindTuple Constant\n                                                FindColl FindRel FindScalar FindTuple PlainSymbol\n                                                RulesVar SrcVar Variable]])]\n   [datascript.pull-api :as dpa]\n   [datascript.pull-parser :as dpp])\n  #?(:clj (:import [datascript.parser BindColl BindIgnore BindScalar BindTuple\n                    Constant FindColl FindRel FindScalar FindTuple PlainSymbol\n                    RulesVar SrcVar Variable])))\n\n;; ----------------------------------------------------------------------------\n\n(def ^:const lru-cache-size 100)\n\n(declare -collect -resolve-clause resolve-clause)\n\n;; Records\n\n(defrecord Context [rels sources rules])\n\n;; attrs:\n;;    {?e 0, ?v 1} or {?e2 \"a\", ?age \"v\"}\n;; tuples:\n;;    [ #js [1 \"Ivan\" 5 14] ... ]\n;; or [ (Datom. 2 \"Oleg\" 1 55) ... ]\n(defrecord Relation [attrs tuples])\n\n\n;; Utilities\n\n(defn single [coll]\n  (assert (nil? (next coll)) \"Expected single element\")\n  (first coll))\n\n(defn intersect-keys [attrs1 attrs2]\n  (set/intersection (set (keys attrs1))\n                    (set (keys attrs2))))\n\n(defn concatv [& xs]\n  (into [] cat xs))\n\n(defn zip\n  ([a b] (mapv vector a b))\n  ([a b & rest] (apply mapv vector a b rest)))\n\n(defn same-keys? [a b]\n  (and (= (count a) (count b))\n       (every? #(contains? b %) (keys a))\n       (every? #(contains? b %) (keys a))))\n\n(defn- looks-like? [pattern form]\n  (cond\n    (= '_ pattern)\n      true\n    (= '[*] pattern)\n      (sequential? form)\n    (symbol? pattern)\n      (= form pattern)\n    (sequential? pattern)\n      (if (= (last pattern) '*)\n        (and (sequential? form)\n             (every? (fn [[pattern-el form-el]] (looks-like? pattern-el form-el))\n                     (map vector (butlast pattern) form)))\n        (and (sequential? form)\n             (= (count form) (count pattern))\n             (every? (fn [[pattern-el form-el]] (looks-like? pattern-el form-el))\n                     (map vector pattern form))))\n    :else ;; (predicate? pattern)\n      (pattern form)))\n\n(defn source? [sym]\n  (and (symbol? sym)\n       (= \\$ (first (name sym)))))\n\n(defn free-var? [sym]\n  (and (symbol? sym)\n       (= \\? (first (name sym)))))\n\n(defn attr? [form]\n  (or (keyword? form) (string? form)))\n\n(defn lookup-ref? [form]\n  (looks-like? [attr? '_] form))\n\n;; Relation algebra\n\n(defn join-tuples [t1 #?(:cljs idxs1\n                         :clj  ^{:tag \"[[Ljava.lang.Object;\"} idxs1)\n                   t2 #?(:cljs idxs2\n                         :clj  ^{:tag \"[[Ljava.lang.Object;\"} idxs2)]\n  (let [l1  (alength idxs1)\n        l2  (alength idxs2)\n        res (da/make-array (+ l1 l2))]\n    (dotimes [i l1]\n      (aset res i (#?(:cljs da/aget :clj get) t1 (aget idxs1 i)))) ;; FIXME aget\n    (dotimes [i l2]\n      (aset res (+ l1 i) (#?(:cljs da/aget :clj get) t2 (aget idxs2 i)))) ;; FIXME aget\n    res))\n\n(defn sum-rel [a b]\n  (let [{attrs-a :attrs, tuples-a :tuples} a\n        {attrs-b :attrs, tuples-b :tuples} b]\n    (cond\n      (= attrs-a attrs-b)\n      (Relation. attrs-a (into (vec tuples-a) tuples-b))\n\n      (not (same-keys? attrs-a attrs-b))\n      (raise \"Can\u2019t sum relations with different attrs: \" attrs-a \" and \" attrs-b\n             {:error :query/where})\n\n      (every? number? (vals attrs-a)) ;; can\u2019t conj into BTSetIter\n      (let [idxb->idxa (vec (for [[sym idx-b] attrs-b]\n                              [idx-b (attrs-a sym)]))\n            tlen    (->> (vals attrs-a) (reduce max) (inc)) \n            tuples' (persistent!\n                      (reduce\n                        (fn [acc tuple-b]\n                          (let [tuple' (da/make-array tlen)]\n                            (doseq [[idx-b idx-a] idxb->idxa]\n                              (aset tuple' idx-a (#?(:cljs da/aget :clj get) tuple-b idx-b)))\n                            (conj! acc tuple')))\n                        (transient (vec tuples-a))\n                        tuples-b))]\n        (Relation. attrs-a tuples'))\n\n      :else\n      (let [all-attrs (zipmap (keys (merge attrs-a attrs-b)) (range))]\n        (-> (Relation. all-attrs [])\n            (sum-rel a)\n            (sum-rel b))))))\n\n(defn prod-rel\n  ([] (Relation. {} [(da/make-array 0)]))\n  ([rel1 rel2]\n    (let [attrs1 (keys (:attrs rel1))\n          attrs2 (keys (:attrs rel2))\n          idxs1  (to-array (map (:attrs rel1) attrs1))\n          idxs2  (to-array (map (:attrs rel2) attrs2))]\n      (Relation.\n        (zipmap (concat attrs1 attrs2) (range))\n        (persistent!\n          (reduce\n            (fn [acc t1]\n              (reduce (fn [acc t2]\n                        (conj! acc (join-tuples t1 idxs1 t2 idxs2)))\n                      acc (:tuples rel2)))\n            (transient []) (:tuples rel1)))\n        ))))\n\n;; built-ins\n\n(defn- -differ? [& xs]\n  (let [l (count xs)]\n    (not= (take (/ l 2) xs) (drop (/ l 2) xs))))\n\n(defn- -get-else\n  [db e a else-val]\n  (when (nil? else-val)\n    (raise \"get-else: nil default value is not supported\" {:error :query/where}))\n  (if-some [datom (first (db/-search db [e a]))]\n    (:v datom)\n    else-val))\n\n(defn- -get-some\n  [db e & as]\n  (reduce\n   (fn [_ a]\n     (when-some [datom (first (db/-search db [e a]))]\n       (reduced [(:a datom) (:v datom)])))\n   nil\n   as))\n\n(defn- -missing?\n  [db e a]\n  (nil? (get (de/entity db e) a)))\n\n(defn- and-fn [& args]\n  (reduce (fn [a b]\n            (if b b (reduced b))) true args))\n            \n(defn- or-fn [& args]\n  (reduce (fn [a b]\n            (if b (reduced b) b)) nil args))\n\n(def built-ins {\n  '= =, '== ==, 'not= not=, '!= not=, '< <, '> >, '<= <=, '>= >=, '+ +, '- -,\n  '* *, '/ /, 'quot quot, 'rem rem, 'mod mod, 'inc inc, 'dec dec, 'max max, 'min min,\n  'zero? zero?, 'pos? pos?, 'neg? neg?, 'even? even?, 'odd? odd?, 'compare compare,\n  'rand rand, 'rand-int rand-int,\n  'true? true?, 'false? false?, 'nil? nil?, 'some? some?, 'not not, 'and and-fn, 'or or-fn,\n  'complement complement, 'identical? identical?,\n  'identity identity, 'keyword keyword, 'meta meta, 'name name, 'namespace namespace, 'type type,\n  'vector vector, 'list list, 'set set, 'hash-map hash-map, 'array-map array-map,\n  'count count, 'range range, 'not-empty not-empty, 'empty? empty?, 'contains? contains?,\n  'str str, 'pr-str pr-str, 'print-str print-str, 'println-str println-str, 'prn-str prn-str, 'subs subs,\n  're-find re-find, 're-matches re-matches, 're-seq re-seq, 're-pattern re-pattern,\n  '-differ? -differ?, 'get-else -get-else, 'get-some -get-some, 'missing? -missing?, 'ground identity,\n  'clojure.string/blank? str/blank?, 'clojure.string/includes? str/includes?,\n  'clojure.string/starts-with? str/starts-with?, 'clojure.string/ends-with? str/ends-with?\n  'tuple vector, 'untuple identity\n})\n\n(def built-in-aggregates\n (letfn [(sum [coll] (reduce + 0 coll))\n         (avg [coll] (/ (sum coll) (count coll)))\n         (median\n           [coll]\n           (let [terms (sort coll)\n                 size (count coll)\n                 med (bit-shift-right size 1)]\n             (cond-> (nth terms med)\n               (even? size)\n               (-> (+ (nth terms (dec med)))\n                   (/ 2)))))\n         (variance\n           [coll]\n           (let [mean (avg coll)\n                 sum  (sum (for [x coll\n                                 :let [delta (- x mean)]]\n                             (* delta delta)))]\n             (/ sum (count coll))))\n         (stddev \n           [coll] \n           (#?(:cljs js/Math.sqrt :clj Math/sqrt) (variance coll)))]\n   {'avg      avg\n    'median   median\n    'variance variance\n    'stddev   stddev\n    'distinct set\n    'min      (fn\n                ([coll] (reduce (fn [acc x]\n                                  (if (neg? (compare x acc))\n                                    x acc))\n                                (first coll) (next coll)))\n                ([n coll]\n                  (vec\n                    (reduce (fn [acc x]\n                              (cond\n                                (< (count acc) n)\n                                  (sort compare (conj acc x))\n                                (neg? (compare x (last acc)))\n                                  (sort compare (conj (butlast acc) x))\n                                :else acc))\n                            [] coll))))\n    'max      (fn\n                ([coll] (reduce (fn [acc x]\n                                  (if (pos? (compare x acc))\n                                    x acc))\n                                (first coll) (next coll)))\n                ([n coll]\n                  (vec\n                    (reduce (fn [acc x]\n                              (cond\n                                (< (count acc) n)\n                                  (sort compare (conj acc x))\n                                (pos? (compare x (first acc)))\n                                  (sort compare (conj (next acc) x))\n                                :else acc))\n                            [] coll))))\n    'sum      sum\n    'rand     (fn\n                ([coll] (rand-nth coll))\n                ([n coll] (vec (repeatedly n #(rand-nth coll)))))\n    'sample   (fn [n coll]\n                (vec (take n (shuffle coll))))\n    'count    count\n    'count-distinct (fn [coll] (count (distinct coll)))}))\n\n\n;;\n\n(defn parse-rules [rules]\n  (let [rules (if (string? rules) (edn/read-string rules) rules)] ;; for datascript.js interop\n    (dp/parse-rules rules) ;; validation\n    (group-by ffirst rules)))\n\n(defn empty-rel [binding]\n  (let [vars (->> (dp/collect-vars-distinct binding)\n               (map :symbol))]\n    (Relation. (zipmap vars (range)) [])))\n\n(defprotocol IBinding\n  (in->rel [binding value]))\n\n(extend-protocol IBinding\n  BindIgnore\n  (in->rel [_ _]\n    (prod-rel))\n  \n  BindScalar\n  (in->rel [binding value]\n    (Relation. {(get-in binding [:variable :symbol]) 0} [(into-array [value])]))\n  \n  BindColl\n  (in->rel [binding coll]\n    (cond\n      (not (db/seqable? coll))\n        (raise \"Cannot bind value \" coll \" to collection \" (dp/source binding)\n               {:error :query/binding, :value coll, :binding (dp/source binding)})\n      (empty? coll)\n        (empty-rel binding)\n      :else\n        (->> coll\n          (map #(in->rel (:binding binding) %))\n          (reduce sum-rel))))\n  \n  BindTuple\n  (in->rel [binding coll]\n    (cond\n      (not (db/seqable? coll))\n        (raise \"Cannot bind value \" coll \" to tuple \" (dp/source binding)\n               {:error :query/binding, :value coll, :binding (dp/source binding)})\n      (< (count coll) (count (:bindings binding)))\n        (raise \"Not enough elements in a collection \" coll \" to bind tuple \" (dp/source binding)\n               {:error :query/binding, :value coll, :binding (dp/source binding)})\n      :else\n        (reduce prod-rel\n          (map #(in->rel %1 %2) (:bindings binding) coll)))))\n\n(defn resolve-in [context [binding value]]\n  (cond\n    (and (instance? BindScalar binding)\n         (instance? SrcVar (:variable binding)))\n      (update context :sources assoc (get-in binding [:variable :symbol]) value)\n    (and (instance? BindScalar binding)\n         (instance? RulesVar (:variable binding)))\n      (assoc context :rules (parse-rules value))\n    :else\n      (update context :rels conj (in->rel binding value))))\n\n(defn resolve-ins [context bindings values]\n  (let [cb (count bindings)\n        cv (count values)]\n    (cond\n      (< cb cv)\n      (raise \"Extra inputs passed, expected: \" (mapv #(:source (meta %)) bindings) \", got: \" cv\n        {:error :query/inputs :expected bindings :got values})\n\n      (> cb cv)\n      (raise \"Too few inputs passed, expected: \" (mapv #(:source (meta %)) bindings) \", got: \" cv\n        {:error :query/inputs :expected bindings :got values})\n\n      :else\n      (reduce resolve-in context (zipmap bindings values)))))\n\n;;\n\n(def ^{:dynamic true\n       :doc \"List of symbols in current pattern that might potentiall be resolved to refs\"}\n  *lookup-attrs* nil)\n\n(def ^{:dynamic true\n       :doc \"Default pattern source. Lookup refs, patterns, rules will be resolved with it\"}\n  *implicit-source* nil)\n\n(defn getter-fn [attrs attr]\n  (let [idx (attrs attr)]\n    (if (contains? *lookup-attrs* attr)\n      (fn [tuple]\n        (let [eid (#?(:cljs da/aget :clj get) tuple idx)]\n          (cond\n            (number? eid)     eid ;; quick path to avoid fn call\n            (sequential? eid) (db/entid *implicit-source* eid)\n            (da/array? eid)   (db/entid *implicit-source* eid)\n            :else             eid)))\n      (fn [tuple]\n        (#?(:cljs da/aget :clj get) tuple idx)))))\n\n(defn tuple-key-fn [getters]\n  (if (== (count getters) 1)\n    (first getters)\n    (let [getters (to-array getters)]\n      (fn [tuple]\n        (list* #?(:cljs (.map getters #(% tuple))\n                  :clj  (to-array (map #(% tuple) getters))))))))\n\n(defn hash-attrs [key-fn tuples]\n  (loop [tuples     tuples\n         hash-table (transient {})]\n    (if-some [tuple (first tuples)]\n      (let [key (key-fn tuple)]\n        (recur (next tuples)\n               (assoc! hash-table key (conj (get hash-table key '()) tuple))))\n      (persistent! hash-table))))\n\n(defn hash-join [rel1 rel2]\n  (let [tuples1       (:tuples rel1)\n        tuples2       (:tuples rel2)\n        attrs1        (:attrs rel1)\n        attrs2        (:attrs rel2)\n        common-attrs  (vec (intersect-keys (:attrs rel1) (:attrs rel2)))\n        common-gtrs1  (map #(getter-fn attrs1 %) common-attrs)\n        common-gtrs2  (map #(getter-fn attrs2 %) common-attrs)\n        keep-attrs1   (keys attrs1)\n        keep-attrs2   (vec (set/difference (set (keys attrs2)) (set (keys attrs1))))\n        keep-idxs1    (to-array (map attrs1 keep-attrs1))\n        keep-idxs2    (to-array (map attrs2 keep-attrs2))\n        key-fn1       (tuple-key-fn common-gtrs1)\n        hash          (hash-attrs key-fn1 tuples1)\n        key-fn2       (tuple-key-fn common-gtrs2)\n        new-tuples    (->>\n                        (reduce (fn [acc tuple2]\n                                  (let [key (key-fn2 tuple2)]\n                                    (if-some [tuples1 (get hash key)]\n                                      (reduce (fn [acc tuple1]\n                                                (conj! acc (join-tuples tuple1 keep-idxs1 tuple2 keep-idxs2)))\n                                              acc tuples1)\n                                      acc)))\n                          (transient []) tuples2)\n                        (persistent!))]\n    (Relation. (zipmap (concat keep-attrs1 keep-attrs2) (range))\n               new-tuples)))\n\n(defn subtract-rel [a b]\n  (let [{attrs-a :attrs, tuples-a :tuples} a\n        {attrs-b :attrs, tuples-b :tuples} b\n        attrs     (intersect-keys attrs-a attrs-b)\n        getters-b (map #(getter-fn attrs-b %) attrs)\n        key-fn-b  (tuple-key-fn getters-b)\n        hash      (hash-attrs key-fn-b tuples-b)\n        getters-a (map #(getter-fn attrs-a %) attrs)\n        key-fn-a  (tuple-key-fn getters-a)]\n    (assoc a\n      :tuples (filterv #(nil? (hash (key-fn-a %))) tuples-a))))\n\n(defn lookup-pattern-db [db pattern]\n  ;; TODO optimize with bound attrs min/max values here\n  (let [search-pattern (mapv #(if (symbol? %) nil %) pattern)\n        datoms         (db/-search db search-pattern)\n        attr->prop     (->> (map vector pattern [\"e\" \"a\" \"v\" \"tx\"])\n                            (filter (fn [[s _]] (free-var? s)))\n                            (into {}))]\n    (Relation. attr->prop datoms)))\n\n(defn matches-pattern? [pattern tuple]\n  (loop [tuple   tuple\n         pattern pattern]\n    (if (and tuple pattern)\n      (let [t (first tuple)\n            p (first pattern)]\n        (if (or (symbol? p) (= t p))\n          (recur (next tuple) (next pattern))\n          false))\n      true)))\n\n(defn lookup-pattern-coll [coll pattern]\n  (let [data       (filter #(matches-pattern? pattern %) coll)\n        attr->idx  (->> (map vector pattern (range))\n                        (filter (fn [[s _]] (free-var? s)))\n                        (into {}))]\n    (Relation. attr->idx (mapv to-array data)))) ;; FIXME to-array\n\n(defn normalize-pattern-clause [clause]\n  (if (source? (first clause))\n    clause\n    (concat ['$] clause)))\n\n(defn lookup-pattern [source pattern]\n  (cond\n    (satisfies? db/ISearch source)\n      (lookup-pattern-db source pattern)\n    :else\n      (lookup-pattern-coll source pattern)))\n\n(defn collapse-rels [rels new-rel]\n  (loop [rels    rels\n         new-rel new-rel\n         acc     []]\n    (if-some [rel (first rels)]\n      (if (not-empty (intersect-keys (:attrs new-rel) (:attrs rel)))\n        (recur (next rels) (hash-join rel new-rel) acc)\n        (recur (next rels) new-rel (conj acc rel)))\n      (conj acc new-rel))))\n\n(defn- rel-with-attr [context sym]\n  (some #(when (contains? (:attrs %) sym) %) (:rels context)))\n\n(defn- context-resolve-val [context sym]\n  (when-some [rel (rel-with-attr context sym)]\n    (when-some [tuple (first (:tuples rel))]\n      (#?(:cljs da/aget :clj get) tuple ((:attrs rel) sym)))))\n\n(defn- rel-contains-attrs? [rel attrs]\n  (some #(contains? (:attrs rel) %) attrs))\n\n(defn- rel-prod-by-attrs [context attrs]\n  (let [rels       (filter #(rel-contains-attrs? % attrs) (:rels context))\n        production (reduce prod-rel rels)]\n    [(update context :rels #(remove (set rels) %)) production]))\n\n(defn -call-fn [context rel f args]\n  (let [sources     (:sources context)\n        attrs       (:attrs rel)\n        len         (count args)\n        static-args (da/make-array len)\n        tuples-args (da/make-array len)]\n    (dotimes [i len]\n      (let [arg (nth args i)]\n        (if (symbol? arg) \n          (if-some [source (get sources arg)]\n            (da/aset static-args i source)\n            (da/aset tuples-args i (get attrs arg)))\n          (da/aset static-args i arg))))\n    ;; CLJS `apply` + `vector` will hold onto mutable array of arguments directly\n    ;; https://github.com/tonsky/datascript/issues/262\n    (if #?(:clj  false\n           :cljs (identical? f vector))\n      (fn [tuple]\n        ;; TODO raise if not all args are bound\n        (let [args (da/aclone static-args)]\n          (dotimes [i len]\n            (when-some [tuple-idx (aget tuples-args i)]\n              (let [v (#?(:cljs da/aget :clj get) tuple tuple-idx)]\n                (da/aset args i v))))\n          (apply f args)))\n      (fn [tuple]\n        ;; TODO raise if not all args are bound\n        (dotimes [i len]\n          (when-some [tuple-idx (aget tuples-args i)]\n            (let [v (#?(:cljs da/aget :clj get) tuple tuple-idx)]\n              (da/aset static-args i v))))\n        (apply f static-args)))))\n\n(defn- resolve-sym [sym]\n  #?(:cljs nil\n     :clj (when (namespace sym)\n            (when-some [v (resolve sym)] @v))))\n\n(defn filter-by-pred [context clause]\n  (let [[[f & args]] clause\n        pred         (or (get built-ins f)\n                         (context-resolve-val context f)\n                         (resolve-sym f)\n                         (when (nil? (rel-with-attr context f))\n                           (raise \"Unknown predicate '\" f \" in \" clause\n                                  {:error :query/where, :form clause, :var f})))\n        [context production] (rel-prod-by-attrs context (filter symbol? args))\n        new-rel      (if pred\n                       (let [tuple-pred (-call-fn context production pred args)]\n                         (update production :tuples #(filter tuple-pred %)))\n                       (assoc production :tuples []))]\n    (update context :rels conj new-rel)))\n\n(defn bind-by-fn [context clause]\n  (let [[[f & args] out] clause\n        binding  (dp/parse-binding out)\n        fun      (or (get built-ins f)\n                     (context-resolve-val context f)\n                     (resolve-sym f)\n                     (when (nil? (rel-with-attr context f))\n                       (raise \"Unknown function '\" f \" in \" clause\n                              {:error :query/where, :form clause, :var f})))\n        [context production] (rel-prod-by-attrs context (filter symbol? args))\n        new-rel  (if fun\n                   (let [tuple-fn (-call-fn context production fun args)\n                        rels     (for [tuple (:tuples production)\n                                       :let  [val (tuple-fn tuple)]\n                                       :when (not (nil? val))]\n                                   (prod-rel (Relation. (:attrs production) [tuple])\n                                             (in->rel binding val)))]\n                     (if (empty? rels)\n                       (prod-rel production (empty-rel binding))\n                       (reduce sum-rel rels)))\n                   (prod-rel (assoc production :tuples []) (empty-rel binding)))]\n    (update context :rels collapse-rels new-rel)))\n\n;;; RULES\n\n(defn rule? [context clause]\n  (cond+\n    (not (sequential? clause))\n    false\n\n    :let [head (if (source? (first clause))\n                  (second clause)\n                  (first clause))]\n\n    (not (symbol? head))\n    false\n\n    (free-var? head)\n    false\n\n    (contains? #{'_ 'or 'or-join 'and 'not 'not-join} head)\n    false\n\n    (not (contains? (:rules context) head))\n    (raise \"Unknown rule '\" head \" in \" clause\n      {:error :query/where\n       :form  clause})\n\n    :else true))\n\n(def rule-seqid (atom 0))\n\n(defn expand-rule [clause context used-args]\n  (let [[rule & call-args] clause\n        seqid              (swap! rule-seqid inc)\n        branches           (get (:rules context) rule)]\n    (for [branch branches\n          :let [[[_ & rule-args] & clauses] branch\n                replacements (zipmap rule-args call-args)]]\n      (walk/postwalk\n       #(if (free-var? %)\n          (db/some-of\n            (replacements %)\n            (symbol (str (name %) \"__auto__\" seqid)))\n          %)\n        clauses))))\n\n(defn remove-pairs [xs ys]\n  (let [pairs (->> (map vector xs ys)\n                   (remove (fn [[x y]] (= x y))))]\n    [(map first pairs)\n     (map second pairs)]))\n\n(defn rule-gen-guards [rule-clause used-args]\n  (let [[rule & call-args] rule-clause\n        prev-call-args     (get used-args rule)]\n    (for [prev-args prev-call-args\n          :let [[call-args prev-args] (remove-pairs call-args prev-args)]]\n      [(concat ['-differ?] call-args prev-args)])))\n\n(defn walk-collect [form pred]\n  (let [res (atom [])]\n    (walk/postwalk #(do (when (pred %) (swap! res conj %)) %) form)\n    @res))\n\n(defn collect-vars [clause]\n  (set (walk-collect clause free-var?)))\n\n(defn split-guards [clauses guards]\n  (let [bound-vars (collect-vars clauses)\n        pred       (fn [[[_ & vars]]] (every? bound-vars vars))]\n    [(filter pred guards)\n     (remove pred guards)]))\n\n(defn solve-rule [context clause]\n  (let [final-attrs     (filter free-var? clause)\n        final-attrs-map (zipmap final-attrs (range))\n;;         clause-cache    (atom {}) ;; TODO\n        solve           (fn [prefix-context clauses]\n                          (reduce -resolve-clause prefix-context clauses))\n        empty-rels?     (fn [context]\n                          (some #(empty? (:tuples %)) (:rels context)))]\n    (loop [stack (list {:prefix-clauses []\n                        :prefix-context context\n                        :clauses        [clause]\n                        :used-args      {}\n                        :pending-guards {}})\n           rel   (Relation. final-attrs-map [])]\n      (if-some [frame (first stack)]\n        (let [[clauses [rule-clause & next-clauses]] (split-with #(not (rule? context %)) (:clauses frame))]\n          (if (nil? rule-clause)\n\n            ;; no rules -> expand, collect, sum\n            (let [context (solve (:prefix-context frame) clauses)\n                  tuples  (-collect context final-attrs)\n                  new-rel (Relation. final-attrs-map tuples)]\n              (recur (next stack) (sum-rel rel new-rel)))\n\n            ;; has rule -> add guards -> check if dead -> expand rule -> push to stack, recur\n            (let [[rule & call-args]     rule-clause\n                  guards                 (rule-gen-guards rule-clause (:used-args frame))\n                  [active-gs pending-gs] (split-guards (concat (:prefix-clauses frame) clauses)\n                                                       (concat guards (:pending-guards frame)))]\n              (if (some #(= % '[(-differ?)]) active-gs) ;; trivial always false case like [(not= [?a ?b] [?a ?b])]\n\n                ;; this branch has no data, just drop it from stack\n                (recur (next stack) rel)\n\n                (let [prefix-clauses (concat clauses active-gs)\n                      prefix-context (solve (:prefix-context frame) prefix-clauses)]\n                  (if (empty-rels? prefix-context)\n\n                    ;; this branch has no data, just drop it from stack\n                    (recur (next stack) rel)\n\n                    ;; need to expand rule to branches\n                    (let [used-args  (assoc (:used-args frame) rule\n                                       (conj (get (:used-args frame) rule []) call-args))\n                          branches   (expand-rule rule-clause context used-args)]\n                      (recur (concat\n                               (for [branch branches]\n                                 {:prefix-clauses prefix-clauses\n                                  :prefix-context prefix-context\n                                  :clauses        (concatv branch next-clauses)\n                                  :used-args      used-args\n                                  :pending-guards pending-gs})\n                               (next stack))\n                             rel))))))))\n        rel))))\n\n(defn resolve-pattern-lookup-refs [source pattern]\n  (if (satisfies? db/IDB source)\n    (let [[e a v tx] pattern]\n      (->\n        [(if (or (lookup-ref? e) (attr? e)) (db/entid-strict source e) e)\n         a\n         (if (and v (attr? a) (db/ref? source a) (or (lookup-ref? v) (attr? v))) (db/entid-strict source v) v)\n         (if (lookup-ref? tx) (db/entid-strict source tx) tx)]\n        (subvec 0 (count pattern))))\n    pattern))\n\n(defn dynamic-lookup-attrs [source pattern]\n  (let [[e a v tx] pattern]\n    (cond-> #{}\n      (free-var? e) (conj e)\n      (free-var? tx) (conj tx)\n      (and\n        (free-var? v)\n        (not (free-var? a))\n        (db/ref? source a)) (conj v))))\n\n(defn limit-rel [rel vars]\n  (when-some [attrs' (not-empty (select-keys (:attrs rel) vars))]\n    (assoc rel :attrs attrs')))\n\n(defn limit-context [context vars]\n  (assoc context\n    :rels (->> (:rels context)\n               (keep #(limit-rel % vars)))))\n\n(defn bound-vars [context]\n  (into #{} (mapcat #(keys (:attrs %)) (:rels context))))\n\n(defn check-bound [bound vars form]\n  (when-not (set/subset? vars bound)\n    (let [missing (set/difference (set vars) bound)]\n      (raise \"Insufficient bindings: \" missing \" not bound in \" form\n             {:error :query/where\n              :form  form\n              :vars  missing}))))\n\n(defn check-free-same [bound branches form]\n  (let [free (mapv #(set/difference (collect-vars %) bound) branches)]\n    (when-not (apply = free)\n      (raise \"All clauses in 'or' must use same set of free vars, had \" free \" in \" form\n             {:error :query/where\n              :form  form\n              :vars  free}))))\n\n(defn check-free-subset [bound vars branches]\n  (let [free (set (remove bound vars))]\n    (doseq [branch branches]\n      (when-some [missing (not-empty (set/difference free (collect-vars branch)))]\n        (prn branch bound vars free)\n        (raise \"All clauses in 'or' must use same set of free vars, had \" missing \" not bound in \" branch\n          {:error :query/where\n           :form  branch\n           :vars  missing})))))\n\n(defn -resolve-clause\n  ([context clause]\n    (-resolve-clause context clause clause))\n  ([context clause orig-clause]\n   (condp looks-like? clause\n     [[symbol? '*]] ;; predicate [(pred ?a ?b ?c)]\n     (do\n       (check-bound (bound-vars context) (filter free-var? (nfirst clause)) clause)\n       (filter-by-pred context clause))\n     \n     [[symbol? '*] '_] ;; function [(fn ?a ?b) ?res]\n     (do\n       (check-bound (bound-vars context) (filter free-var? (nfirst clause)) clause)\n       (bind-by-fn context clause))\n     \n     [source? '*] ;; source + anything\n     (let [[source-sym & rest] clause]\n       (binding [*implicit-source* (get (:sources context) source-sym)]\n         (-resolve-clause context rest clause)))\n     \n     '[or *] ;; (or ...)\n     (let [[_ & branches] clause\n           _        (check-free-same (bound-vars context) branches clause)\n           contexts (map #(resolve-clause context %) branches)\n           rels     (map #(reduce hash-join (:rels %)) contexts)]\n       (assoc (first contexts) :rels [(reduce sum-rel rels)]))\n     \n     '[or-join [[*] *] *] ;; (or-join [[req-vars] vars] ...)\n     (let [[_ [req-vars & vars] & branches] clause\n           bound (bound-vars context)]\n       (check-bound bound req-vars orig-clause)\n       (check-free-subset bound vars branches)\n       (recur context (list* 'or-join (concat req-vars vars) branches) clause))\n     \n     '[or-join [*] *] ;; (or-join [vars] ...)\n     (let [[_ vars & branches] clause\n           vars         (set vars)\n           _            (check-free-subset (bound-vars context) vars branches)\n           join-context (limit-context context vars)\n           contexts     (map #(-> join-context (resolve-clause %) (limit-context vars)) branches)\n           rels         (map #(reduce hash-join (:rels %)) contexts)\n           sum-rel      (reduce sum-rel rels)]\n       (update context :rels collapse-rels sum-rel))\n     \n     '[and *] ;; (and ...)\n     (let [[_ & clauses] clause]\n       (reduce resolve-clause context clauses))\n     \n     '[not *] ;; (not ...)\n     (let [[_ & clauses] clause\n           bound            (bound-vars context)\n           negation-vars    (collect-vars clauses)\n           _                (when (empty? (set/intersection bound negation-vars))\n                              (raise \"Insufficient bindings: none of \" negation-vars \" is bound in \" orig-clause\n                                {:error :query/where\n                                 :form  orig-clause}))\n           context'         (assoc context :rels [(reduce hash-join (:rels context))])\n           negation-context (reduce resolve-clause context' clauses)\n           negation         (subtract-rel\n                              (single (:rels context'))\n                              (reduce hash-join (:rels negation-context)))]\n       (assoc context' :rels [negation]))\n     \n     '[not-join [*] *] ;; (not-join [vars] ...)\n     (let [[_ vars & clauses] clause\n           bound            (bound-vars context)\n           _                (check-bound bound vars orig-clause)\n           context'         (assoc context :rels [(reduce hash-join (:rels context))])\n           join-context     (limit-context context' vars)\n           negation-context (-> (reduce resolve-clause join-context clauses)\n                                (limit-context vars))\n           negation         (subtract-rel\n                              (single (:rels context'))\n                              (reduce hash-join (:rels negation-context)))]\n       (assoc context' :rels [negation]))\n     \n     '[*] ;; pattern\n     (let [source   *implicit-source*\n           pattern  (resolve-pattern-lookup-refs source clause)\n           relation (lookup-pattern source pattern)]\n       (binding [*lookup-attrs* (if (satisfies? db/IDB source)\n                                  (dynamic-lookup-attrs source pattern)\n                                  *lookup-attrs*)]\n         (update context :rels collapse-rels relation))))))\n\n(defn resolve-clause [context clause]\n  (if (rule? context clause)\n    (if (source? (first clause))\n      (binding [*implicit-source* (get (:sources context) (first clause))]\n        (resolve-clause context (next clause)))\n      (update context :rels collapse-rels (solve-rule context clause)))\n    (-resolve-clause context clause)))\n\n(defn -q [context clauses]\n  (binding [*implicit-source* (get (:sources context) '$)]\n    (reduce resolve-clause context clauses)))\n\n(defn -collect\n  ([context symbols]\n    (let [rels (:rels context)]\n      (-collect [(da/make-array (count symbols))] rels symbols)))\n  ([acc rels symbols]\n    (if-some [rel (first rels)]\n      (let [keep-attrs (select-keys (:attrs rel) symbols)]\n        (if (empty? keep-attrs)\n          (recur acc (next rels) symbols)\n          (let [copy-map (to-array (map #(get keep-attrs %) symbols))\n                len      (count symbols)]\n            (recur (for [#?(:cljs t1\n                            :clj ^{:tag \"[[Ljava.lang.Object;\"} t1) acc\n                         t2 (:tuples rel)]\n                     (let [res (aclone t1)]\n                       (dotimes [i len]\n                         (when-some [idx (aget copy-map i)]\n                           (aset res i (#?(:cljs da/aget :clj get) t2 idx))))\n                       res))\n                   (next rels)\n                   symbols))))\n      acc)))\n\n(defn collect [context symbols]\n  (->> (-collect context symbols)\n       (map vec)\n       set))\n\n(defprotocol IContextResolve\n  (-context-resolve [var context]))\n\n(extend-protocol IContextResolve\n  Variable\n  (-context-resolve [var context]\n    (context-resolve-val context (.-symbol var)))\n  SrcVar\n  (-context-resolve [var context]\n    (get-in context [:sources (.-symbol var)]))\n  PlainSymbol\n  (-context-resolve [var _]\n    (or (get built-in-aggregates (.-symbol var))\n        (resolve-sym (.-symbol var))))\n  Constant\n  (-context-resolve [var _]\n    (.-value var)))\n\n(defn -aggregate [find-elements context tuples]\n  (mapv (fn [element fixed-value i]\n          (if (dp/aggregate? element)\n            (let [f    (-context-resolve (:fn element) context)\n                  args (map #(-context-resolve % context) (butlast (:args element)))\n                  vals (map #(nth % i) tuples)]\n              (apply f (concat args [vals])))\n            fixed-value))\n    find-elements\n    (first tuples)\n    (range)))\n\n(defn- idxs-of [pred coll]\n  (->> (map #(when (pred %1) %2) coll (range))\n       (remove nil?)))\n\n(defn aggregate [find-elements context resultset]\n  (let [group-idxs (idxs-of (complement dp/aggregate?) find-elements)\n        group-fn   (fn [tuple]\n                     (map #(nth tuple %) group-idxs))\n        grouped    (group-by group-fn resultset)]\n    (for [[_ tuples] grouped]\n      (-aggregate find-elements context tuples))))\n\n(defn map* [f xs]\n  (reduce #(conj %1 (f %2)) (empty xs) xs))\n\n(defn tuples->return-map [return-map tuples]\n  (let [symbols (:symbols return-map)\n        idxs    (range 0 (count symbols))]\n    (map*\n      (fn [tuple]\n        (reduce\n          (fn [m i] (assoc m (nth symbols i) (nth tuple i)))\n          {} idxs))\n      tuples)))\n\n(defprotocol IPostProcess\n  (-post-process [find return-map tuples]))\n\n(extend-protocol IPostProcess\n  FindRel\n  (-post-process [_ return-map tuples]\n    (if (nil? return-map)\n      tuples\n      (tuples->return-map return-map tuples)))\n\n  FindColl\n  (-post-process [_ return-map tuples]\n    (into [] (map first) tuples))\n\n  FindScalar\n  (-post-process [_ return-map tuples]\n    (ffirst tuples))\n\n  FindTuple\n  (-post-process [_ return-map tuples]\n    (if (some? return-map)\n      (first (tuples->return-map return-map [(first tuples)]))\n      (first tuples))))\n\n(defn- pull [find-elements context resultset]\n  (let [resolved (for [find find-elements]\n                   (when (dp/pull? find)\n                     [(-context-resolve (:source find) context)\n                      (dpp/parse-pull\n                        (-context-resolve (:pattern find) context))]))]\n    (for [tuple resultset]\n      (mapv (fn [env el]\n              (if env\n                (let [[src spec] env]\n                  (dpa/pull-spec src spec [el] false))\n                el))\n            resolved\n            tuple))))\n\n(def ^:private query-cache (volatile! (datascript.lru/lru lru-cache-size)))\n\n(defn memoized-parse-query [q]\n  (if-some [cached (get @query-cache q nil)]\n    cached\n    (let [qp (dp/parse-query q)]\n      (vswap! query-cache assoc q qp)\n      qp)))\n\n(defn q [q & inputs]\n  (let [parsed-q      (memoized-parse-query q)\n        find          (:qfind parsed-q)\n        find-elements (dp/find-elements find)\n        find-vars     (dp/find-vars find)\n        result-arity  (count find-elements)\n        with          (:qwith parsed-q)\n        ;; TODO utilize parser\n        all-vars      (concat find-vars (map :symbol with))\n        q             (cond-> q\n                        (sequential? q) dp/query->map)\n        wheres        (:where q)\n        context       (-> (Context. [] {} {})\n                        (resolve-ins (:qin parsed-q) inputs))\n        resultset     (-> context\n                        (-q wheres)\n                        (collect all-vars))]\n    (cond->> resultset\n      (:with q)\n        (mapv #(vec (subvec % 0 result-arity)))\n      (some dp/aggregate? find-elements)\n        (aggregate find-elements context)\n      (some dp/pull? find-elements)\n        (pull find-elements context)\n      true\n        (-post-process find (:qreturn-map parsed-q)))))\n"]}