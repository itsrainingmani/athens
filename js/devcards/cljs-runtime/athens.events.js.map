{"version":3,"sources":["athens/events.cljs"],"mappings":";;;;;;;;;;AAcA,AAAA,AAACA,AAEC,AAAA,AAAAC,AAAA,AAAYQ,AAAEA;AAAd,AAAA,AAAAP,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA;;AAAA,AAAAC,AAAAF;AAAAG,AACWK;AADX,AAAA,AAAAJ,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAE,AAAAC;AAAA,AAAA,AAAAD;AAAA,AAAYE,AAAEA;AAAd,AACWC;;AAGb,AAAA,AAACV,AAEC,AAAKW,AAAGF;AAAR,AACE,AAAA,AAACG,AAAOD,AAAgBE;;AAG5B,AAAA,AAACb,AAEC,AAAA,AAAAC,AAAA,AAAAa,AAAYH;AAAZ,AAAA,AAAAI,AAAAD;AAAA,AAAAE,AAAAD,AAAA,AAAA,AAAgBN;AAAhB,AAAAO,AAAAD,AAAA,AAAA,AAAkBO;AAAlB,AAAA,AAAApB,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA;;AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAA,AAAAD,AAAAF;AAAAG,AAAA,AAAA,AAAAY,AAAA,AAAAb,AAAAF;AAAAG,AACwDiB;AADxD,AAAA,AAAAhB,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAAa,AAAA,AAAAd,AAAAF;AAAAG,AAAA,AAAA,AAAAD,AAAAF,AACyBsB;AADzBnB,AAAA,AAAA,AAAA,AAAAD,AAAAF;AAAAG,AACmDM;AADnD,AAAA,AAAAL,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAA,AAAAa,AAAAA,AAAAD,AAAAC,AAAAD;AAAA;AAAA,AAAA,AAAAX,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAA,AAAAD,AAAAF;AAAAG,AAAA,AAAA,AAAAD,AAAAF,AAEcU;AAFdP,AAEqBM;AAFrB,AAAA,AAAAL,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAA,AAAAD,AAAAF;AAAAG,AAE6CoB;AAF7C,AAAA,AAAAnB,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAD,AAAAF;AAAAG,AAEkDiB;AAFlD,AAAA,AAAAhB,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAE,AAAAY;AAAA,AAAA,AAAAZ;AAAA,AAAAa,AAAYT;AAAZ,AAAA,AAAAU,AAAAD;AAAA,AAAAJ,AAAAK,AAAA,AAAA,AAAgBZ;AAAhB,AAAAO,AAAAK,AAAA,AAAA,AAAkBC;AAAlB,AACW,AAAM,AAAM,AAAAC,AAAC,AAACC,AAAI,AAAA,AAAsBb;AAA5B,AAAA,AAAAY,AAAAA,AAAAA,AAAiCD,AAAAA;AAAvC;AAAN,AACE,AAAA,AAACV,AAAOD,AAAwBc,AAAKH;;AADvC;;;AAIb,AAAA,AAACtB,AAEC,AAAKW,AAAGF;AAAR,AACE,AAAA,AAACG,AAAOD,AAAiBE;;AAG7B,AAAA,AAACb,AAEC,AAAKW,AAAGF;AAAR,AACE,AAAA,AAACG,AAAOD,AAAsBE;;AAGlC,AAAA,AAACb,AAEC,AAAKW,AAAGF;AAAR,AACE,AAAA,AAACG,AAAOD,AAAuBE;;AAGnC,AAAA,AAACb,AAEC,AAAA0B,AAAKf;AAAL,AAAA,AAAAgB,AAAAD;AAAA,AAAAV,AAAAW,AAAA,AAAA,AAASlB;AAAT,AAAAO,AAAAW,AAAA,AAAA,AAAWC;AAAX,AACE,AAAA,AAAA,AAAA,AAACC,AAAUlB,AAAyBiB,AAAYf;;AAIpD,AAAA,AAACb,AAEC,AAAA8B,AAAKnB;AAAL,AAAA,AAAAoB,AAAAD;AAAA,AAAAd,AAAAe,AAAA,AAAA,AAAStB;AAAT,AAAAO,AAAAe,AAAA,AAAA,AAAWC;AAAX,AACE,AAAA,AAACpB,AAAOD,AAAwBsB,AAAOD;;AAI3C,AAAA,AAACE,AAEC,AAAA,AAAAjC,AAAA,AAAAkC,AAAAC;AAAA,AAAA,AAAAC,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAC,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAAE,AAAAC,AAAAH,AAAAA;AAAA,AAAAI,AAAAJ,AAAA,AAAoB1B;AAApB+B,AAAAN;AAAA,AAAApB,AAAA0B,AAAA,AAAA,AAA0BjC;AAA1B,AAAAO,AAAA0B,AAAA,AAAA,AAA4BV;AAA5B,AAAA,AAAA9B,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA;;AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAA,AAAAD,AAAAF,AACiBkD;AADjB/C,AAAA,AAAAsC,AAAA,AAAAvC,AAAAF;AAAAG,AAAA,AAAAuC,AAAA,AAAAxC,AAAAF;AAAAG,AACoCoD;AADpC,AAAA,AAAAnD,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAAwC,AAAA,AAAA;AAAAC,AAAA,AAAA1C,AAAAF;AAAAG,AAAA,AAAA,AAAA,AAAAD,AAAAF;AAAAG,AACqF2B;AADrF,AAAA,AAAA1B,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAA,AAAAsC,AAAAE,AAAAC,AAAAH,AAAAE,AAAAC,AAC4BU,AAAAA,AAAAA;;AAD5B,AAAA,AAAAlD,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAAD,AAAAF,AAEiBwD;AAFjBrD,AAAA,AAAA,AAAAD,AAAAF,AAE4ByD;AAF5BtD,AAEkC+C;AAFlC,AAAA,AAAA9C,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAD,AAAAF;AAAAG,AAAA,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAAD,AAAAF,AAGiB0D;AAHjBvD,AAAA,AAAA,AAAAD,AAAAF,AAG4B2D;AAH5BxD,AAAA,AAAA,AAAA,AAAAD,AAAAF;AAAAG,AAGwDM;AAHxD,AAAA,AAAAL,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAD,AAAAF;AAAAG,AAG4D2B;AAH5D,AAAA,AAAA1B,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAD,AAAAF;AAAAG,AAGgEqD;AAHhE,AAAA,AAAApD,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAAD,AAAAF,AAIiB4D;AAJjBzD,AAAA,AAAA,AAAAD,AAAAF,AAI4B6D;AAJ5B1D,AAAA,AAI2C2D,AAAEC,AAAEC;AAJ/C,AAAA,AAAA9D,AAAAF;AAAAG,AAAA,AAAA,AAAAD,AAAAF,AAImD2D;AAJnDxD,AAIyD2D;AAJzD,AAAA,AAAA1D,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAD,AAAAF;AAAAG,AAI2D4D;AAJ3D,AAAA,AAAA3D,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAD,AAAAF;AAAAG,AAAA,AAAA,AAAAD,AAAAF,AAI8DU;AAJ9DP,AAIqE6D;AAJrE,AAAA,AAAA5D,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAA,AAAAD,AAAAF;AAAAG,AAI8E8D;AAJ9E,AAAA,AAAA7D,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAD,AAAAF;AAAAG,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAD,AAAAF;AAAAG,AAMsCuD;AANtC,AAAA,AAAAtD,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAAD,AAAAF,AAOiBkE;AAPjB/D,AAAA,AAAA,AAAAD,AAAAF,AAO+BmE;AAP/BhE,AAAA,AAAA,AAAAD,AAAAF,AAOqCoE;AAPrCjE,AAAA,AAOwDkE,AAAGC;AAP3D,AAAA,AAAApE,AAAAF;AAAAG,AAAA,AAAA,AAAAD,AAAAF,AAQsDuE;AARtDpE,AAAA,AAAA,AAAAD,AAAAF;AAAAG,AAAA,AAAA,AAAAD,AAAAF,AASyDwE;AATzDrE,AASgEuD;AAThE,AAAA,AAAAtD,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAD,AAAAF;AAAAG,AAAA,AAAA,AAAAD,AAAAF;AAAAG,AAS2EkE;AAT3E,AAAA,AAAAjE,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAD,AAAAF;AAAAG,AASuFmE;AATvF,AAAA,AAAAlE,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAD,AAAAF;AAAAG,AAAA,AAAA,AAAAD,AAAAF;AAAAG,AAAA,AAAA,AAAAD,AAAAF,AAUyDwE;AAVzDrE,AAUgEuD;AAVhE,AAAA,AAAAtD,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAD,AAAAF;AAAAG,AAAA,AAAA,AAAAD,AAAAF;AAAAG,AAU2EmE;AAV3E,AAAA,AAAAlE,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAD,AAAAF;AAAAG,AAUuFkE;AAVvF,AAAA,AAAAjE,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAD,AAAAF;AAAAG,AAU8FyD;AAV9F,AAAA,AAAAxD,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAA,AAAAD,AAAAF;AAAAG,AAAA,AAAA,AAAA,AAWkB,AAAA,AAACwD,AAAMlD,AAAwByD,AACzB,AAAA,AAAA,AAAA,AAAA,AAAM,AAAQ,AAAA,AAAqBzD;AAZ3D,AAAA,AAAAL,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAE,AAAAwC;AAAA,AAAA,AAAAxC;AAAA,AAAAyC,AAAAC;AAAA,AAAA,AAAAC,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAZ,AAAA,AAAAY,AAAA,AAAA,AAAA,AAAA,AAAAX,AAAAC,AAAAU,AAAAA;AAAA,AAAAT,AAAAS,AAAA,AAAoBvC;AAApBwC,AAAAF;AAAA,AAAAjC,AAAAmC,AAAA,AAAA,AAA0B1C;AAA1B,AAAAO,AAAAmC,AAAA,AAAA,AAA4BnB;AAA5B,AACW,AAAMoB,AAAU,AAAAC,AAAA,AAAAT,AAASa;AAATH,AAAA,AAAA;AAAAC,AAAA,AAAA,AAA0DvB;AAA1D,AAAA,AAAAqB,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAACC,AAAAA,AAAAA;;AACXE,AAAU,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC,AAAMP;AACjBQ,AAAU,AAACC,AAAM,AAAA,AAAsBlD,AAAIqB,AAAI0B;AAC/CI,AAAU,AAACC,AAAU,AAAKC,AAAEC,AAAEC;AAAT,AAAY,AAACL,AAAMG,AAAEC,AAAE,AAAA,AAACrD,AAAOsD,AAASC;AAAnD,AAEWP;AACrBQ,AAAa,AAACC,AAAK,AAACC,AAAc,AAAKC,AAAGC;AAAR,AACE,AAAA,AAAA,AAACC,AACE,AAAA,AAAA,AAACC,AAAOd,AAAWW,AAAYC,AAC/B,AAAA,AAAA,AAACE,AAAOd,AAAWY,AAAYD;AAAOT;AATnF,AAAA,AAAA,AAAA,AAUO,AAAA,AAACD,AAAMlD,AAAwByD,AACzB,AAAA,AAAA,AAAA,AAAA,AAAM,AAAQ,AAAA,AAAqBzD;;AAI7D,AAAA,AAACX,AAEC,AAAKW,AAAGF;AAAR,AACE,AAAA,AAACG,AAAOD,AAAoBE;;AAGhC,AAAA,AAACb,AAEC,AAAA2E,AAAKhE;AAAL,AAAA,AAAAiE,AAAAD;AAAA,AAAA3D,AAAA4D,AAAA,AAAA,AAASnE;AAAT,AAAAO,AAAA4D,AAAA,AAAA,AAAW5C;AAAX,AACE,AAAA,AAACpB,AAAOD,AAAmBc,AAAKO;;AAGpC,AAAA,AAAChC,AAEC,AAAA6E,AAAKlE;AAAL,AAAA,AAAAmE,AAAAD;AAAA,AAAA7D,AAAA8D,AAAA,AAAA,AAASrE;AAAT,AAAAO,AAAA8D,AAAA,AAAA,AAAWC;AAAX,AACE,AAAA,AAACnE,AAAOD,AAAmBqE,AAAOD;;AAGtC,AAAA,AAAC/E,AAEC,AAAKW,AAAGF;AAAR,AACE,AAAA,AAAA,AAACoD,AAAMlD;;AAGX,AAAA,AAACX,AAEC,AAAAiF,AAAKtE;AAAL,AAAA,AAAAuE,AAAAD;AAAA,AAAAjE,AAAAkE,AAAA,AAAA,AAASzE;AAAT,AAAAO,AAAAkE,AAAA,AAAA,AAAWC;AAAX,AACE,AAAMC,AAAW,AAACC,AAAMF;AAClBG,AAAgB,AAACC,AAAkBH;AACnCI,AAAW,AAAA,AAAA,AAACC,AAAyBH;AAErCI,AAAQ,AAAA,AAAA,AAEE,AAAA,AAAaF,AAKP,AAAA,AAACnB,AAAMiB,AAAiBH;;AAX9C,AAYE,AAAA,AAACtB,AAAMlD,AAAmB+E;;AAGhC,AAAA,AAAC1F,AAEC,AAAA2F,AAAKhF;AAAL,AAAA,AAAAiF,AAAAD;AAAA,AAAA3E,AAAA4E,AAAA,AAAA,AAASnF;AAAT,AAAAO,AAAA4E,AAAA,AAAA,AAAWT;AAAX,AACE,AAAMU,AAAU,AAACC,AAAKX;AAChBY,AAAgB,AAACC,AAAkBH;AACnCH,AAAQ,AAACO,AAAKd,AAAeY;AAFnC,AAGE,AAAA,AAAClC,AAAMlD,AAAmB+E;;AAIhC,AAAA,AAACxD,AAEC,AAAAgE,AAAAC;AAAA,AAAA,AAAAC,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA9D,AAAA,AAAA8D,AAAA,AAAA,AAAA,AAAA,AAAA7D,AAAAC,AAAA4D,AAAAA;AAAA,AAAA3D,AAAA2D,AAAA,AAAazF;AAAb0F,AAAAF;AAAA,AAAAnF,AAAAqF,AAAA,AAAA,AAAmB5F;AAAnB,AAAAO,AAAAqF,AAAA,AAAA,AAAqBlB;AAArB,AACE,AAAMmB,AAAa,AAACC,AAAK,AAAKvE;AAAL,AAAA,AAAA,AAAA,AAAA,AAAyCA;AACzCmD;AADzB,AAAA,AAAA,AAAA,AAAA,AAAA,AAEwBmB,AACX,AAAA,AAAA,AAACzC,AAAMlD;;AAKxB,AAAA,AAACX,AAEC,AAAA,AAAAC,AAAA,AAAYU,AAAG8F;AAAf,AAAA,AAAAvG,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA;;AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAA,AAAAD,AAAAF,AACY2D;AADZxD,AACkBM;AADlB,AAAA,AAAAL,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAA,AAAAD,AAAAF;AAAAG,AAC4BoG;AAD5B,AAAA,AAAAnG,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAE,AAAAiG;AAAA,AAAA,AAAAjG;AAAA,AAAYI,AAAG8F;AAAf,AACW,AAAA,AAAC5C,AAAMlD,AAAU8F;;AAG9B,AAAA,AAACzG,AAEC,AAAA,AAAAC,AAAA,AAAYU;AAAZ,AAAA,AAAAT,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA;;AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAA,AAAAD,AAAAF,AACY2D;AADZxD,AACkBM;AADlB,AAAA,AAAAL,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAE,AAAAmG;AAAA,AAAA,AAAAnG;AAAA,AAAYI;AAAZ,AACW,AAAA,AAAA,AAACkD,AAAMlD;;AAKpB,AAAA,AAACX,AAEC,AAAA,AAAAC,AAAA,AAAYU;AAAZ,AAAA,AAAAT,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA;;AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAA,AAAAD,AAAAF,AACY0G;AADZvG,AACqBM;AADrB,AAAA,AAAAL,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAD,AAAAF;AAAAG,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAE,AAAAoG;AAAA,AAAA,AAAApG;AAAA,AAAYI;AAAZ,AACW,AAAA,AAAA,AAAA,AAACiG,AAASjG;;AAGvB,AAAA,AAACX,AAEC,AAAA,AAAAC,AAAA,AAAYU;AAAZ,AAAA,AAAAT,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA;;AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAA,AAAAD,AAAAF,AACY0G;AADZvG,AACqBM;AADrB,AAAA,AAAAL,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAD,AAAAF;AAAAG,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAE,AAAAsG;AAAA,AAAA,AAAAtG;AAAA,AAAYI;AAAZ,AACW,AAAA,AAAA,AAAA,AAACiG,AAASjG;;AAKvB,AAAA,AAAMmG,AACHC;AADH,AAEE;AAAA,AACE,AAAAC,AAAY,AAACE,AAAWH;AAAxB,AAAA,AAAAC;AAAA,AAAAA,AAASC;AAAT,AACE,AAAQA;;AADV;;;;AAIJ,AAAA,AAACjH,AAEC,AAAA,AAAAC,AAAA,AAAAkH,AAAYxG;AAAZ,AAAA,AAAAyG,AAAAD;AAAA,AAAAnG,AAAAoG,AAAA,AAAA,AAAgB3G;AAAhB,AAAAO,AAAAoG,AAAA,AAAA,AAAkBpF;AAAlB,AAAA,AAAA9B,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA;;AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAA,AAAAD,AAAAF,AACYuH;AADZpH,AAAA,AAAA,AAAAD,AAAAF,AAC2B4G;AAD3BzG,AAAA,AAAA,AAAA,AAAAD,AAAAF;AAAAG,AACyD2B;AADzD,AAAA,AAAA1B,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA,AAAA,AAAAE,AAAA8G;AAAA,AAAA,AAAA9G;;AAAA,AAAAL,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA;;AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAA,AAAAD,AAAAF,AAEY2D;AAFZxD,AAEkBM;AAFlB,AAAA,AAAAL,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAA,AAAAD,AAAAF;AAAAG,AAEkC2B;AAFlC,AAAA,AAAA1B,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAE,AAAA+G;AAAA,AAAA,AAAA/G;AAAA,AAAAgH,AAAY5G;AAAZ,AAAA,AAAA6G,AAAAD;AAAA,AAAAvG,AAAAwG,AAAA,AAAA,AAAgB/G;AAAhB,AAAAO,AAAAwG,AAAA,AAAA,AAAkBxF;AAAlB,AACW,AAAA,AAACyF,AAAc,AAACX,AAAS,AAAA,AAAqB9E;;AAC9C,AAAA,AAAC6B,AAAMlD,AAAgBqB;;AAGpC,AAAA,AAAChC,AAEC,AAAA0H,AAAK/G;AAAL,AAAA,AAAAgH,AAAAD;AAAA,AAAA1G,AAAA2G,AAAA,AAAA,AAASlH;AAAT,AAAAO,AAAA2G,AAAA,AAAA,AAAW3F;AAAX,AACE,AAAA,AAAC6B,AAAMlD,AAAgBqB;;AAK3B,AAAA,AAAChC,AAEC,AAAKW,AAAGF;AAAR,AACE,AAAA,AAAA,AAACoD,AAAMlD;;AAIX,AAAA,AAACuB,AAEC,AAAA0F,AAAAC;AAAA,AAAA,AAAAC,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxF,AAAA,AAAAwF,AAAA,AAAA,AAAA,AAAA,AAAAvF,AAAAC,AAAAsF,AAAAA;AAAA,AAAArF,AAAAqF,AAAA,AAAanH;AAAboH,AAAAF;AAAA,AAAA7G,AAAA+G,AAAA,AAAA,AAAmBtH;AAAnBuH,AAAA,AAAAhH,AAAA+G,AAAA,AAAA;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA1F,AAAA,AAAA0F,AAAA,AAAA,AAAA,AAAA,AAAAzF,AAAAC,AAAAwF,AAAAA;AAAA,AAAAvF,AAAAuF,AAAA,AAA6BhG;AAA7B,AAAAS,AAAAuF,AAAA,AAAiCC;AAAjC,AACE,AAAMC,AAAO,AAAA,AAACtH,AAAOD,AAAsBc,AAAKO;AAAhD,AACE,AAAI,AAAA,AAACmG,AAAsBnG;AAA3B,AAAA,AACOkG;;AADP,AAAA,AAAA,AAAA,AAAA,AAEcA,AACaD,AAAMjG;;;AAOvC,AAAA,AAACE,AAEC,AAAAkG,AAAgB3H;AAAhB,AAAA,AAAA4H,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA/F,AAAA,AAAA+F,AAAA,AAAA,AAAA,AAAA,AAAA9F,AAAAC,AAAA6F,AAAAA;AAAA,AAAA5F,AAAA4F,AAAA,AAAMC;AAAN,AAAA,AAAA,AAAA,AAAA,AAAA,AACW5H,AACA,AAAA,AAAA,AAACmD,AACoB,AAAA,AAAA;AAHhC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAS0D,AAAA,AAAA,AAAA,AAAA,AAAA,AAAIyE;;AAIhE,AAAA,AAACpG,AAEC,AAAKzB,AAAEA;AAAP,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEe8H;;AAMjB,AAAA,AAACrG,AAEC,AAAAsG,AAAK/H;AAAL,AAAA,AAAAgI,AAAAD;AAAA,AAAAxH,AAAAyH,AAAA,AAAA,AAAQhI;AAAR,AAAAO,AAAAyH,AAAA,AAAA,AAAUC;AAAV,AACE,AAAMC,AAAO,AAACC,AAAgBF;AACxBR,AAAO,AAACW,AAAU,AAACC,AAAAA,AAAAA,AAAWC,AAAAA,AAAWJ;AAD/C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAE6BT,AACUA;;AAG3C,AAAA,AAAA,AAAChG,AAEE,AAAA,AAAA,AAAC8G,AACF,AAAAC,AAA6BxI;AAA7B,AAAA,AAAAyI,AAAAD;AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA5G,AAAA,AAAA4G,AAAA,AAAA,AAAA,AAAA,AAAA3G,AAAAC,AAAA0G,AAAAA;AAAA,AAAAzG,AAAAyG,AAAA,AAAaC;AAAb,AAAA,AAAA,AAAA,AAAA,AAC0B,AAACC,AAAoBD;;AAGjD,AAAA,AAACjH,AAEC,AAAAmH,AAAK5I;AAAL,AAAA,AAAA6I,AAAAD;AAAA,AAAArI,AAAAsI,AAAA,AAAA,AAAQ7I;AAAR,AAAAO,AAAAsI,AAAA,AAAA,AAAU3I;AAAV,AAAA,AAAA,AAC0BA;;AAK5B,AAAA,AAACuB,AAEC,AAAAqH,AAAK9I;AAAL,AAAA,AAAA+I,AAAAD;AAAA,AAAAvI,AAAAwI,AAAA,AAAA,AAAQ/I;AAAR,AAAAO,AAAAwI,AAAA,AAAA,AAAUb;AAAV,AAAA,AAAA,AACcA;;AAGhB,AAAA,AAACzG,AAEC,AAAAuH,AAAKhJ;AAAL,AAAA,AAAAiJ,AAAAD;AAAA,AAAAzI,AAAA0I,AAAA,AAAA,AAAQjJ;AAAR,AAAAO,AAAA0I,AAAA,AAAA,AAAU/I;AAAV,AAAA,AAAA,AACgBA;;AAGlB,AAAA,AAACuB,AAEC,AAAAyH,AAAKlJ;AAAL,AAAA,AAAAmJ,AAAAD;AAAA,AAAA3I,AAAA4I,AAAA,AAAA,AAAQnJ;AAAR,AAAAO,AAAA4I,AAAA,AAAA,AAAU3B;AAAV,AAAAjH,AAAA4I,AAAA,AAAA,AAAgB5H;AAAhB,AACE,AAAM6H,AAAI,AAACC;AACLC,AAAU,AAACC;AADjB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEMC,AAA8BJ,AAAeA,AAAeE;AAFlE,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGsC9B,AAAiBjG,AAAiB6H,AAAeA,AAAqBI,AACjFF;;AAG/B,AAAA,AAAC7H,AAEC,AAAAgI,AAAKzJ;AAAL,AAAA,AAAA0J,AAAAD;AAAA,AAAAlJ,AAAAmJ,AAAA,AAAA,AAAQ1J;AAAR,AAAAO,AAAAmJ,AAAA,AAAA,AAAUnI;AAAV,AAAA,AAAA,AACc,AAACuE,AAAK,AAAKvE;AAAL,AAAA,AAAA,AAAA,AAAA,AAAyCA;AAAO,AAACoI,AAAyBpI;;AAGhG,AAAA,AAACE,AAEC,AAAAmI,AAAK5J;AAAL,AAAA,AAAA6J,AAAAD;AAAA,AAAArJ,AAAAsJ,AAAA,AAAA,AAAQ7J;AAAR,AAAAO,AAAAsJ,AAAA,AAAA,AAAUtI;AAAV,AACE,AAAMuI,AAAa,AAAAC,AAAA,AAAA;AAAAC,AAAA,AAAA7H,AAGMa;AAHN,AAAA,AAAA+G,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;;AAApB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAI2B1I,AAAkB,AAAC2I,AAAMJ;;AAIxD,AAAA,AAACrI,AAEC,AAAA0I,AAAKnK;AAAL,AAAA,AAAAoK,AAAAD;AAAA,AAAA5J,AAAA6J,AAAA,AAAA,AAAQpK;AAAR,AAAAO,AAAA6J,AAAA,AAAA,AAAU7I;AAAV,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACwCA;;AAG1C,AAAA,AAACE,AAEC,AAAKzB,AAAEA;AAAP,AACE,AAAAqK,AAAgB,AAAA,AAAAlI,AAAA,AAAAoI,AAACC,AAAcC;AAAf,AAA2B,AAAA,AAAAtI,AAAAoI,AAAavH;;AAAxD,AAAA,AAAAqH;AAAA,AAAA,AAAAA,AAAWC;AAAX,AAAA,AAAA,AACgBA;;AADhB;;;AAIJ,AAAA,AAAC7I,AAEC,AAAKzB,AAAEA;AAAP,AACE,AAAAqK,AAAgB,AAAA,AAAAlI,AAAA,AAAAwI,AAACC,AAAcH;AAAf,AAA2B,AAAA,AAAAtI,AAAAwI,AAAa3H;;AAAxD,AAAA,AAAAqH;AAAA,AAAA,AAAAA,AAAWK;AAAX,AAAA,AAAA,AACgBA;;AADhB;;;AAIJ,AAAA,AAAMG,AACHC,AAAIC;AADP,AAEO,AAAAC,AAAA,AAAA;AAAAC,AAAA,AAAA9I,AAIMa;AAJNkI,AAIcG;AAJdF,AAIoBL;AAJpBM,AAIwBL;AAJxB,AAAA,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAJ,AAAAC,AAAAC,AAAAC,AAAAC,AAACnB,AAAAA,AAAAA;;AAOR,AAAA,AAAMqB,AACHR,AAAIC;AADP,AAEO,AAAAQ,AAAA,AAAA;AAAAC,AAAA,AAAArJ,AAIMa;AAJNyI,AAIcJ;AAJdK,AAIoBZ;AAJpBa,AAIwBZ;AAJxB,AAAA,AAAAQ,AAAAC,AAAAC,AAAAC,AAAAC,AAAAJ,AAAAC,AAAAC,AAAAC,AAAAC,AAAC1B,AAAAA,AAAAA;;AAOR,AAAA,AAAM2B,AACHd,AAAIC,AAAMc;AADb,AAEO,AAAAC,AAAA,AAAA;AAAAC,AAAA,AAAA5J,AAIMa;AAJNgJ,AAIcX;AAJdY,AAIoBnB;AAJpBoB,AAIwBnB;AAJxBoB,AAI8BN;AAJ9B,AAAA,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAL,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAClC,AAAAA,AAAAA;;AAOR,AAAA,AAACxI,AAEC,AAAA2K,AAAKpM;AAAL,AAAA,AAAAqM,AAAAD;AAAA,AAAA7L,AAAA8L,AAAA,AAAA,AAAQrM;AAAR,AAAAO,AAAA8L,AAAA,AAAA,AAAU9K;AAAV,AAAA,AAAA,AAAA,AAAA,AAE2B,AAAA+K,AAAI,AAACxH,AAAkBvD;AAAvB,AAAA,AAAA+K;AAAAA;;AAA4B/K;;;;AAGzD,AAAA,AAACE,AAEC,AAAA8K,AAAKvM;AAAL,AAAA,AAAAwM,AAAAD;AAAA,AAAAhM,AAAAiM,AAAA,AAAA,AAAQxM;AAAR,AAAAO,AAAAiM,AAAA,AAAA,AAAUjL;AAAV,AAAA,AAAA,AAAA,AAAA,AAC2B,AAAA+K,AAAI,AAACxH,AAAkBvD;AAAvB,AAAA,AAAA+K;AAAAA;;AAA4B/K;;;;AAGzD,AAAA,AAACE,AAEC,AAAAgL,AAAKzM;AAAL,AAAA,AAAA0M,AAAAD;AAAA,AAAAlM,AAAAmM,AAAA,AAAA,AAAQ1M;AAAR,AAAAO,AAAAmM,AAAA,AAAA,AAAUnL;AAAV,AAAA,AAAA,AAAA,AAAA,AAC2B,AAAA+K,AAAI,AAAC/G,AAAkBhE;AAAvB,AAAA,AAAA+K;AAAAA;;AAA4B/K;;;;AAGzD,AAAA,AAACE,AAEC,AAAAkL,AAAK3M;AAAL,AAAA,AAAA4M,AAAAD;AAAA,AAAApM,AAAAqM,AAAA,AAAA,AAAQ5M;AAAR,AAAAO,AAAAqM,AAAA,AAAA,AAAUrL;AAAV,AAAA,AAAA,AAAA,AAAA,AAC2B,AAAA+K,AAAI,AAAC/G,AAAkBhE;AAAvB,AAAA,AAAA+K;AAAAA;;AAA4B/K;;;;AAKzD,AAAA,AAAMsL,AACHtL,AAAIuL;AADP,AAEE,AAAMnK,AAAM,AAAA,AAAA,AAACqC,AAAyBzD;AAChCyL,AAAO,AAAA,AAAA,AAACC,AAA0B1L;AAClC2L,AAAQ,AAAC5B,AAAU,AAAA,AAAQ0B,AAAQ,AAAA,AAAcrK;AACjDkC,AAAgB,AAACC,AAAkBvD;AAHzCwL,AAIwC,AAAA,AAAA,AAAC/H,AAAyBH;AAJlEkI,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlL,AAAA,AAAAkL,AAAA,AAAA,AAAA,AAAA,AAAAjL,AAAAC,AAAAgL,AAAAA;AAAA,AAAA/K,AAAA+K,AAAA,AAIOI;AAJP,AAKE,AACE,AAAAC,AAAK,AAAA,AAAaJ;AAAlB,AAAA,AAAAI;AAA0B,AAAA,AAAO,AAAA,AAAczK;;AAA/CyK;;;AADF;;AAAA,AAEE,AAAA,AAAiBzK;AAFnB;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGsFpB,AACXsD,AAA+B,AAAKsI,AAAkBL,AAAkB,AAACzD,AACrF,AAAA,AAAQ2D,AAAwBE,AACrCrI;;;;;AAG9D,AAAA,AAACpD,AAEC,AAAA4L,AAAKrN;AAAL,AAAA,AAAAsN,AAAAD;AAAA,AAAA9M,AAAA+M,AAAA,AAAA,AAAQtN;AAAR,AAAAO,AAAA+M,AAAA,AAAA,AAAU/L;AAAV,AAAAhB,AAAA+M,AAAA,AAAA,AAAcR;AAAd,AACE,AAACD,AAAUtL,AAAIuL;;AAGnB,AAAA,AAAMS,AACHhM,AAAIiM,AAAIC;AADX,AAEE,AAAMT,AAAO,AAAA,AAAA,AAACC,AAA0B1L;AAClCoB,AAAM,AAAA,AAAA,AAACqC,AAAyBzD;AAChCmM,AAAK,AAAA,AAACC,AAAKH,AAAMC;AACjBG,AAAK,AAACD,AAAKH,AAAIC;AACfI,AAAQ,AAACtE;AAJf,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAKMuE,AACyB,AAAA,AAAK,AAAA,AAAcnL,AACnBkL,AAEAD;AACzBV,AAAa,AAACrC,AAAU,AAAA,AAAQmC,AAAQ,AAAA,AAAcrK,AACzC,AAAA,AAACoL,AAAQD;AAX5B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAYuB,AAAA,AAAQnL,AAAqB+K,AAAgB,AAACrE,AAC9C,AAAA,AAAQ2D,AACCE,AACJW;;AAG9B;;;;AAAA,AAAMG,AAGHzM;AAHH,AAIE,AAAMyL,AAAO,AAAA,AAAA,AAACC,AAA0B1L;AAClCoB,AAAM,AAAA,AAAA,AAACqC,AAAyBzD;AAChCsM,AAAQ,AAACtE;AAFf,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGMuE,AACyB,AAAA,AAAcnL,AACdkL;AAGzBX,AAAa,AAACrC,AAAU,AAAA,AAAQmC,AAAQ,AAAA,AAAK,AAAA,AAAcrK,AAC9C,AAAA,AAACoL,AAAQD;AAT5B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAUuB,AAAA,AAAQd,AAAwBE,AAC5BW;;AAG7B;;;AAAA,AAAMI,AAEHtL,AAAMqK;AAFT,AAGE,AAAMa,AAAU,AAACtE;AAAjB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AACMuE,AAAyB,AAAA,AAAK,AAAA,AAAcnL,AACnBkL;AAGzBX,AAAa,AAACrC,AAAU,AAAA,AAAQmC,AAAQ,AAAA,AAAcrK,AACzC,AAAA,AAACoL,AAAQD;AAN5B,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAOyD,AAAA,AAAYd,AACxBE,AACfW;;AAGhC,AAAA,AAAMK,AACH3M,AAAIiM,AAAIC;AADX,AAEE,AAAM9K,AAAY,AAAA,AAAA,AAACqC,AAAyBzD;AACtCyL,AAAY,AAAA,AAAA,AAACC,AAA0B1L;AACvC4M,AAAY,AAACC,AAAQ,AAAA,AAAapB;AAFxC,AAGE,AACE,AAAK,AAAA,AAAOS;AAAQ,AAACF,AAAYhM,AAAIiM,AAAIC;;AAD3C,AAEE,AAAK,AAACY,AAAOb,AAAKW;AAAa,AAACF,AAAUtL,AAAMqK;;AAFlD,AAGE,AAACqB,AAAOb;AAHV,AAAA,AAAA,AAAA,AAGqCjM;;AAHrC,AAIE,AAAA,AAAK,AAAA,AAAOkM,AAAOD;AAAK,AAACQ,AAAQzM;;AAJnC;;;;;;AAOJ,AAAA,AAACE,AAEC,AAAA6M,AAAKtO;AAAL,AAAA,AAAAuO,AAAAD;AAAA,AAAA/N,AAAAgO,AAAA,AAAA,AAAQvO;AAAR,AAAAO,AAAAgO,AAAA,AAAA,AAAUhN;AAAV,AAAAhB,AAAAgO,AAAA,AAAA,AAAcf;AAAd,AAAAjN,AAAAgO,AAAA,AAAA,AAAkBd;AAAlB,AACE,AAACS,AAAM3M,AAAIiM,AAAIC;;AAGnB,AAAA,AAAMe,AACHjN;AADH,AAEE,AAAMoB,AAAM,AAAA,AAAA,AAACqC,AAAyBzD;AAChCyL,AAAO,AAAA,AAAA,AAACC,AAA0B1L;AAClCkN,AAAU,AAAA,AAAA,AAAA,AAEK,AAAA,AAAAC,AAACC,AACD/J,AAEAI;AAHA,AAAS,AAAC4J,AAAE,AAAA,AAAK,AAAA,AAAcjM,AAAQ,AAAA,AAAA+L;AAFvC1B,AAEA,AAAA;AAJrB,AAAA,AAAA,AAQMc,AAAkB,AAAA,AAAQnL,AAAoB,AAACuH,AAAM,AAAA,AAAiBuE;AACtEvB,AAAQ,AAAC5B,AAAU,AAAA,AAAQ0B,AAAQ,AAAA,AAAcrK;AATvD,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAU4B,AAAA,AAAQqK,AAAwB,AAAA,AAAQrK,AAC7C,AAAA,AAAQ8L,AAA4BX,AACpC,AAAA,AAAQd,AAAwBE;;AAGzD,AAAA,AAACzL,AAEC,AAAAoN,AAAK7O;AAAL,AAAA,AAAA8O,AAAAD;AAAA,AAAAtO,AAAAuO,AAAA,AAAA,AAAQ9O;AAAR,AAAAO,AAAAuO,AAAA,AAAA,AAAUvN;AAAV,AACE,AAACiN,AAAOjN;;AAGZ,AAAA,AAAMwN,AACHxN,AAAIyN;AADP,AAEE,AAAMhC,AAAO,AAAA,AAAA,AAACC,AAA0B1L;AAClC0N,AAAQ,AAAChC,AAAc,AAAA,AAAQD;AADrC,AAAA,AAAA,AAEMc,AAAsBvM,AAAiB,AAAA,AAAK,AAAA,AAAcyL;AAC1DkC,AAAqB,AAACrE,AAAU,AAAA,AAAQoE,AAAS,AAAA,AAAcjC,AAC1C,AAAA,AAACe,AAAQD;AAJpC,AAME,AAAU,AAAAxB,AAAI,AAAA,AAAaU;AAAjB,AAAA,AAAAV;AAAAA;;AAAyB,AAACsC,AAAE,AAAA,AAAY5B,AAAQgC;;;AAA1D;;AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAC4B,AAAA,AAAQhC,AAAoCzL,AACjD,AAAA,AAAQ0N,AAAyBC;;;AAG5D,AAAA,AAACzN,AAEC,AAAA0N,AAAAC;AAAA,AAAA,AAAAC,AAAAF;AAAAE,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAxN,AAAA,AAAAwN,AAAA,AAAA,AAAA,AAAA,AAAAvN,AAAAC,AAAAsN,AAAAA;AAAA,AAAArN,AAAAqN,AAAA,AAAMxH;AAANyH,AAAAF;AAAA,AAAA7O,AAAA+O,AAAA,AAAA,AAAiBtP;AAAjB,AAAAO,AAAA+O,AAAA,AAAA,AAAmB/N;AAAnB,AACE,AAAMyN,AAAiB,AAAA,AAAA,AAAA,AAAA,AAAC/K,AAAO4D;AAA/B,AACE,AAACkH,AAASxN,AAAIyN;;AAGpB;;;AAAA,AAAMO,AAEHC,AAAOC,AAAcC;AAFxB,AAGE,AAAA,AAAA,AAAA,AAAA,AAAMC,AAA6B,AAAA,AAAYH;AACzCI,AAAsB,AAACtE,AAAU,AAAA,AAAQmE,AAAe,AAAA,AAAcD;AACtEK,AAA2B,AAAChF,AAAU,AAAA,AAAO6E,AAAQ,AAAA,AAAA,AAC1B,AAAA,AAAC3B,AAAQ4B;AAH1C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIgB,AAAA,AAAQF,AAA2C,AAAA,AAAYD,AACpE,AAAA,AAAQC,AAA+BG,AACvC,AAAA,AAAQF,AAAwBG;;AAG7C;;;AAAA,AAAMC,AAEHC,AAAEC,AAAEnE;AAFP,AAGE,AAAI,AAAGkE,AAAEC;AACP,AAAK,AAAGD,AAAElE,AAAG,AAAGA,AAAEmE;;AAClB,AAAK,AAAGA,AAAEnE,AAAG,AAAGA,AAAEkE;;;AAGtB;;;;;AAAA,AAAME,AAKHT,AAAOE,AAAO1C;AALjB,AAME,AAAMkD,AAAQ,AAAA,AAAcV;AACtBW,AAAQ,AAAA,AAAcT;AAD5B,AAEE,AAAI,AAACd,AAAEsB,AAAQ,AAAA,AAAKC;AAApB;;AAEE,AAAA,AAAA,AAAA,AAAMR,AAAyB,AAAA,AAAQH,AAAqBW;AACtDC,AAAiB,AAAI,AAAGF,AAAQC,AAASzM,AAAI2M;AAC7CnD,AAAsB,AAAAoD,AAAA,AAAA,AASA,AAAA,AAACvC,AAAQ4B;AATTY,AAAA,AAAApO,AAQMa;AARNwN,AAQc,AAAA,AAAQxD;AARtByD,AAQ8BP;AAR9BQ,AAQsC,AAAA,AAAKP;AAR3CQ,AAQoDb;AARpDc,AAQ4DR;AAR5D,AAAA,AAAAE,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAN,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAC3G,AAAAA,AAAAA;;AAF7B,AAAA,AAAA,AAAA,AAAA,AAYW,AAAA,AAAQ+C,AAAwBE;;;AAGjD,AAAA,AAAM2D,AACHrB,AAAOE,AAAOD,AAAcqB;AAD/B,AAEE,AAAA,AAAA,AAAA,AAAMhD,AAA8B,AAAA,AAAQ0B,AAAqB,AAAA,AAAcE;AACzEE,AAAsB,AAACtE,AAAU,AAAA,AAAQmE,AAAe,AAAA,AAAcD;AACtEK,AAA2B,AAAChF,AAAU,AAAA,AAAQiG,AAAe,AAAA,AAAK,AAAA,AAAcpB,AACrD,AAAA,AAAC3B,AAAQD;AAH1C,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAIgB,AAAA,AAAQ2B,AAA+B,AAAA,AAAQD,AACpD,AAAA,AAAQC,AAA+BG,AACvC,AAAA,AAAQkB,AAA+BjB;;AAGpD;;;AAAA,AAAMkB,AAEHvB,AAAOC,AAAcC;AAFxB,AAGE,AAAA,AAAA,AAAA,AAAMC,AAAyB,AAAA,AAAQH,AAAqB,AAAA,AAAcE;AACpExC,AAAQ,AAAC5B,AAAU,AAAA,AAAQmE,AAAe,AAAA,AAAcD;AAD9D,AAEE,AAAA,AAACzB,AAAQ4B,AAAkBzC;;AAG/B;;;AAAA,AAAM8D,AAEHxB,AAAOC,AAAcC,AAAOoB;AAF/B,AAGE,AAAA,AAAA,AAAA,AAAMnB,AAAyB,AAAA,AAAQH,AAAqB,AAAA,AAAK,AAAA,AAAcE;AACzEE,AAAwB,AAACtE,AAAU,AAAA,AAAQmE,AAAe,AAAA,AAAcD;AAD9E,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEgB,AAAA,AAAQC,AAA+B,AAAA,AAAQD,AACpD,AAAA,AAAQC,AAA+BG,AACvC,AAAA,AAAQkB,AAAgCnB;;AAIrD,AAAA,AAAMsB,AACHC,AAAWC,AAAWC;AADzB,AAEE,AAAM5B,AAAc,AAAA,AAAA,AAACxK,AAAyBkM;AACxCxB,AAAc,AAAA,AAAA,AAAC1K,AAAyBmM;AACxC1B,AAAc,AAAA,AAAA,AAACxC,AAA0BiE;AACzCJ,AAAc,AAAA,AAAA,AAAC7D,AAA0BkE;AACzCE,AAAa,AAACzC,AAAEa,AAAcqB;AAJpC,AAAA,AAAA,AAMG,AAAA,AAAA,AAAA,AAAA,AAAA,AACE,AAAA,AAAClC,AAAEwC,AAAsC,AAAC7B,AAAuBC,AAAOC,AAAcC,AACtF,AAAK,AAAA,AAACd,AAAEwC,AAAaC,AAAoB,AAACN,AAAuBvB,AAAOC,AAAcC,AACtF,AAAK,AAAA,AAACd,AAAEwC,AAAa,AAAKC,AAAe,AAACL,AAAuBxB,AAAOC,AAAcC,AAAOoB,AAC7F,AAAK,AAAA,AAAClC,AAAEwC,AAAaC,AAAoB,AAACpB,AAAuBT,AAAOE,AAAOD,AAC/E,AAAK,AAAA,AAACb,AAAEwC,AAAa,AAAKC,AAAe,AAACR,AAAuBrB,AAAOE,AAAOD,AAAcqB;;AAGpG,AAAA,AAACrP,AAEC,AAAA,AAAAjC,AAAA,AAAA8R,AAAYtR;AAAZ,AAAA,AAAAuR,AAAAD;AAAA,AAAA/Q,AAAAgR,AAAA,AAAA,AAAevR;AAAf,AAAAO,AAAAgR,AAAA,AAAA,AAAiBL;AAAjB,AAAA3Q,AAAAgR,AAAA,AAAA,AAA4BJ;AAA5B,AAAA5Q,AAAAgR,AAAA,AAAA,AAAuCH;AAAvC,AAAA,AAAA3R,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA;;AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAA,AAAAD,AAAAF,AACYwR;AADZrR,AACwBsR;AADxB,AAAA,AAAArR,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAD,AAAAF;AAAAG,AACmCuR;AADnC,AAAA,AAAAtR,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAD,AAAAF;AAAAG,AAC8CwR;AAD9C,AAAA,AAAAvR,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;;AAAA,AAAA,AAAAC,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAE,AAAA0R;AAAA,AAAA,AAAA1R;AAAA,AAAA2R,AAAYzR;AAAZ,AAAA,AAAA0R,AAAAD;AAAA,AAAAlR,AAAAmR,AAAA,AAAA,AAAe1R;AAAf,AAAAO,AAAAmR,AAAA,AAAA,AAAiBR;AAAjB,AAAA3Q,AAAAmR,AAAA,AAAA,AAA4BP;AAA5B,AAAA5Q,AAAAmR,AAAA,AAAA,AAAuCN;AAAvC,AACW,AAACH,AAAYC,AAAWC,AAAWC;;AAIhD,AAAA,AAAC3P,AAEC,AAAAkQ,AAAK3R;AAAL,AAAA,AAAA4R,AAAAD;AAAA,AAAApR,AAAAqR,AAAA,AAAA,AAAQ5R;AAAR,AAAAO,AAAAqR,AAAA,AAAA,AAAUrQ;AAAV,AAAAhB,AAAAqR,AAAA,AAAA,AAAcC;AAAd,AACE,AAAMG,AAAM,AAACC,AAA2BJ;AAClClP,AAAM,AAAA,AAAA,AAACqC,AAAyBzD;AADtCuQ,AAE6BnP;AAF7BmP,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAjQ,AAAA,AAAAiQ,AAAA,AAAA,AAAA,AAAA,AAAAhQ,AAAAC,AAAA+P,AAAAA;AAAA,AAAA9P,AAAA8P,AAAA,AAEOI;AACDlF,AAAO,AAAA,AAAA,AAACC,AAA0B1L;AAHxCwQ,AAIoB/E;AAJpB+E,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAAA,AAAA,AAAA,AAAAlQ,AAAA,AAAAkQ,AAAA,AAAA,AAAA,AAAA,AAAAjQ,AAAAC,AAAAgQ,AAAAA;AAAA,AAAA/P,AAAA+P,AAAA,AAIOI;AACD/I,AAAI,AAACC;AACL+I,AAAW,AAACC,AAAY,AAAKC,AAAEzG;AAAP,AACE,AAAM0G,AAAM,AAAA,AAAA,AAAC5E,AAAK9B;AACZkE,AAAE,AAAI,AAAI,AAAA,AAACnB,AAAE2D,AACH,AAAA,AAAC3D,AAAE2D,AACT,AAAA,AAAC5E,AAAK9B,AACNA;AAJV,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAKiB,AAACtC,AACDH,AACAA,AACA,AAAA,AAAA,AAAKkJ,AAAEJ,AACPnC;AACnBiC;AACxB9E,AAAQ,AAACtB,AAAWuG,AAAKD,AAAQ,AAAChI,AAAM8H;AACxCQ,AAAS,AAACzE,AAAOqE,AAAWlF;AAnBlC,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAoBiCiF,AAAqBK;;AAG1D,AAAA,AAAMC,AACHvC,AAAQC;AADX,AAEE,AAAMuC,AAAW,AAAAC,AAAA,AAAA;AAAAC,AAAA,AAAAzQ,AAGMa;AAHN6P,AAGc3C;AAHd,AAAA,AAAAyC,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAAC5I,AAAAA,AAAAA;;AAAlB,AAAA,AAAA,AAIM6I,AAAmBJ,AAAyB,AAAI,AAAGxC,AAAQC,AACb,AAAA,AAAKA,AACLA;AAC9CC,AAAW,AAAI,AAAGF,AAAQC,AAASE,AAAI3M;AACvCqP,AAAiB,AAAAC,AAAA,AAAA,AAWA,AAAA,AAACjF,AAAQ+E;AAXTG,AAAA,AAAA9Q,AAOMa;AAPNkQ,AAOchD;AAPdiD,AAOsB,AAAI,AAAGjD,AAAQC,AACbA,AACA,AAAA,AAAKA;AAT7BiD,AAUKtD;AAVLuD,AAUajD;AAVb,AAAA,AAAA4C,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAAAL,AAAAC,AAAAC,AAAAC,AAAAC,AAAAC,AAACpJ,AAAAA,AAAAA;;AARxB,AAoBE8I;;AAGJ,AAAA,AAACtR,AAEC,AAAA,AAAAjC,AAAA,AAAA8T,AAAYtT;AAAZ,AAAA,AAAAuT,AAAAD;AAAA,AAAA/S,AAAAgT,AAAA,AAAA,AAAevT;AAAf,AAAAO,AAAAgT,AAAA,AAAA,AAAiBI;AAAjB,AAAApT,AAAAgT,AAAA,AAAA,AAA8BK;AAA9B,AAAA,AAAAnU,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA;;AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAA,AAAA,AAAA,AACiC,AAAC6S,AAAwBkB,AAAaC;AADvE,AAAA,AAAA/T,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAE,AAAA0T;AAAA,AAAA,AAAA1T;AAAA,AAAA2T,AAAYzT;AAAZ,AAAA,AAAA0T,AAAAD;AAAA,AAAAlT,AAAAmT,AAAA,AAAA,AAAe1T;AAAf,AAAAO,AAAAmT,AAAA,AAAA,AAAiBC;AAAjB,AAAApT,AAAAmT,AAAA,AAAA,AAA8BE;AAA9B,AAAA,AAAA,AAAA,AAAA,AACiC,AAACnB,AAAwBkB,AAAaC;;AAGzE,AAAA,AAAMC,AACH3D,AAAQC;AADX,AAEE,AAAMuC,AAAW,AAAAoB,AAAA,AAAA;AAAAC,AAAA,AAAA5R,AAGMa;AAHNgR,AAGc9D;AAHd,AAAA,AAAA4D,AAAAC,AAAAC,AAAAF,AAAAC,AAAAC,AAAC/J,AAAAA,AAAAA;;AAAlB,AAAA,AAAA,AAIM6I,AAAmBJ,AAAyBvC;AAC5C4C,AAAiB,AAAAkB,AAAA,AAAA,AAQA,AAAA,AAAClG,AAAQ+E;AARToB,AAAA,AAAA/R,AAOMa;AAPNmR,AAOcjE;AAPdkE,AAOsB,AAAA,AAAKjE;AAP3BkE,AAOoCvE;AAPpC,AAAA,AAAAmE,AAAAC,AAAAC,AAAAC,AAAAC,AAAAJ,AAAAC,AAAAC,AAAAC,AAAAC,AAACpK,AAAAA,AAAAA;;AALxB,AAcE8I;;AAGJ,AAAA,AAACtR,AAEC,AAAA,AAAAjC,AAAA,AAAA8U,AAAYtU;AAAZ,AAAA,AAAAuU,AAAAD;AAAA,AAAA/T,AAAAgU,AAAA,AAAA,AAAevU;AAAf,AAAAO,AAAAgU,AAAA,AAAA,AAAiBZ;AAAjB,AAAApT,AAAAgU,AAAA,AAAA,AAA8BX;AAA9B,AAAA,AAAAnU,AAAA;AAAA,AAAA,AAAA,AAAA,AAAAC,AAAA,AAAA;;AAAA,AAAAC,AAAAF;AAAAG,AAAA,AAAA,AAAA,AAAA,AACiC,AAACiU,AAAwBF,AAAaC;AADvE,AAAA,AAAA/T,AAAA,AAAA,AAAAD,AAAA,AAAA,AAAA,AAAA,AAAA;;AAAAA;AAAA,AAAAE,AAAA0U;AAAA,AAAA,AAAA1U;AAAA,AAAA2U,AAAYzU;AAAZ,AAAA,AAAA0U,AAAAD;AAAA,AAAAlU,AAAAmU,AAAA,AAAA,AAAe1U;AAAf,AAAAO,AAAAmU,AAAA,AAAA,AAAiBf;AAAjB,AAAApT,AAAAmU,AAAA,AAAA,AAA8Bd;AAA9B,AAAA,AAAA,AAAA,AAAA,AACiC,AAACC,AAAwBF,AAAaC","names":["re_frame.core.reg_event_db","day8.re-frame.tracing/is-trace-enabled?","+debux-dbg-opts+","debux.common.util/send-form!","opts__50934__auto__","result__50935__auto__","debux.common.util/send-trace!","e","e60477","_","athens.db/rfdb","db","cljs.core.update","cljs.core/not","p__60478","vec__60479","cljs.core.nth","G__60484","fexpr__60483","e60482","p__60485","vec__60486","selected-page","fexpr__60489","cljs.core/set","cljs.core/conj","p__60490","vec__60491","item","cljs.core.update_in","p__60494","vec__60495","uid","cljs.core/dissoc","re_frame.core.reg_event_fx","p__60498","p__60499","map__60500","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","vec__60501","G__60506","cljs.core/deref","G__60507","G__60508","e60505","p__60509","p__60510","map__60511","vec__60512","block","G__60516","G__60517","G__60518","datascript.core/pull","athens.db/dsdb","new-item","cljs.core.merge","new-items","cljs.core.assoc","inc-items","cljs.core/reduce-kv","m","k","v","cljs.core/inc","sorted-items","cljs.core.into","cljs.core/sorted-map-by","k1","k2","cljs.core/compare","cljs.core.get_in","p__60519","vec__60520","p__60523","vec__60524","uids","cljs.core/concat","p__60527","vec__60528","selected-items","first-item","cljs.core/first","prev-block-uid-","athens.db/prev-block-uid","prev-block","athens.db/get-block","new-vec","p__60531","vec__60532","last-item","cljs.core/last","next-block-uid-","athens.db/next-block-uid","cljs.core.conj","p__60535","p__60536","map__60537","vec__60538","retract-vecs","cljs.core.mapv","e60542","alert","e60543","e60544","cljs.core/assoc-in","e60545","athens.events/focus-el","id","temp__5733__auto__","el","goog.dom/getElement","p__60546","vec__60547","e60550","e60551","p__60552","vec__60553","js/setTimeout","p__60556","vec__60557","p__60560","p__60561","map__60562","vec__60563","map__60566","title","new-db","athens.db/e-by-av","p__60569","map__60570","rfdb","athens.db/athens-url","p__60572","vec__60573","json-str","datoms","athens.db/str-to-db-tx","datascript.core/db-with","datascript.core/empty-db","athens.db/schema","re_frame.core.inject_cofx","p__60576","map__60577","local-storage","datascript.transit/read-transit-str","p__60579","vec__60580","p__60583","vec__60584","p__60587","vec__60588","p__60591","vec__60592","now","athens.util/now-ts","child-uid","athens.util/gen-block-uid","child","p__60595","vec__60596","athens.db/get-children-recursively","p__60599","vec__60600","sidebar-ents","G__60603","G__60604","datascript.core/q","cljs.core/count","p__60605","vec__60606","temp__5735__auto__","prev","p1__60609#","athens.db/find-prev","athens.db/history","next","p1__60610#","athens.db/find-next","athens.events/inc-after","eid","order","G__60611","G__60612","G__60613","G__60614","G__60615","athens.db/rules","athens.events/dec-after","G__60616","G__60617","G__60618","G__60619","G__60620","athens.events/plus-after","x","G__60621","G__60622","G__60623","G__60624","G__60625","G__60626","p__60627","vec__60628","or__4126__auto__","p__60631","vec__60632","p__60635","vec__60636","p__60639","vec__60640","athens.events/backspace","value","map__60643","parent","athens.db/get-parent","reindex","prev-block-string","and__4115__auto__","p__60645","vec__60646","athens.events/split-block","val","index","head","cljs.core.subs","tail","new-uid","new-block","cljs.core.concat","athens.events/bump-up","athens.events/new-block","athens.events/enter","root-block?","cljs.core/boolean","cljs.core/empty?","p__60649","vec__60650","athens.events/indent","older-sib","p1__60653#","cljs.core.filter","cljs.core._EQ_","p__60654","vec__60655","athens.events/unindent","context-root-uid","grandpa","reindex-grandpa","p__60658","p__60659","map__60660","vec__60661","athens.events/drop-child","source","source-parent","target","new-source-block","reindex-source-parent","reindex-target-parent","athens.events/between","s","t","athens.events/drop-above-same-parent","s-order","t-order","inc-or-dec","cljs.core/dec","G__60665","G__60666","G__60667","G__60668","G__60669","G__60670","G__60671","athens.events/drop-above-diff-parent","target-parent","athens.events/drop-below-same-parent","athens.events/drop-below-diff-parent","athens.events/drop-bullet","source-uid","target-uid","kind","same-parent?","p__60672","vec__60673","e60676","p__60677","vec__60678","p__60681","vec__60682","text","map__60685","map__60686","lines","clojure.string/split-lines","b-order","p-id","new-datoms","cljs.core.map_indexed","i","start","children","athens.events/left-sidebar-drop-above","source-eid","G__60689","G__60690","G__60691","new-source","new-indices","G__60692","G__60693","G__60694","G__60695","G__60696","G__60697","p__60698","vec__60699","e60702","p__60703","vec__60704","source-order","target-order","athens.events/left-sidebar-drop-below","G__60707","G__60708","G__60709","G__60710","G__60711","G__60712","G__60713","G__60714","p__60715","vec__60716","e60719","p__60720","vec__60721"],"sourcesContent":["(ns athens.events\n  (:require\n    [athens.db :as db :refer [rules get-children-recursively]]\n    [athens.util :refer [now-ts gen-block-uid]]\n    [datascript.core :as d]\n    [datascript.transit :as dt]\n    [day8.re-frame.async-flow-fx]\n    [day8.re-frame.tracing :refer-macros [fn-traced]]\n    [goog.dom :refer [getElement]]\n    [re-frame.core :refer [reg-event-db reg-event-fx inject-cofx]]))\n\n\n;; -- re-frame app-db events ---------------------------------------------\n\n(reg-event-db\n  :init-rfdb\n  (fn-traced [_ _]\n             db/rfdb))\n\n\n(reg-event-db\n  :athena/toggle\n  (fn [db _]\n    (update db :athena/open not)))\n\n\n(reg-event-db\n  :athena/update-recent-items\n  (fn-traced [db [_ selected-page]]\n             (when (nil? ((set (:athena/recent-items db)) selected-page))\n               (update db :athena/recent-items conj selected-page))))\n\n\n(reg-event-db\n  :devtool/toggle\n  (fn [db _]\n    (update db :devtool/open not)))\n\n\n(reg-event-db\n  :left-sidebar/toggle\n  (fn [db _]\n    (update db :left-sidebar/open not)))\n\n\n(reg-event-db\n  :right-sidebar/toggle\n  (fn [db _]\n    (update db :right-sidebar/open not)))\n\n\n(reg-event-db\n  :right-sidebar/toggle-item\n  (fn [db [_ item]]\n    (update-in db [:right-sidebar/items item :open] not)))\n\n\n;; TODO: dec all indices > closed item\n(reg-event-db\n  :right-sidebar/close-item\n  (fn [db [_ uid]]\n    (update db :right-sidebar/items dissoc uid)))\n\n\n;; TODO: change right sidebar items from map to datascript\n(reg-event-fx\n  :right-sidebar/open-item\n  (fn-traced [{:keys [db]} [_ uid]]\n             (let [block     (d/pull @db/dsdb '[:node/title :block/string] [:block/uid uid])\n                   new-item  (merge block {:open true :index -1})\n                   new-items (assoc (:right-sidebar/items db) uid new-item)\n                   inc-items (reduce-kv (fn [m k v] (assoc m k (update v :index inc)))\n                                        {}\n                                        new-items)\n                   sorted-items (into (sorted-map-by (fn [k1 k2]\n                                                       (compare\n                                                         [(get-in new-items [k1 :index]) k2]\n                                                         [(get-in new-items [k2 :index]) k1]))) inc-items)]\n               {:db (assoc db :right-sidebar/items sorted-items)\n                :dispatch (when (false? (:right-sidebar/open db))\n                            [:right-sidebar/toggle])})))\n\n\n(reg-event-db\n  :dragging-global/toggle\n  (fn [db _]\n    (update db :dragging-global not)))\n\n\n(reg-event-db\n  :selected/add-item\n  (fn [db [_ uid]]\n    (update db :selected/items conj uid)))\n\n\n(reg-event-db\n  :selected/add-items\n  (fn [db [_ uids]]\n    (update db :selected/items concat uids)))\n\n\n(reg-event-db\n  :selected/clear-items\n  (fn [db _]\n    (assoc db :selected/items [])))\n\n\n(reg-event-db\n  :selected/up\n  (fn [db [_ selected-items]]\n    (let [first-item (first selected-items)\n          prev-block-uid- (db/prev-block-uid first-item)\n          prev-block (db/get-block [:block/uid prev-block-uid-])\n         ;;parent (db/get-parent [:block/uid first-item])\n          new-vec (cond\n                   ;; if prev-block is root node TODO: (OR context root), don't do anything\n                    (:node/title prev-block) nil\n                   ;; if prev block is parent, replace head of vector with parent\n                   ;; TODO needs to replace all children blocks of the parent\n                   ;; TODO: needs to delete blocks recursively. :db/retractEntity does not delete recursively, which would create orphan blocks\n                   ;;(= (:block/uid parent) prev-block-uid-) (assoc selected-items 0 prev-block-uid-)\n                    :else (into [prev-block-uid-] selected-items))]\n      (assoc db :selected/items new-vec))))\n\n\n(reg-event-db\n  :selected/down\n  (fn [db [_ selected-items]]\n    (let [last-item (last selected-items)\n          next-block-uid- (db/next-block-uid last-item)\n          new-vec (conj selected-items next-block-uid-)]\n      (assoc db :selected/items new-vec))))\n\n\n;; TODO: minus-after to reindex but what about nested blocks?\n(reg-event-fx\n  :selected/delete\n  (fn [{:keys [db]} [_ selected-items]]\n    (let [retract-vecs (mapv (fn [uid] [:db/retractEntity [:block/uid uid]])\n                             selected-items)]\n      {:dispatch [:transact retract-vecs]\n       :db       (assoc db :selected/items [])})))\n\n\n;; Alerts\n\n(reg-event-db\n  :alert/set\n  (fn-traced [db alert]\n             (assoc db :alert alert)))\n\n\n(reg-event-db\n  :alert/unset\n  (fn-traced [db]\n             (assoc db :alert nil)))\n\n\n;; Loading\n\n(reg-event-db\n  :loading/set\n  (fn-traced [db]\n             (assoc-in db [:loading?] true)))\n\n\n(reg-event-db\n  :loading/unset\n  (fn-traced [db]\n             (assoc-in db [:loading?] false)))\n\n\n;; Block Events\n;; TODO: refactor to an effect\n(defn focus-el\n  [id]\n  (fn []\n    (if-let [el (getElement id)]\n      (.focus el))))\n\n\n(reg-event-db\n  :editing/uid\n  (fn-traced [db [_ uid]]\n             (js/setTimeout (focus-el (str \"editable-uid-\" uid)) 300)\n             (assoc db :editing/uid uid)))\n\n\n(reg-event-db\n  :tooltip/uid\n  (fn [db [_ uid]]\n    (assoc db :tooltip/uid uid)))\n\n\n;; Daily Notes\n\n(reg-event-db\n  :daily-notes/reset\n  (fn [db _]\n    (assoc db :daily-notes/items [])))\n\n\n;; TODO: don't use app-db, use dsdb\n(reg-event-fx\n  :daily-note/next\n  (fn [{:keys [db]} [_ {:keys [uid title]}]]\n    (let [new-db (update db :daily-notes/items conj uid)]\n      (if (db/e-by-av :block/uid uid)\n        {:db new-db}\n        {:db        new-db\n         :dispatch [:page/create title uid]}))))\n\n\n;; -- event-fx and Datascript Transactions -------------------------------\n\n;; Import/Export\n\n(reg-event-fx\n  :get-db/init\n  (fn [{rfdb :db} _]\n    {:db (-> db/rfdb\n             (assoc :loading? true))\n     :async-flow {:first-dispatch (if false\n                                    [:local-storage/get-db]\n                                    [:http/get-db])\n                  :rules          [{:when :seen?\n                                    :events :reset-conn\n                                    :dispatch-n [[:loading/unset]\n                                                 [:navigate (-> rfdb :current-route :data :name)]]\n                                    :halt? true}]}}))\n\n\n(reg-event-fx\n  :http/get-db\n  (fn [_ _]\n    {:http {:method :get\n            :url db/athens-url\n            :opts {:with-credentials? false}\n            :on-success [:http-success/get-db]\n            :on-failure [:alert/set]}}))\n\n\n(reg-event-fx\n  :http-success/get-db\n  (fn [_ [_ json-str]]\n    (let [datoms (db/str-to-db-tx json-str)\n          new-db (d/db-with (d/empty-db db/schema) datoms)]\n      {:dispatch-n [[:reset-conn new-db]\n                    [:local-storage/set-db new-db]]})))\n\n\n(reg-event-fx\n  :local-storage/get-db\n  [(inject-cofx :local-storage \"datascript/DB\")]\n  (fn [{:keys [local-storage]} _]\n    {:dispatch [:reset-conn (dt/read-transit-str local-storage)]}))\n\n\n(reg-event-fx\n  :local-storage/set-db\n  (fn [_ [_ db]]\n    {:local-storage/set-db! db}))\n\n\n;; Datascript\n\n(reg-event-fx\n  :transact\n  (fn [_ [_ datoms]]\n    {:transact! datoms}))\n\n\n(reg-event-fx\n  :reset-conn\n  (fn [_ [_ db]]\n    {:reset-conn! db}))\n\n\n(reg-event-fx\n  :page/create\n  (fn [_ [_ title uid]]\n    (let [now (now-ts)\n          child-uid (gen-block-uid)\n          child {:db/id -2 :create/time now :edit/time now :block/uid child-uid :block/order 0 :block/open true :block/string \"\"}]\n      {:transact! [{:db/id -1 :node/title title :block/uid uid :create/time now :edit/time now :block/children [child]}]\n       :dispatch [:editing/uid child-uid]})))\n\n\n(reg-event-fx\n  :page/delete\n  (fn [_ [_ uid]]\n    {:transact! (mapv (fn [uid] [:db/retractEntity [:block/uid uid]]) (get-children-recursively uid))}))\n\n\n(reg-event-fx\n  :page/add-shortcut\n  (fn [_ [_ uid]]\n    (let [sidebar-ents (d/q '[:find ?e\n                              :where\n                              [?e :page/sidebar _]]\n                            @db/dsdb)]\n      {:transact! [{:block/uid uid :page/sidebar (count sidebar-ents)}]})))\n\n\n;; TODO: reindex\n(reg-event-fx\n  :page/remove-shortcut\n  (fn [_ [_ uid]]\n    {:transact! [[:db/retract [:block/uid uid] :page/sidebar]]}))\n\n\n(reg-event-fx\n  :undo\n  (fn [_ _]\n    (when-let [prev (db/find-prev @db/history #(identical? @db/dsdb %))]\n      {:reset-conn! prev})))\n\n\n(reg-event-fx\n  :redo\n  (fn [_ _]\n    (when-let [next (db/find-next @db/history #(identical? @db/dsdb %))]\n      {:reset-conn! next})))\n\n\n(defn inc-after\n  [eid order]\n  (->> (d/q '[:find ?ch ?new-o\n              :keys db/id block/order\n              :in $ % ?p ?at\n              :where (inc-after ?p ?at ?ch ?new-o)]\n            @db/dsdb rules eid order)))\n\n\n(defn dec-after\n  [eid order]\n  (->> (d/q '[:find ?ch ?new-o\n              :keys db/id block/order\n              :in $ % ?p ?at\n              :where (dec-after ?p ?at ?ch ?new-o)]\n            @db/dsdb rules eid order)))\n\n\n(defn plus-after\n  [eid order x]\n  (->> (d/q '[:find ?ch ?new-o\n              :keys db/id block/order\n              :in $ % ?p ?at ?x\n              :where (plus-after ?p ?at ?ch ?new-o ?x)]\n            @db/dsdb rules eid order x)))\n\n\n(reg-event-fx\n  :up\n  (fn [_ [_ uid]]\n   ;; FIXME: specify behavior when going up would go to title or context-root\n    {:dispatch [:editing/uid (or (db/prev-block-uid uid) uid)]}))\n\n\n(reg-event-fx\n  :left\n  (fn [_ [_ uid]]\n    {:dispatch [:editing/uid (or (db/prev-block-uid uid) uid)]}))\n\n\n(reg-event-fx\n  :down\n  (fn [_ [_ uid]]\n    {:dispatch [:editing/uid (or (db/next-block-uid uid) uid)]}))\n\n\n(reg-event-fx\n  :right\n  (fn [_ [_ uid]]\n    {:dispatch [:editing/uid (or (db/next-block-uid uid) uid)]}))\n\n\n;; no-op if root 0th child\n;; otherwise delete block and join with previous block\n(defn backspace\n  [uid value]\n  (let [block (db/get-block [:block/uid uid])\n        parent (db/get-parent [:block/uid uid])\n        reindex (dec-after (:db/id parent) (:block/order block))\n        prev-block-uid- (db/prev-block-uid uid)\n        {prev-block-string :block/string} (db/get-block [:block/uid prev-block-uid-])]\n    (cond\n      (and (:node/title parent) (zero? (:block/order block))) nil\n      (:block/children block) nil\n      :else {:dispatch-later [{:ms 0 :dispatch [:transact [[:db/retractEntity [:block/uid uid]]\n                                                           {:db/id [:block/uid prev-block-uid-] :block/string (str prev-block-string value) :edit/time (now-ts)}\n                                                           {:db/id (:db/id parent) :block/children reindex}]]}\n                              {:ms 10 :dispatch [:editing/uid prev-block-uid-]}]})))\n\n\n(reg-event-fx\n  :backspace\n  (fn [_ [_ uid value]]\n    (backspace uid value)))\n\n\n(defn split-block\n  [uid val index]\n  (let [parent (db/get-parent [:block/uid uid])\n        block (db/get-block [:block/uid uid])\n        head (subs val 0 index)\n        tail (subs val index)\n        new-uid (gen-block-uid)\n        new-block {:db/id        -1\n                   :block/order  (inc (:block/order block))\n                   :block/uid    new-uid\n                   :block/open   true\n                   :block/string tail}\n        reindex (->> (inc-after (:db/id parent) (:block/order block))\n                     (concat [new-block]))]\n    {:transact! [{:db/id (:db/id block) :block/string head :edit/time (now-ts)}\n                 {:db/id (:db/id parent)\n                  :block/children reindex}]\n     :dispatch  [:editing/uid new-uid]}))\n\n\n(defn bump-up\n  \"If user presses enter at the start of non-empty string, push that block down and\n  and start editing a new block in the position of originating block - 'bump up' \"\n  [uid]\n  (let [parent (db/get-parent [:block/uid uid])\n        block (db/get-block [:block/uid uid])\n        new-uid (gen-block-uid)\n        new-block {:db/id        -1\n                   :block/order  (:block/order block)\n                   :block/uid    new-uid\n                   :block/open   true\n                   :block/string \"\"}\n        reindex (->> (inc-after (:db/id parent) (dec (:block/order block)))\n                     (concat [new-block]))]\n    {:transact! [{:db/id (:db/id parent) :block/children reindex :block/string \"\"}]\n     :dispatch [:editing/uid new-uid]}))\n\n\n(defn new-block\n  \"Add a new-block after block\"\n  [block parent]\n  (let [new-uid   (gen-block-uid)\n        new-block {:block/order  (inc (:block/order block))\n                   :block/uid    new-uid\n                   :block/open   true\n                   :block/string \"\"}\n        reindex (->> (inc-after (:db/id parent) (:block/order block))\n                     (concat [new-block]))]\n    {:dispatch-n [[:transact [{:db/id          [:block/uid (:block/uid parent)]\n                               :block/children reindex}]]\n                  [:editing/uid new-uid]]}))\n\n\n(defn enter\n  [uid val index]\n  (let [block       (db/get-block [:block/uid uid])\n        parent      (db/get-parent [:block/uid uid])\n        root-block? (boolean (:node/title parent))]\n    (cond\n      (not (zero? index)) (split-block uid val index)\n      (and (empty? val) root-block?) (new-block block parent)\n      (empty? val) {:dispatch [:unindent uid]}\n      (and (zero? index) val) (bump-up uid))))\n\n\n(reg-event-fx\n  :enter\n  (fn [_ [_ uid val index]]\n    (enter uid val index)))\n\n\n(defn indent\n  [uid]\n  (let [block (db/get-block [:block/uid uid])\n        parent (db/get-parent [:block/uid uid])\n        older-sib (->> parent\n                       :block/children\n                       (filter #(= (dec (:block/order block)) (:block/order %)))\n                       first\n                       :db/id\n                       db/get-block)\n        new-block {:db/id (:db/id block) :block/order (count (:block/children older-sib))}\n        reindex (dec-after (:db/id parent) (:block/order block))]\n    {:transact! [[:db/retract (:db/id parent) :block/children (:db/id block)]\n                 {:db/id (:db/id older-sib) :block/children [new-block]} ;; becomes child of older sibling block \u2014 same parent but order-1\n                 {:db/id (:db/id parent) :block/children reindex}]}))\n\n\n(reg-event-fx\n  :indent\n  (fn [_ [_ uid]]\n    (indent uid)))\n\n\n(defn unindent\n  [uid context-root-uid]\n  (let [parent (db/get-parent [:block/uid uid])\n        grandpa (db/get-parent (:db/id parent))\n        new-block {:block/uid uid :block/order (inc (:block/order parent))}\n        reindex-grandpa (->> (inc-after (:db/id grandpa) (:block/order parent))\n                             (concat [new-block]))]\n    ;; if parent is context-root or has node/title, no-op\n    (when-not (or (:node/title parent) (= (:block/uid parent) context-root-uid))\n      {:transact! [[:db/retract (:db/id parent) :block/children [:block/uid uid]]\n                   {:db/id (:db/id grandpa) :block/children reindex-grandpa}]})))\n\n\n(reg-event-fx\n  :unindent\n  (fn [{rfdb :db} [_ uid]]\n    (let [context-root-uid (get-in rfdb [:current-route :path-params :id])]\n      (unindent uid context-root-uid))))\n\n\n(defn drop-child\n  \"Order will always be 0\"\n  [source source-parent target]\n  (let [new-source-block {:block/uid (:block/uid source) :block/order 0}\n        reindex-source-parent (dec-after (:db/id source-parent) (:block/order source))\n        reindex-target-parent (->> (inc-after (:dbid target) (dec 0))\n                                   (concat [new-source-block]))]\n    [[:db/retract (:db/id source-parent) :block/children [:block/uid (:block/uid source)]]\n     {:db/id (:db/id source-parent) :block/children reindex-source-parent}\n     {:db/id (:db/id target) :block/children reindex-target-parent}]))\n\n\n(defn between\n  \"http://blog.jenkster.com/2013/11/clojure-less-than-greater-than-tip.html\"\n  [s t x]\n  (if (< s t)\n    (and (< s x) (< x t))\n    (and (< t x) (< x s))))\n\n\n(defn drop-above-same-parent\n  \"Give source block target block's order\n    When source is below target, increment block orders between source and target-1\n    When source is above target, decrement block order between...\";; TODO\n\n  [source target parent]\n  (let [s-order (:block/order source)\n        t-order (:block/order target)]\n    (if (= s-order (dec t-order))\n      nil\n      (let [new-source-block {:db/id (:db/id source) :block/order t-order}\n            inc-or-dec       (if (> s-order t-order) inc dec)\n            reindex          (->> (d/q '[:find ?ch ?new-order\n                                         :keys db/id block/order\n                                         :in $ ?parent ?s-order ?t-order ?between ?inc-or-dec\n                                         :where\n                                         [?parent :block/children ?ch]\n                                         [?ch :block/order ?order]\n                                         [(?between ?s-order ?t-order ?order)]\n                                         [(?inc-or-dec ?order) ?new-order]]\n                                       @db/dsdb (:db/id parent) s-order (dec t-order) between inc-or-dec)\n                                  (concat [new-source-block]))]\n        [{:db/id (:db/id parent) :block/children reindex}]))))\n\n\n(defn drop-above-diff-parent\n  [source target source-parent target-parent]\n  (let [new-block             {:db/id (:db/id source) :block/order (:block/order target)}\n        reindex-source-parent (dec-after (:db/id source-parent) (:block/order source))\n        reindex-target-parent (->> (inc-after (:db/id target-parent) (dec (:block/order target)))\n                                   (concat [new-block]))]\n    [[:db/retract (:db/id source-parent) :block/children (:db/id source)]\n     {:db/id (:db/id source-parent) :block/children reindex-source-parent}\n     {:db/id (:db/id target-parent) :block/children reindex-target-parent}]))\n\n\n(defn drop-below-same-parent\n  \"source block's new order is target block's order\"\n  [source source-parent target]\n  (let [new-source-block {:db/id (:db/id source) :block/order (:block/order target)}\n        reindex (dec-after (:db/id source-parent) (:block/order source))]\n    (concat [new-source-block] reindex)))\n\n\n(defn drop-below-diff-parent\n  \"source block's new order is target-order + 1\"\n  [source source-parent target target-parent]\n  (let [new-source-block {:db/id (:db/id source) :block/order (inc (:block/order target))}\n        reindex-source-parent   (dec-after (:db/id source-parent) (:block/order source))]\n    [[:db/retract (:db/id source-parent) :block/children (:db/id source)]\n     {:db/id (:db/id source-parent) :block/children reindex-source-parent}\n     {:db/id (:db/id target-parent) :block/children [new-source-block]}]))\n\n\n;; TODO: don't transact when we know TXes won't change anything\n(defn drop-bullet\n  [source-uid target-uid kind]\n  (let [source        (db/get-block [:block/uid source-uid])\n        target        (db/get-block [:block/uid target-uid])\n        source-parent (db/get-parent [:block/uid source-uid])\n        target-parent (db/get-parent [:block/uid target-uid])\n        same-parent? (= source-parent target-parent)]\n    {:transact!\n     (cond\n       (= kind :child)                          (drop-child             source source-parent target)\n       (and (= kind :below) same-parent?)       (drop-below-same-parent source source-parent target)\n       (and (= kind :below) (not same-parent?)) (drop-below-diff-parent source source-parent target target-parent)\n       (and (= kind :above) same-parent?)       (drop-above-same-parent source target source-parent)\n       (and (= kind :above) (not same-parent?)) (drop-above-diff-parent source target source-parent target-parent))}))\n\n\n(reg-event-fx\n  :drop-bullet\n  (fn-traced [_ [_ source-uid target-uid kind]]\n             (drop-bullet source-uid target-uid kind)))\n\n\n;; TODO: convert to tree instead of flat map (handling indentation), write tests for markdown list parsing\n(reg-event-fx\n  :paste\n  (fn [_ [_ uid text]]\n    (let [lines (clojure.string/split-lines text)\n          block (db/get-block [:block/uid uid])\n          {b-order :block/order} block\n          parent (db/get-parent [:block/uid uid])\n          {p-id :db/id} parent\n          now (now-ts)\n          new-datoms (map-indexed (fn [i x]\n                                    (let [start (subs x 0 2)\n                                          s (if (or (= start \"- \")\n                                                    (= start \"* \"))\n                                              (subs x 2)\n                                              x)]\n                                      {:block/uid    (gen-block-uid)\n                                       :create/time  now\n                                       :edit/time    now\n                                       :block/order  (+ 1 i b-order)\n                                       :block/string s}))\n                                  lines)\n          reindex (plus-after p-id b-order (count lines))\n          children (concat new-datoms reindex)]\n      {:dispatch [:transact [{:db/id p-id :block/children children}]]})))\n\n\n(defn left-sidebar-drop-above\n  [s-order t-order]\n  (let [source-eid (d/q '[:find ?e .\n                          :in $ ?s-order\n                          :where [?e :page/sidebar ?s-order]]\n                        @db/dsdb s-order)\n        new-source {:db/id source-eid :page/sidebar (if (< s-order t-order)\n                                                      (dec t-order)\n                                                      t-order)}\n        inc-or-dec (if (< s-order t-order) dec inc)\n        new-indices (->> (d/q '[:find ?shortcut ?new-order\n                                :keys db/id page/sidebar\n                                :in $ ?s-order ?t-order ?between ?inc-or-dec\n                                :where\n                                [?shortcut :page/sidebar ?order]\n                                [(?between ?s-order ?t-order ?order)]\n                                [(?inc-or-dec ?order) ?new-order]]\n                              @db/dsdb s-order (if (< s-order t-order)\n                                                 t-order\n                                                 (dec t-order))\n                              between inc-or-dec)\n                         (concat [new-source]))]\n    new-indices))\n\n\n(reg-event-fx\n  :left-sidebar/drop-above\n  (fn-traced [_ [_ source-order target-order]]\n             {:dispatch [:transact (left-sidebar-drop-above source-order target-order)]}))\n\n\n(defn left-sidebar-drop-below\n  [s-order t-order]\n  (let [source-eid (d/q '[:find ?e .\n                          :in $ ?s-order\n                          :where [?e :page/sidebar ?s-order]]\n                        @db/dsdb s-order)\n        new-source {:db/id source-eid :page/sidebar t-order}\n        new-indices (->> (d/q '[:find ?shortcut ?new-order\n                                :keys db/id page/sidebar\n                                :in $ ?s-order ?t-order ?between\n                                :where\n                                [?shortcut :page/sidebar ?order]\n                                [(?between ?s-order ?t-order ?order)]\n                                [(dec ?order) ?new-order]]\n                              @db/dsdb s-order (inc t-order) between)\n                         (concat [new-source]))]\n    new-indices))\n\n\n(reg-event-fx\n  :left-sidebar/drop-below\n  (fn-traced [_ [_ source-order target-order]]\n             {:dispatch [:transact (left-sidebar-drop-below source-order target-order)]}))\n\n\n;;;; TODO: delete the following logic when re-implementing title merge\n\n;;(defn node-with-title\n;;  [ds title]\n;;  (d/q '[:find ?e .\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]]\n;;       ds title))\n;;\n;;\n;;(defn referencing-blocks\n;;  [ds title]\n;;  (d/q '[:find ?e ?s\n;;         :in $ ?regex\n;;         :where\n;;         [?e :block/string ?s]\n;;         [(re-find ?regex ?s)]]\n;;       ds (patterns/linked title)))\n;;\n;;\n;;(defn rename-refs-tx\n;;  [old-title new-title [eid s]]\n;;  (let [new-s (str/replace\n;;                s\n;;                (patterns/linked old-title)\n;;                (str \"$1$3$4\" new-title \"$2$5\"))]\n;;    [:db/add eid :block/string new-s]))\n;;\n;;\n;;(defn rename-tx\n;;  [ds old-title new-title]\n;;  (let [eid (node-with-title ds old-title)\n;;        blocks (referencing-blocks ds old-title)]\n;;    (->> blocks\n;;         (map (partial rename-refs-tx old-title new-title))\n;;         (into [[:db/add eid :node/title new-title]]))))\n;;\n;;\n;;(reg-event-fx\n;;  :node/renamed\n;;  [(rp/inject-cofx :ds)]\n;;  (fn-traced [{:keys [db ds]} [_ old-title new-title]]\n;;             (when (not= old-title new-title)\n;;               (if (node-with-title ds new-title)\n;;                 {:db (assoc db :merge-prompt {:active true\n;;                                               :old-title old-title\n;;                                               :new-title new-title})\n;;                  :timeout {:action :start\n;;                            :id :merge-prompt\n;;                            :wait 7000\n;;                            :event [:node/merge-canceled]}}\n;;                 {:transact (rename-tx ds old-title new-title)}))))\n;;\n;;\n;;(defn count-children\n;;  [ds title]\n;;  (d/q '[:find (count ?children) .\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]\n;;         [?e :block/children ?children]]\n;;       ds title))\n;;\n;;\n;;(defn get-children-eids\n;;  [ds title]\n;;  (d/q '[:find [?children ...]\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]\n;;         [?e :block/children ?children]]\n;;       ds title))\n;;\n;;\n;;(defn move-blocks-tx\n;;  [ds from-title to-title]\n;;  (let [block-count (count-children ds to-title)\n;;        block-eids (get-children-eids ds from-title)]\n;;    (mapcat (fn [eid]\n;;              (let [order (:block/order (d/pull ds [:block/order] eid))]\n;;                [[:db/add [:node/title to-title] :block/children eid]\n;;                 [:db/add eid :block/order (+ order block-count)]]))\n;;            block-eids)))\n;;\n;;\n;;(reg-event-fx\n;;  :node/merged\n;;  [(rp/inject-cofx :ds)]\n;;  (fn-traced [{:keys [db ds]} [_ primary-title secondary-title]]\n;;             {:db (dissoc db :merge-prompt)\n;;              :timeout {:action :clear\n;;                        :id :merge-prompt}\n;;              :transact (concat [[:db.fn/retractEntity [:node/title secondary-title]]]\n;;                                (move-blocks-tx ds secondary-title primary-title)\n;;                                (rename-tx ds primary-title secondary-title))}))\n;;\n;;\n;;(reg-event-fx\n;;  :node/merge-canceled\n;;  (fn-traced [{:keys [db]} _]\n;;             {:db (dissoc db :merge-prompt)\n;;              :timeout {:action :clear\n;;                        :id :merge-prompt}}))\n\n"]}