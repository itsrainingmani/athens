{"version":3,"sources":["athens/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db.cljs$core$IFn$_invoke$arity$2","day8.re-frame.tracing/is-trace-enabled?","+debux-dbg-opts+","debux.common.util/send-form!","opts__51967__auto__","result__51968__auto__","debux.common.util/send-trace!","e","e61934","_","athens.db/rfdb","db","cljs.core.update.cljs$core$IFn$_invoke$arity$3","cljs.core/not","p__61935","vec__61936","cljs.core.nth.cljs$core$IFn$_invoke$arity$3","G__61941","fexpr__61940","e61939","p__61942","vec__61943","selected-page","fexpr__61946","cljs.core/set","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core/conj","p__61947","vec__61948","item","cljs.core.update_in.cljs$core$IFn$_invoke$arity$3","p__61951","vec__61952","uid","cljs.core/dissoc","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$2","p__61955","p__61956","map__61957","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","vec__61958","G__61963","cljs.core/deref","G__61964","G__61965","e61962","p__61966","p__61967","map__61968","vec__61969","block","G__61973","G__61974","G__61975","datascript.core/pull","athens.db/dsdb","new-item","cljs.core.merge.cljs$core$IFn$_invoke$arity$variadic","new-items","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","inc-items","cljs.core/reduce-kv","m","k","v","cljs.core/inc","sorted-items","cljs.core.into.cljs$core$IFn$_invoke$arity$2","cljs.core/sorted-map-by","k1","k2","cljs.core/compare","cljs.core.get_in.cljs$core$IFn$_invoke$arity$2","p__61976","vec__61977","p__61980","vec__61981","uids","cljs.core/concat","p__61984","vec__61985","selected-items","first-item","cljs.core/first","prev-block-uid-","athens.db/prev-block-uid","prev-block","athens.db/get-block","new-vec","p__61988","vec__61989","last-item","cljs.core/last","next-block-uid-","athens.db/next-block-uid","cljs.core.conj.cljs$core$IFn$_invoke$arity$2","p__61992","p__61993","map__61994","vec__61995","retract-vecs","cljs.core.mapv.cljs$core$IFn$_invoke$arity$2","e61999","alert","e62000","e62001","cljs.core/assoc-in","e62002","athens.events/focus-el","id","temp__5733__auto__","el","js/document","p__62003","vec__62004","e62007","e62008","p__62009","vec__62010","js/setTimeout","p__62013","vec__62014","p__62017","p__62018","map__62019","vec__62020","map__62023","title","new-db","athens.db/e-by-av","p__62026","map__62027","rfdb","athens.db/athens-url","p__62029","vec__62030","json-str","datoms","athens.db/str-to-db-tx","datascript.core/db-with","datascript.core/empty-db","athens.db/schema","re_frame.core.reg_event_fx.cljs$core$IFn$_invoke$arity$3","G__62033","G__62034","re-frame.core/inject-cofx","p__62035","map__62036","local-storage","datascript.transit/read-transit-str","p__62038","vec__62039","p__62042","vec__62043","p__62046","vec__62047","p__62050","vec__62051","now","athens.util/now-ts","child-uid","athens.util/gen-block-uid","child","p__62054","vec__62055","athens.db/get-children-recursively","p__62058","vec__62059","sidebar-ents","G__62062","G__62063","datascript.core/q","cljs.core/count","p__62064","vec__62065","temp__5735__auto__","prev","p1__62068#","athens.db/find-prev","athens.db/history","next","p1__62069#","athens.db/find-next","athens.events/inc-after","eid","order","G__62070","G__62071","G__62072","G__62073","G__62074","athens.db/rules","athens.events/dec-after","G__62075","G__62076","G__62077","G__62078","G__62079","p__62080","vec__62081","or__4185__auto__","p__62084","vec__62085","p__62088","vec__62089","p__62092","vec__62093","athens.events/backspace","value","map__62096","parent","athens.db/get-parent","reindex","prev-block-string","and__4174__auto__","p__62098","vec__62099","athens.events/split-block","val","index","head","cljs.core.subs.cljs$core$IFn$_invoke$arity$3","tail","cljs.core.subs.cljs$core$IFn$_invoke$arity$2","new-uid","new-block","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","athens.events/bump-up","athens.events/new-block","athens.events/enter","root-block?","cljs.core/boolean","cljs.core/empty?","p__62102","vec__62103","athens.events/indent","older-sib","p1__62106#","cljs.core.filter.cljs$core$IFn$_invoke$arity$2","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","p__62107","vec__62108","athens.events/unindent","context-root-uid","grandpa","reindex-grandpa","p__62111","p__62112","map__62113","vec__62114","athens.events/drop-child","source","source-parent","target","new-source-block","reindex-source-parent","reindex-target-parent","athens.events/between","s","t","x","athens.events/drop-above-same-parent","s-order","t-order","inc-or-dec","cljs.core/dec","G__62118","G__62119","G__62120","G__62121","G__62122","G__62123","G__62124","athens.events/drop-above-diff-parent","target-parent","athens.events/drop-below-same-parent","athens.events/drop-below-diff-parent","athens.events/drop-bullet","source-uid","target-uid","kind","same-parent?","p__62125","vec__62126","e62129","p__62130","vec__62131","athens.events/left-sidebar-drop-above","source-eid","G__62134","G__62135","G__62136","new-source","new-indices","G__62137","G__62138","G__62139","G__62140","G__62141","G__62142","p__62143","vec__62144","e62147","p__62148","vec__62149","source-order","target-order","athens.events/left-sidebar-drop-below","G__62152","G__62153","G__62154","G__62155","G__62156","G__62157","G__62158","G__62159","p__62160","vec__62161","e62164","p__62165","vec__62166"],"sourcesContent":["(ns athens.events\n  (:require\n    [athens.db :as db :refer [rules get-children-recursively]]\n    [athens.util :refer [now-ts gen-block-uid]]\n    [datascript.core :as d]\n    [datascript.transit :as dt]\n    [day8.re-frame.async-flow-fx]\n    [day8.re-frame.tracing :refer-macros [fn-traced]]\n    [re-frame.core :refer [reg-event-db reg-event-fx inject-cofx]]))\n\n\n;; -- re-frame app-db events ---------------------------------------------\n\n(reg-event-db\n  :init-rfdb\n  (fn-traced [_ _]\n             db/rfdb))\n\n\n(reg-event-db\n  :athena/toggle\n  (fn [db _]\n    (update db :athena/open not)))\n\n\n(reg-event-db\n  :athena/update-recent-items\n  (fn-traced [db [_ selected-page]]\n             (when (nil? ((set (:athena/recent-items db)) selected-page))\n               (update db :athena/recent-items conj selected-page))))\n\n\n(reg-event-db\n  :devtool/toggle\n  (fn [db _]\n    (update db :devtool/open not)))\n\n\n(reg-event-db\n  :left-sidebar/toggle\n  (fn [db _]\n    (update db :left-sidebar/open not)))\n\n\n(reg-event-db\n  :right-sidebar/toggle\n  (fn [db _]\n    (update db :right-sidebar/open not)))\n\n\n(reg-event-db\n  :right-sidebar/toggle-item\n  (fn [db [_ item]]\n    (update-in db [:right-sidebar/items item :open] not)))\n\n\n;; TODO: dec all indices > closed item\n(reg-event-db\n  :right-sidebar/close-item\n  (fn [db [_ uid]]\n    (update db :right-sidebar/items dissoc uid)))\n\n\n;; TODO: change right sidebar items from map to datascript\n(reg-event-fx\n  :right-sidebar/open-item\n  (fn-traced [{:keys [db]} [_ uid]]\n             (let [block     (d/pull @db/dsdb '[:node/title :block/string] [:block/uid uid])\n                   new-item  (merge block {:open true :index -1})\n                   new-items (assoc (:right-sidebar/items db) uid new-item)\n                   inc-items (reduce-kv (fn [m k v] (assoc m k (update v :index inc)))\n                                        {}\n                                        new-items)\n                   sorted-items (into (sorted-map-by (fn [k1 k2]\n                                                       (compare\n                                                         [(get-in new-items [k1 :index]) k2]\n                                                         [(get-in new-items [k2 :index]) k1]))) inc-items)]\n               {:db (assoc db :right-sidebar/items sorted-items)\n                :dispatch (when (false? (:right-sidebar/open db))\n                            [:right-sidebar/toggle])})))\n\n\n(reg-event-db\n  :dragging-global/toggle\n  (fn [db _]\n    (update db :dragging-global not)))\n\n\n(reg-event-db\n  :selected/add-item\n  (fn [db [_ uid]]\n    (update db :selected/items conj uid)))\n\n\n(reg-event-db\n  :selected/add-items\n  (fn [db [_ uids]]\n    (update db :selected/items concat uids)))\n\n\n(reg-event-db\n  :selected/clear-items\n  (fn [db _]\n    (assoc db :selected/items [])))\n\n\n(reg-event-db\n  :selected/up\n  (fn [db [_ selected-items]]\n    (let [first-item (first selected-items)\n          prev-block-uid- (db/prev-block-uid first-item)\n          prev-block (db/get-block [:block/uid prev-block-uid-])\n         ;;parent (db/get-parent [:block/uid first-item])\n          new-vec (cond\n                   ;; if prev-block is root node TODO: (OR context root), don't do anything\n                    (:node/title prev-block) nil\n                   ;; if prev block is parent, replace head of vector with parent\n                   ;; TODO needs to replace all children blocks of the parent\n                   ;; TODO: needs to delete blocks recursively. :db/retractEntity does not delete recursively, which would create orphan blocks\n                   ;;(= (:block/uid parent) prev-block-uid-) (assoc selected-items 0 prev-block-uid-)\n                    :else (into [prev-block-uid-] selected-items))]\n      (assoc db :selected/items new-vec))))\n\n\n(reg-event-db\n  :selected/down\n  (fn [db [_ selected-items]]\n    (let [last-item (last selected-items)\n          next-block-uid- (db/next-block-uid last-item)\n          new-vec (conj selected-items next-block-uid-)]\n      (assoc db :selected/items new-vec))))\n\n\n(reg-event-fx\n  :selected/delete\n  (fn [{:keys [db]} [_ selected-items]]\n    (let [retract-vecs (mapv (fn [uid] [:db/retractEntity [:block/uid uid]])\n                             selected-items)]\n      {:dispatch [:transact retract-vecs]\n       :db       (assoc db :selected/items [])})))\n\n\n;; Alerts\n\n(reg-event-db\n  :alert/set\n  (fn-traced [db alert]\n             (assoc db :alert alert)))\n\n\n(reg-event-db\n  :alert/unset\n  (fn-traced [db]\n             (assoc db :alert nil)))\n\n\n;; Loading\n\n(reg-event-db\n  :loading/set\n  (fn-traced [db]\n             (assoc-in db [:loading?] true)))\n\n\n(reg-event-db\n  :loading/unset\n  (fn-traced [db]\n             (assoc-in db [:loading?] false)))\n\n\n;; Block Events\n;; TODO: refactor to an effect\n(defn focus-el\n  [id]\n  (fn []\n    (if-let [el (.. js/document (getElementById id))]\n      (.focus el))))\n\n\n(reg-event-db\n  :editing/uid\n  (fn-traced [db [_ uid]]\n             (js/setTimeout (focus-el (str \"editable-uid-\" uid)) 300)\n             (assoc db :editing/uid uid)))\n\n\n(reg-event-db\n  :tooltip/uid\n  (fn [db [_ uid]]\n    (assoc db :tooltip/uid uid)))\n\n\n;; Daily Notes\n\n(reg-event-db\n  :daily-notes/reset\n  (fn [db _]\n    (assoc db :daily-notes/items [])))\n\n\n;; TODO: don't use app-db, use dsdb\n(reg-event-fx\n  :daily-note/next\n  (fn [{:keys [db]} [_ {:keys [uid title]}]]\n    (let [new-db (update db :daily-notes/items conj uid)]\n      (if (db/e-by-av :block/uid uid)\n        {:db new-db}\n        {:db        new-db\n         :dispatch [:page/create title uid]}))))\n\n\n;; -- event-fx and Datascript Transactions -------------------------------\n\n;; Import/Export\n\n(reg-event-fx\n  :get-db/init\n  (fn [{rfdb :db} _]\n    {:db (-> db/rfdb\n             (assoc :loading? true))\n     :async-flow {:first-dispatch (if false\n                                    [:local-storage/get-db]\n                                    [:http/get-db])\n                  :rules          [{:when :seen?\n                                    :events :reset-conn\n                                    :dispatch-n [[:loading/unset]\n                                                 [:navigate (-> rfdb :current-route :data :name)]]\n                                    :halt? true}]}}))\n\n\n(reg-event-fx\n  :http/get-db\n  (fn [_ _]\n    {:http {:method :get\n            :url db/athens-url\n            :opts {:with-credentials? false}\n            :on-success [:http-success/get-db]\n            :on-failure [:alert/set]}}))\n\n\n(reg-event-fx\n  :http-success/get-db\n  (fn [_ [_ json-str]]\n    (let [datoms (db/str-to-db-tx json-str)\n          new-db (d/db-with (d/empty-db db/schema) datoms)]\n      {:dispatch-n [[:reset-conn new-db]\n                    [:local-storage/set-db new-db]]})))\n\n\n(reg-event-fx\n  :local-storage/get-db\n  [(inject-cofx :local-storage \"datascript/DB\")]\n  (fn [{:keys [local-storage]} _]\n    {:dispatch [:reset-conn (dt/read-transit-str local-storage)]}))\n\n\n(reg-event-fx\n  :local-storage/set-db\n  (fn [_ [_ db]]\n    {:local-storage/set-db! db}))\n\n\n;; Datascript\n\n(reg-event-fx\n  :transact\n  (fn [_ [_ datoms]]\n    {:transact! datoms}))\n\n\n(reg-event-fx\n  :reset-conn\n  (fn [_ [_ db]]\n    {:reset-conn! db}))\n\n\n(reg-event-fx\n  :page/create\n  (fn [_ [_ title uid]]\n    (let [now (now-ts)\n          child-uid (gen-block-uid)\n          child {:db/id -2 :create/time now :edit/time now :block/uid child-uid :block/order 0 :block/open true :block/string \"\"}]\n      {:transact! [{:db/id -1 :node/title title :block/uid uid :create/time now :edit/time now :block/children [child]}]\n       :dispatch [:editing/uid child-uid]})))\n\n\n(reg-event-fx\n  :page/delete\n  (fn [_ [_ uid]]\n    {:transact! (mapv (fn [uid] [:db/retractEntity [:block/uid uid]]) (get-children-recursively uid))}))\n\n\n(reg-event-fx\n  :page/add-shortcut\n  (fn [_ [_ uid]]\n    (let [sidebar-ents (d/q '[:find ?e\n                              :where\n                              [?e :page/sidebar _]]\n                            @db/dsdb)]\n      {:transact! [{:block/uid uid :page/sidebar (count sidebar-ents)}]})))\n\n\n;; TODO: reindex\n(reg-event-fx\n  :page/remove-shortcut\n  (fn [_ [_ uid]]\n    {:transact! [[:db/retract [:block/uid uid] :page/sidebar]]}))\n\n\n(reg-event-fx\n  :undo\n  (fn [_ _]\n    (when-let [prev (db/find-prev @db/history #(identical? @db/dsdb %))]\n      {:reset-conn! prev})))\n\n\n(reg-event-fx\n  :redo\n  (fn [_ _]\n    (when-let [next (db/find-next @db/history #(identical? @db/dsdb %))]\n      {:reset-conn! next})))\n\n\n(defn inc-after\n  [eid order]\n  (->> (d/q '[:find ?ch ?new-o\n              :keys db/id block/order\n              :in $ % ?p ?at\n              :where (inc-after ?p ?at ?ch ?new-o)]\n            @db/dsdb rules eid order)))\n\n\n(defn dec-after\n  [eid order]\n  (->> (d/q '[:find ?ch ?new-o\n              :keys db/id block/order\n              :in $ % ?p ?at\n              :where (dec-after ?p ?at ?ch ?new-o)]\n            @db/dsdb rules eid order)))\n\n\n(reg-event-fx\n  :up\n  (fn [_ [_ uid]]\n   ;; FIXME: specify behavior when going up would go to title or context-root\n    {:dispatch [:editing/uid (or (db/prev-block-uid uid) uid)]}))\n\n\n(reg-event-fx\n  :left\n  (fn [_ [_ uid]]\n    {:dispatch [:editing/uid (or (db/prev-block-uid uid) uid)]}))\n\n\n(reg-event-fx\n  :down\n  (fn [_ [_ uid]]\n    {:dispatch [:editing/uid (or (db/next-block-uid uid) uid)]}))\n\n\n(reg-event-fx\n  :right\n  (fn [_ [_ uid]]\n    {:dispatch [:editing/uid (or (db/next-block-uid uid) uid)]}))\n\n\n;; no-op if root 0th child\n;; otherwise delete block and join with previous block\n(defn backspace\n  [uid value]\n  (let [block (db/get-block [:block/uid uid])\n        parent (db/get-parent [:block/uid uid])\n        reindex (dec-after (:db/id parent) (:block/order block))\n        prev-block-uid- (db/prev-block-uid uid)\n        {prev-block-string :block/string} (db/get-block [:block/uid prev-block-uid-])]\n    (cond\n      (and (:node/title parent) (zero? (:block/order block))) nil\n      (:block/children block) nil\n      :else {:dispatch-later [{:ms 0 :dispatch [:transact [[:db/retractEntity [:block/uid uid]]\n                                                           {:db/id [:block/uid prev-block-uid-] :block/string (str prev-block-string value) :edit/time (now-ts)}\n                                                           {:db/id (:db/id parent) :block/children reindex}]]}\n                              {:ms 10 :dispatch [:editing/uid prev-block-uid-]}]})))\n\n\n(reg-event-fx\n  :backspace\n  (fn [_ [_ uid value]]\n    (backspace uid value)))\n\n\n(defn split-block\n  [uid val index]\n  (let [parent (db/get-parent [:block/uid uid])\n        block (db/get-block [:block/uid uid])\n        head (subs val 0 index)\n        tail (subs val index)\n        new-uid (gen-block-uid)\n        new-block {:db/id        -1\n                   :block/order  (inc (:block/order block))\n                   :block/uid    new-uid\n                   :block/open   true\n                   :block/string tail}\n        reindex (->> (inc-after (:db/id parent) (:block/order block))\n                     (concat [new-block]))]\n    {:transact! [{:db/id (:db/id block) :block/string head :edit/time (now-ts)}\n                 {:db/id (:db/id parent)\n                  :block/children reindex}]\n     :dispatch  [:editing/uid new-uid]}))\n\n\n(defn bump-up\n  \"If user presses enter at the start of non-empty string, push that block down and\n  and start editing a new block in the position of originating block - 'bump up' \"\n  [uid]\n  (let [parent (db/get-parent [:block/uid uid])\n        block (db/get-block [:block/uid uid])\n        new-uid (gen-block-uid)\n        new-block {:db/id        -1\n                   :block/order  (:block/order block)\n                   :block/uid    new-uid\n                   :block/open   true\n                   :block/string \"\"}\n        reindex (->> (inc-after (:db/id parent) (dec (:block/order block)))\n                     (concat [new-block]))]\n    {:transact! [{:db/id (:db/id parent) :block/children reindex :block/string \"\"}]\n     :dispatch [:editing/uid new-uid]}))\n\n\n(defn new-block\n  \"Add a new-block after block\"\n  [block parent]\n  (let [new-uid   (gen-block-uid)\n        new-block {:block/order  (inc (:block/order block))\n                   :block/uid    new-uid\n                   :block/open   true\n                   :block/string \"\"}\n        reindex (->> (inc-after (:db/id parent) (:block/order block))\n                     (concat [new-block]))]\n    {:dispatch-n [[:transact [{:db/id          [:block/uid (:block/uid parent)]\n                               :block/children reindex}]]\n                  [:editing/uid new-uid]]}))\n\n\n(defn enter\n  [uid val index]\n  (let [block       (db/get-block [:block/uid uid])\n        parent      (db/get-parent [:block/uid uid])\n        root-block? (boolean (:node/title parent))]\n    (cond\n      (not (zero? index)) (split-block uid val index)\n      (and (empty? val) root-block?) (new-block block parent)\n      (empty? val) {:dispatch [:unindent uid]}\n      (and (zero? index) val) (bump-up uid))))\n\n\n(reg-event-fx\n  :enter\n  (fn [_ [_ uid val index]]\n    (enter uid val index)))\n\n\n(defn indent\n  [uid]\n  (let [block (db/get-block [:block/uid uid])\n        parent (db/get-parent [:block/uid uid])\n        older-sib (->> parent\n                       :block/children\n                       (filter #(= (dec (:block/order block)) (:block/order %)))\n                       first\n                       :db/id\n                       db/get-block)\n        new-block {:db/id (:db/id block) :block/order (count (:block/children older-sib))}\n        reindex (dec-after (:db/id parent) (:block/order block))]\n    {:transact! [[:db/retract (:db/id parent) :block/children (:db/id block)]\n                 {:db/id (:db/id older-sib) :block/children [new-block]} ;; becomes child of older sibling block \u2014 same parent but order-1\n                 {:db/id (:db/id parent) :block/children reindex}]}))\n\n\n(reg-event-fx\n  :indent\n  (fn [_ [_ uid]]\n    (indent uid)))\n\n\n(defn unindent\n  [uid context-root-uid]\n  (let [parent (db/get-parent [:block/uid uid])\n        grandpa (db/get-parent (:db/id parent))\n        new-block {:block/uid uid :block/order (inc (:block/order parent))}\n        reindex-grandpa (->> (inc-after (:db/id grandpa) (:block/order parent))\n                             (concat [new-block]))]\n    ;; if parent is context-root or has node/title, no-op\n    (when-not (or (:node/title parent) (= (:block/uid parent) context-root-uid))\n      {:transact! [[:db/retract (:db/id parent) :block/children [:block/uid uid]]\n                   {:db/id (:db/id grandpa) :block/children reindex-grandpa}]})))\n\n\n(reg-event-fx\n  :unindent\n  (fn [{rfdb :db} [_ uid]]\n    (let [context-root-uid (get-in rfdb [:current-route :path-params :id])]\n      (unindent uid context-root-uid))))\n\n\n(defn drop-child\n  \"Order will always be 0\"\n  [source source-parent target]\n  (let [new-source-block {:block/uid (:block/uid source) :block/order 0}\n        reindex-source-parent (dec-after (:db/id source-parent) (:block/order source))\n        reindex-target-parent (->> (inc-after (:dbid target) (dec 0))\n                                   (concat [new-source-block]))]\n    [[:db/retract (:db/id source-parent) :block/children [:block/uid (:block/uid source)]]\n     {:db/id (:db/id source-parent) :block/children reindex-source-parent}\n     {:db/id (:db/id target) :block/children reindex-target-parent}]))\n\n\n(defn between\n  \"http://blog.jenkster.com/2013/11/clojure-less-than-greater-than-tip.html\"\n  [s t x]\n  (if (< s t)\n    (and (< s x) (< x t))\n    (and (< t x) (< x s))))\n\n\n(defn drop-above-same-parent\n  \"Give source block target block's order\n    When source is below target, increment block orders between source and target-1\n    When source is above target, decrement block order between...\";; TODO\n\n  [source target parent]\n  (let [s-order (:block/order source)\n        t-order (:block/order target)]\n    (if (= s-order (dec t-order))\n      nil\n      (let [new-source-block {:db/id (:db/id source) :block/order t-order}\n            inc-or-dec       (if (> s-order t-order) inc dec)\n            reindex          (->> (d/q '[:find ?ch ?new-order\n                                         :keys db/id block/order\n                                         :in $ ?parent ?s-order ?t-order ?between ?inc-or-dec\n                                         :where\n                                         [?parent :block/children ?ch]\n                                         [?ch :block/order ?order]\n                                         [(?between ?s-order ?t-order ?order)]\n                                         [(?inc-or-dec ?order) ?new-order]]\n                                       @db/dsdb (:db/id parent) s-order (dec t-order) between inc-or-dec)\n                                  (concat [new-source-block]))]\n        [{:db/id (:db/id parent) :block/children reindex}]))))\n\n\n(defn drop-above-diff-parent\n  [source target source-parent target-parent]\n  (let [new-block             {:db/id (:db/id source) :block/order (:block/order target)}\n        reindex-source-parent (dec-after (:db/id source-parent) (:block/order source))\n        reindex-target-parent (->> (inc-after (:db/id target-parent) (dec (:block/order target)))\n                                   (concat [new-block]))]\n    [[:db/retract (:db/id source-parent) :block/children (:db/id source)]\n     {:db/id (:db/id source-parent) :block/children reindex-source-parent}\n     {:db/id (:db/id target-parent) :block/children reindex-target-parent}]))\n\n\n(defn drop-below-same-parent\n  \"source block's new order is target block's order\"\n  [source source-parent target]\n  (let [new-source-block {:db/id (:db/id source) :block/order (:block/order target)}\n        reindex (dec-after (:db/id source-parent) (:block/order source))]\n    (concat [new-source-block] reindex)))\n\n\n(defn drop-below-diff-parent\n  \"source block's new order is target-order + 1\"\n  [source source-parent target target-parent]\n  (let [new-source-block {:db/id (:db/id source) :block/order (inc (:block/order target))}\n        reindex-source-parent   (dec-after (:db/id source-parent) (:block/order source))]\n    [[:db/retract (:db/id source-parent) :block/children (:db/id source)]\n     {:db/id (:db/id source-parent) :block/children reindex-source-parent}\n     {:db/id (:db/id target-parent) :block/children [new-source-block]}]))\n\n\n;; TODO: don't transact when we know TXes won't change anything\n(defn drop-bullet\n  [source-uid target-uid kind]\n  (let [source        (db/get-block [:block/uid source-uid])\n        target        (db/get-block [:block/uid target-uid])\n        source-parent (db/get-parent [:block/uid source-uid])\n        target-parent (db/get-parent [:block/uid target-uid])\n        same-parent? (= source-parent target-parent)]\n    {:transact!\n     (cond\n       (= kind :child)                          (drop-child             source source-parent target)\n       (and (= kind :below) same-parent?)       (drop-below-same-parent source source-parent target)\n       (and (= kind :below) (not same-parent?)) (drop-below-diff-parent source source-parent target target-parent)\n       (and (= kind :above) same-parent?)       (drop-above-same-parent source target source-parent)\n       (and (= kind :above) (not same-parent?)) (drop-above-diff-parent source target source-parent target-parent))}))\n\n\n(reg-event-fx\n  :drop-bullet\n  (fn-traced [_ [_ source-uid target-uid kind]]\n             (drop-bullet source-uid target-uid kind)))\n\n\n(defn left-sidebar-drop-above\n  [s-order t-order]\n  (let [source-eid (d/q '[:find ?e .\n                          :in $ ?s-order\n                          :where [?e :page/sidebar ?s-order]]\n                        @db/dsdb s-order)\n        new-source {:db/id source-eid :page/sidebar (if (< s-order t-order)\n                                                      (dec t-order)\n                                                      t-order)}\n        inc-or-dec (if (< s-order t-order) dec inc)\n        new-indices (->> (d/q '[:find ?shortcut ?new-order\n                                :keys db/id page/sidebar\n                                :in $ ?s-order ?t-order ?between ?inc-or-dec\n                                :where\n                                [?shortcut :page/sidebar ?order]\n                                [(?between ?s-order ?t-order ?order)]\n                                [(?inc-or-dec ?order) ?new-order]]\n                              @db/dsdb s-order (if (< s-order t-order)\n                                                 t-order\n                                                 (dec t-order))\n                              between inc-or-dec)\n                         (concat [new-source]))]\n    new-indices))\n\n\n(reg-event-fx\n  :left-sidebar/drop-above\n  (fn-traced [_ [_ source-order target-order]]\n             {:dispatch [:transact (left-sidebar-drop-above source-order target-order)]}))\n\n\n(defn left-sidebar-drop-below\n  [s-order t-order]\n  (let [source-eid (d/q '[:find ?e .\n                          :in $ ?s-order\n                          :where [?e :page/sidebar ?s-order]]\n                        @db/dsdb s-order)\n        new-source {:db/id source-eid :page/sidebar t-order}\n        new-indices (->> (d/q '[:find ?shortcut ?new-order\n                                :keys db/id page/sidebar\n                                :in $ ?s-order ?t-order ?between\n                                :where\n                                [?shortcut :page/sidebar ?order]\n                                [(?between ?s-order ?t-order ?order)]\n                                [(dec ?order) ?new-order]]\n                              @db/dsdb s-order (inc t-order) between)\n                         (concat [new-source]))]\n    new-indices))\n\n\n(reg-event-fx\n  :left-sidebar/drop-below\n  (fn-traced [_ [_ source-order target-order]]\n             {:dispatch [:transact (left-sidebar-drop-below source-order target-order)]}))\n\n\n;;;; TODO: delete the following logic when re-implementing title merge\n\n;;(defn node-with-title\n;;  [ds title]\n;;  (d/q '[:find ?e .\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]]\n;;       ds title))\n;;\n;;\n;;(defn referencing-blocks\n;;  [ds title]\n;;  (d/q '[:find ?e ?s\n;;         :in $ ?regex\n;;         :where\n;;         [?e :block/string ?s]\n;;         [(re-find ?regex ?s)]]\n;;       ds (patterns/linked title)))\n;;\n;;\n;;(defn rename-refs-tx\n;;  [old-title new-title [eid s]]\n;;  (let [new-s (str/replace\n;;                s\n;;                (patterns/linked old-title)\n;;                (str \"$1$3$4\" new-title \"$2$5\"))]\n;;    [:db/add eid :block/string new-s]))\n;;\n;;\n;;(defn rename-tx\n;;  [ds old-title new-title]\n;;  (let [eid (node-with-title ds old-title)\n;;        blocks (referencing-blocks ds old-title)]\n;;    (->> blocks\n;;         (map (partial rename-refs-tx old-title new-title))\n;;         (into [[:db/add eid :node/title new-title]]))))\n;;\n;;\n;;(reg-event-fx\n;;  :node/renamed\n;;  [(rp/inject-cofx :ds)]\n;;  (fn-traced [{:keys [db ds]} [_ old-title new-title]]\n;;             (when (not= old-title new-title)\n;;               (if (node-with-title ds new-title)\n;;                 {:db (assoc db :merge-prompt {:active true\n;;                                               :old-title old-title\n;;                                               :new-title new-title})\n;;                  :timeout {:action :start\n;;                            :id :merge-prompt\n;;                            :wait 7000\n;;                            :event [:node/merge-canceled]}}\n;;                 {:transact (rename-tx ds old-title new-title)}))))\n;;\n;;\n;;(defn count-children\n;;  [ds title]\n;;  (d/q '[:find (count ?children) .\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]\n;;         [?e :block/children ?children]]\n;;       ds title))\n;;\n;;\n;;(defn get-children-eids\n;;  [ds title]\n;;  (d/q '[:find [?children ...]\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]\n;;         [?e :block/children ?children]]\n;;       ds title))\n;;\n;;\n;;(defn move-blocks-tx\n;;  [ds from-title to-title]\n;;  (let [block-count (count-children ds to-title)\n;;        block-eids (get-children-eids ds from-title)]\n;;    (mapcat (fn [eid]\n;;              (let [order (:block/order (d/pull ds [:block/order] eid))]\n;;                [[:db/add [:node/title to-title] :block/children eid]\n;;                 [:db/add eid :block/order (+ order block-count)]]))\n;;            block-eids)))\n;;\n;;\n;;(reg-event-fx\n;;  :node/merged\n;;  [(rp/inject-cofx :ds)]\n;;  (fn-traced [{:keys [db ds]} [_ primary-title secondary-title]]\n;;             {:db (dissoc db :merge-prompt)\n;;              :timeout {:action :clear\n;;                        :id :merge-prompt}\n;;              :transact (concat [[:db.fn/retractEntity [:node/title secondary-title]]]\n;;                                (move-blocks-tx ds secondary-title primary-title)\n;;                                (rename-tx ds primary-title secondary-title))}))\n;;\n;;\n;;(reg-event-fx\n;;  :node/merge-canceled\n;;  (fn-traced [{:keys [db]} _]\n;;             {:db (dissoc db :merge-prompt)\n;;              :timeout {:action :clear\n;;                        :id :merge-prompt}}))\n\n"]}