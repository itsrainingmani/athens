{"version":3,"sources":["athens/events.cljs"],"mappings":"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","names":["re_frame.core.reg_event_db","day8.re-frame.tracing/is-trace-enabled?","+debux-dbg-opts+","debux.common.util/send-form!","opts__50925__auto__","result__50926__auto__","debux.common.util/send-trace!","e","e60445","_","athens.db/rfdb","db","cljs.core.update","cljs.core/not","p__60446","vec__60447","cljs.core.nth","G__60452","fexpr__60451","e60450","p__60453","vec__60454","selected-page","fexpr__60457","cljs.core/set","cljs.core/conj","p__60458","vec__60459","item","cljs.core.update_in","p__60462","vec__60463","uid","cljs.core/dissoc","re_frame.core.reg_event_fx","p__60466","p__60467","map__60468","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","cljs.core.get","vec__60469","G__60474","cljs.core/deref","G__60475","G__60476","e60473","p__60477","p__60478","map__60479","vec__60480","block","G__60484","G__60485","G__60486","datascript.core/pull","athens.db/dsdb","new-item","cljs.core.merge","new-items","cljs.core.assoc","inc-items","cljs.core/reduce-kv","m","k","v","cljs.core/inc","sorted-items","cljs.core.into","cljs.core/sorted-map-by","k1","k2","cljs.core/compare","cljs.core.get_in","p__60487","vec__60488","p__60491","vec__60492","uids","cljs.core/concat","p__60495","vec__60496","selected-items","first-item","cljs.core/first","prev-block-uid-","athens.db/prev-block-uid","prev-block","athens.db/get-block","new-vec","p__60499","vec__60500","last-item","cljs.core/last","next-block-uid-","athens.db/next-block-uid","cljs.core.conj","p__60503","p__60504","map__60505","vec__60506","retract-vecs","cljs.core.mapv","e60510","alert","e60511","e60512","cljs.core/assoc-in","e60513","athens.events/focus-el","id","temp__5733__auto__","el","goog.dom/getElement","p__60514","vec__60515","e60518","e60519","p__60520","vec__60521","js/setTimeout","p__60524","vec__60525","p__60528","p__60529","map__60530","vec__60531","map__60534","title","new-db","athens.db/e-by-av","p__60537","map__60538","rfdb","athens.db/athens-url","p__60540","vec__60541","json-str","datoms","athens.db/str-to-db-tx","datascript.core/db-with","datascript.core/empty-db","athens.db/schema","re_frame.core.inject_cofx","p__60544","map__60545","local-storage","datascript.transit/read-transit-str","p__60547","vec__60548","p__60551","vec__60552","p__60555","vec__60556","p__60559","vec__60560","now","athens.util/now-ts","child-uid","athens.util/gen-block-uid","child","p__60563","vec__60564","athens.db/get-children-recursively","p__60567","vec__60568","sidebar-ents","G__60571","G__60572","datascript.core/q","cljs.core/count","p__60573","vec__60574","temp__5735__auto__","prev","p1__60577#","athens.db/find-prev","athens.db/history","next","p1__60578#","athens.db/find-next","athens.events/inc-after","eid","order","G__60579","G__60580","G__60581","G__60582","G__60583","athens.db/rules","athens.events/dec-after","G__60584","G__60585","G__60586","G__60587","G__60588","p__60589","vec__60590","or__4126__auto__","p__60593","vec__60594","p__60597","vec__60598","p__60601","vec__60602","athens.events/backspace","value","map__60605","parent","athens.db/get-parent","reindex","prev-block-string","and__4115__auto__","p__60607","vec__60608","athens.events/split-block","val","index","head","cljs.core.subs","tail","new-uid","new-block","cljs.core.concat","athens.events/bump-up","athens.events/new-block","athens.events/enter","root-block?","cljs.core/boolean","cljs.core/empty?","p__60611","vec__60612","athens.events/indent","older-sib","p1__60615#","cljs.core.filter","cljs.core._EQ_","p__60616","vec__60617","athens.events/unindent","context-root-uid","grandpa","reindex-grandpa","p__60620","p__60621","map__60622","vec__60623","athens.events/drop-child","source","source-parent","target","new-source-block","reindex-source-parent","reindex-target-parent","athens.events/between","s","t","x","athens.events/drop-above-same-parent","s-order","t-order","inc-or-dec","cljs.core/dec","G__60627","G__60628","G__60629","G__60630","G__60631","G__60632","G__60633","athens.events/drop-above-diff-parent","target-parent","athens.events/drop-below-same-parent","athens.events/drop-below-diff-parent","athens.events/drop-bullet","source-uid","target-uid","kind","same-parent?","p__60634","vec__60635","e60638","p__60639","vec__60640","athens.events/left-sidebar-drop-above","source-eid","G__60643","G__60644","G__60645","new-source","new-indices","G__60646","G__60647","G__60648","G__60649","G__60650","G__60651","p__60652","vec__60653","e60656","p__60657","vec__60658","source-order","target-order","athens.events/left-sidebar-drop-below","G__60661","G__60662","G__60663","G__60664","G__60665","G__60666","G__60667","G__60668","p__60669","vec__60670","e60673","p__60674","vec__60675"],"sourcesContent":["(ns athens.events\n  (:require\n    [athens.db :as db :refer [rules get-children-recursively]]\n    [athens.util :refer [now-ts gen-block-uid]]\n    [datascript.core :as d]\n    [datascript.transit :as dt]\n    [day8.re-frame.async-flow-fx]\n    [day8.re-frame.tracing :refer-macros [fn-traced]]\n    [goog.dom :refer [getElement]]\n    [re-frame.core :refer [reg-event-db reg-event-fx inject-cofx]]))\n\n\n;; -- re-frame app-db events ---------------------------------------------\n\n(reg-event-db\n  :init-rfdb\n  (fn-traced [_ _]\n             db/rfdb))\n\n\n(reg-event-db\n  :athena/toggle\n  (fn [db _]\n    (update db :athena/open not)))\n\n\n(reg-event-db\n  :athena/update-recent-items\n  (fn-traced [db [_ selected-page]]\n             (when (nil? ((set (:athena/recent-items db)) selected-page))\n               (update db :athena/recent-items conj selected-page))))\n\n\n(reg-event-db\n  :devtool/toggle\n  (fn [db _]\n    (update db :devtool/open not)))\n\n\n(reg-event-db\n  :left-sidebar/toggle\n  (fn [db _]\n    (update db :left-sidebar/open not)))\n\n\n(reg-event-db\n  :right-sidebar/toggle\n  (fn [db _]\n    (update db :right-sidebar/open not)))\n\n\n(reg-event-db\n  :right-sidebar/toggle-item\n  (fn [db [_ item]]\n    (update-in db [:right-sidebar/items item :open] not)))\n\n\n;; TODO: dec all indices > closed item\n(reg-event-db\n  :right-sidebar/close-item\n  (fn [db [_ uid]]\n    (update db :right-sidebar/items dissoc uid)))\n\n\n;; TODO: change right sidebar items from map to datascript\n(reg-event-fx\n  :right-sidebar/open-item\n  (fn-traced [{:keys [db]} [_ uid]]\n             (let [block     (d/pull @db/dsdb '[:node/title :block/string] [:block/uid uid])\n                   new-item  (merge block {:open true :index -1})\n                   new-items (assoc (:right-sidebar/items db) uid new-item)\n                   inc-items (reduce-kv (fn [m k v] (assoc m k (update v :index inc)))\n                                        {}\n                                        new-items)\n                   sorted-items (into (sorted-map-by (fn [k1 k2]\n                                                       (compare\n                                                         [(get-in new-items [k1 :index]) k2]\n                                                         [(get-in new-items [k2 :index]) k1]))) inc-items)]\n               {:db (assoc db :right-sidebar/items sorted-items)\n                :dispatch (when (false? (:right-sidebar/open db))\n                            [:right-sidebar/toggle])})))\n\n\n(reg-event-db\n  :dragging-global/toggle\n  (fn [db _]\n    (update db :dragging-global not)))\n\n\n(reg-event-db\n  :selected/add-item\n  (fn [db [_ uid]]\n    (update db :selected/items conj uid)))\n\n\n(reg-event-db\n  :selected/add-items\n  (fn [db [_ uids]]\n    (update db :selected/items concat uids)))\n\n\n(reg-event-db\n  :selected/clear-items\n  (fn [db _]\n    (assoc db :selected/items [])))\n\n\n(reg-event-db\n  :selected/up\n  (fn [db [_ selected-items]]\n    (let [first-item (first selected-items)\n          prev-block-uid- (db/prev-block-uid first-item)\n          prev-block (db/get-block [:block/uid prev-block-uid-])\n         ;;parent (db/get-parent [:block/uid first-item])\n          new-vec (cond\n                   ;; if prev-block is root node TODO: (OR context root), don't do anything\n                    (:node/title prev-block) nil\n                   ;; if prev block is parent, replace head of vector with parent\n                   ;; TODO needs to replace all children blocks of the parent\n                   ;; TODO: needs to delete blocks recursively. :db/retractEntity does not delete recursively, which would create orphan blocks\n                   ;;(= (:block/uid parent) prev-block-uid-) (assoc selected-items 0 prev-block-uid-)\n                    :else (into [prev-block-uid-] selected-items))]\n      (assoc db :selected/items new-vec))))\n\n\n(reg-event-db\n  :selected/down\n  (fn [db [_ selected-items]]\n    (let [last-item (last selected-items)\n          next-block-uid- (db/next-block-uid last-item)\n          new-vec (conj selected-items next-block-uid-)]\n      (assoc db :selected/items new-vec))))\n\n\n(reg-event-fx\n  :selected/delete\n  (fn [{:keys [db]} [_ selected-items]]\n    (let [retract-vecs (mapv (fn [uid] [:db/retractEntity [:block/uid uid]])\n                             selected-items)]\n      {:dispatch [:transact retract-vecs]\n       :db       (assoc db :selected/items [])})))\n\n\n;; Alerts\n\n(reg-event-db\n  :alert/set\n  (fn-traced [db alert]\n             (assoc db :alert alert)))\n\n\n(reg-event-db\n  :alert/unset\n  (fn-traced [db]\n             (assoc db :alert nil)))\n\n\n;; Loading\n\n(reg-event-db\n  :loading/set\n  (fn-traced [db]\n             (assoc-in db [:loading?] true)))\n\n\n(reg-event-db\n  :loading/unset\n  (fn-traced [db]\n             (assoc-in db [:loading?] false)))\n\n\n;; Block Events\n;; TODO: refactor to an effect\n(defn focus-el\n  [id]\n  (fn []\n    (if-let [el (getElement id)]\n      (.focus el))))\n\n\n(reg-event-db\n  :editing/uid\n  (fn-traced [db [_ uid]]\n             (js/setTimeout (focus-el (str \"editable-uid-\" uid)) 300)\n             (assoc db :editing/uid uid)))\n\n\n(reg-event-db\n  :tooltip/uid\n  (fn [db [_ uid]]\n    (assoc db :tooltip/uid uid)))\n\n\n;; Daily Notes\n\n(reg-event-db\n  :daily-notes/reset\n  (fn [db _]\n    (assoc db :daily-notes/items [])))\n\n\n;; TODO: don't use app-db, use dsdb\n(reg-event-fx\n  :daily-note/next\n  (fn [{:keys [db]} [_ {:keys [uid title]}]]\n    (let [new-db (update db :daily-notes/items conj uid)]\n      (if (db/e-by-av :block/uid uid)\n        {:db new-db}\n        {:db        new-db\n         :dispatch [:page/create title uid]}))))\n\n\n;; -- event-fx and Datascript Transactions -------------------------------\n\n;; Import/Export\n\n(reg-event-fx\n  :get-db/init\n  (fn [{rfdb :db} _]\n    {:db (-> db/rfdb\n             (assoc :loading? true))\n     :async-flow {:first-dispatch (if false\n                                    [:local-storage/get-db]\n                                    [:http/get-db])\n                  :rules          [{:when :seen?\n                                    :events :reset-conn\n                                    :dispatch-n [[:loading/unset]\n                                                 [:navigate (-> rfdb :current-route :data :name)]]\n                                    :halt? true}]}}))\n\n\n(reg-event-fx\n  :http/get-db\n  (fn [_ _]\n    {:http {:method :get\n            :url db/athens-url\n            :opts {:with-credentials? false}\n            :on-success [:http-success/get-db]\n            :on-failure [:alert/set]}}))\n\n\n(reg-event-fx\n  :http-success/get-db\n  (fn [_ [_ json-str]]\n    (let [datoms (db/str-to-db-tx json-str)\n          new-db (d/db-with (d/empty-db db/schema) datoms)]\n      {:dispatch-n [[:reset-conn new-db]\n                    [:local-storage/set-db new-db]]})))\n\n\n(reg-event-fx\n  :local-storage/get-db\n  [(inject-cofx :local-storage \"datascript/DB\")]\n  (fn [{:keys [local-storage]} _]\n    {:dispatch [:reset-conn (dt/read-transit-str local-storage)]}))\n\n\n(reg-event-fx\n  :local-storage/set-db\n  (fn [_ [_ db]]\n    {:local-storage/set-db! db}))\n\n\n;; Datascript\n\n(reg-event-fx\n  :transact\n  (fn [_ [_ datoms]]\n    {:transact! datoms}))\n\n\n(reg-event-fx\n  :reset-conn\n  (fn [_ [_ db]]\n    {:reset-conn! db}))\n\n\n(reg-event-fx\n  :page/create\n  (fn [_ [_ title uid]]\n    (let [now (now-ts)\n          child-uid (gen-block-uid)\n          child {:db/id -2 :create/time now :edit/time now :block/uid child-uid :block/order 0 :block/open true :block/string \"\"}]\n      {:transact! [{:db/id -1 :node/title title :block/uid uid :create/time now :edit/time now :block/children [child]}]\n       :dispatch [:editing/uid child-uid]})))\n\n\n(reg-event-fx\n  :page/delete\n  (fn [_ [_ uid]]\n    {:transact! (mapv (fn [uid] [:db/retractEntity [:block/uid uid]]) (get-children-recursively uid))}))\n\n\n(reg-event-fx\n  :page/add-shortcut\n  (fn [_ [_ uid]]\n    (let [sidebar-ents (d/q '[:find ?e\n                              :where\n                              [?e :page/sidebar _]]\n                            @db/dsdb)]\n      {:transact! [{:block/uid uid :page/sidebar (count sidebar-ents)}]})))\n\n\n;; TODO: reindex\n(reg-event-fx\n  :page/remove-shortcut\n  (fn [_ [_ uid]]\n    {:transact! [[:db/retract [:block/uid uid] :page/sidebar]]}))\n\n\n(reg-event-fx\n  :undo\n  (fn [_ _]\n    (when-let [prev (db/find-prev @db/history #(identical? @db/dsdb %))]\n      {:reset-conn! prev})))\n\n\n(reg-event-fx\n  :redo\n  (fn [_ _]\n    (when-let [next (db/find-next @db/history #(identical? @db/dsdb %))]\n      {:reset-conn! next})))\n\n\n(defn inc-after\n  [eid order]\n  (->> (d/q '[:find ?ch ?new-o\n              :keys db/id block/order\n              :in $ % ?p ?at\n              :where (inc-after ?p ?at ?ch ?new-o)]\n            @db/dsdb rules eid order)))\n\n\n(defn dec-after\n  [eid order]\n  (->> (d/q '[:find ?ch ?new-o\n              :keys db/id block/order\n              :in $ % ?p ?at\n              :where (dec-after ?p ?at ?ch ?new-o)]\n            @db/dsdb rules eid order)))\n\n\n(reg-event-fx\n  :up\n  (fn [_ [_ uid]]\n   ;; FIXME: specify behavior when going up would go to title or context-root\n    {:dispatch [:editing/uid (or (db/prev-block-uid uid) uid)]}))\n\n\n(reg-event-fx\n  :left\n  (fn [_ [_ uid]]\n    {:dispatch [:editing/uid (or (db/prev-block-uid uid) uid)]}))\n\n\n(reg-event-fx\n  :down\n  (fn [_ [_ uid]]\n    {:dispatch [:editing/uid (or (db/next-block-uid uid) uid)]}))\n\n\n(reg-event-fx\n  :right\n  (fn [_ [_ uid]]\n    {:dispatch [:editing/uid (or (db/next-block-uid uid) uid)]}))\n\n\n;; no-op if root 0th child\n;; otherwise delete block and join with previous block\n(defn backspace\n  [uid value]\n  (let [block (db/get-block [:block/uid uid])\n        parent (db/get-parent [:block/uid uid])\n        reindex (dec-after (:db/id parent) (:block/order block))\n        prev-block-uid- (db/prev-block-uid uid)\n        {prev-block-string :block/string} (db/get-block [:block/uid prev-block-uid-])]\n    (cond\n      (and (:node/title parent) (zero? (:block/order block))) nil\n      (:block/children block) nil\n      :else {:dispatch-later [{:ms 0 :dispatch [:transact [[:db/retractEntity [:block/uid uid]]\n                                                           {:db/id [:block/uid prev-block-uid-] :block/string (str prev-block-string value) :edit/time (now-ts)}\n                                                           {:db/id (:db/id parent) :block/children reindex}]]}\n                              {:ms 10 :dispatch [:editing/uid prev-block-uid-]}]})))\n\n\n(reg-event-fx\n  :backspace\n  (fn [_ [_ uid value]]\n    (backspace uid value)))\n\n\n(defn split-block\n  [uid val index]\n  (let [parent (db/get-parent [:block/uid uid])\n        block (db/get-block [:block/uid uid])\n        head (subs val 0 index)\n        tail (subs val index)\n        new-uid (gen-block-uid)\n        new-block {:db/id        -1\n                   :block/order  (inc (:block/order block))\n                   :block/uid    new-uid\n                   :block/open   true\n                   :block/string tail}\n        reindex (->> (inc-after (:db/id parent) (:block/order block))\n                     (concat [new-block]))]\n    {:transact! [{:db/id (:db/id block) :block/string head :edit/time (now-ts)}\n                 {:db/id (:db/id parent)\n                  :block/children reindex}]\n     :dispatch  [:editing/uid new-uid]}))\n\n\n(defn bump-up\n  \"If user presses enter at the start of non-empty string, push that block down and\n  and start editing a new block in the position of originating block - 'bump up' \"\n  [uid]\n  (let [parent (db/get-parent [:block/uid uid])\n        block (db/get-block [:block/uid uid])\n        new-uid (gen-block-uid)\n        new-block {:db/id        -1\n                   :block/order  (:block/order block)\n                   :block/uid    new-uid\n                   :block/open   true\n                   :block/string \"\"}\n        reindex (->> (inc-after (:db/id parent) (dec (:block/order block)))\n                     (concat [new-block]))]\n    {:transact! [{:db/id (:db/id parent) :block/children reindex :block/string \"\"}]\n     :dispatch [:editing/uid new-uid]}))\n\n\n(defn new-block\n  \"Add a new-block after block\"\n  [block parent]\n  (let [new-uid   (gen-block-uid)\n        new-block {:block/order  (inc (:block/order block))\n                   :block/uid    new-uid\n                   :block/open   true\n                   :block/string \"\"}\n        reindex (->> (inc-after (:db/id parent) (:block/order block))\n                     (concat [new-block]))]\n    {:dispatch-n [[:transact [{:db/id          [:block/uid (:block/uid parent)]\n                               :block/children reindex}]]\n                  [:editing/uid new-uid]]}))\n\n\n(defn enter\n  [uid val index]\n  (let [block       (db/get-block [:block/uid uid])\n        parent      (db/get-parent [:block/uid uid])\n        root-block? (boolean (:node/title parent))]\n    (cond\n      (not (zero? index)) (split-block uid val index)\n      (and (empty? val) root-block?) (new-block block parent)\n      (empty? val) {:dispatch [:unindent uid]}\n      (and (zero? index) val) (bump-up uid))))\n\n\n(reg-event-fx\n  :enter\n  (fn [_ [_ uid val index]]\n    (enter uid val index)))\n\n\n(defn indent\n  [uid]\n  (let [block (db/get-block [:block/uid uid])\n        parent (db/get-parent [:block/uid uid])\n        older-sib (->> parent\n                       :block/children\n                       (filter #(= (dec (:block/order block)) (:block/order %)))\n                       first\n                       :db/id\n                       db/get-block)\n        new-block {:db/id (:db/id block) :block/order (count (:block/children older-sib))}\n        reindex (dec-after (:db/id parent) (:block/order block))]\n    {:transact! [[:db/retract (:db/id parent) :block/children (:db/id block)]\n                 {:db/id (:db/id older-sib) :block/children [new-block]} ;; becomes child of older sibling block \u2014 same parent but order-1\n                 {:db/id (:db/id parent) :block/children reindex}]}))\n\n\n(reg-event-fx\n  :indent\n  (fn [_ [_ uid]]\n    (indent uid)))\n\n\n(defn unindent\n  [uid context-root-uid]\n  (let [parent (db/get-parent [:block/uid uid])\n        grandpa (db/get-parent (:db/id parent))\n        new-block {:block/uid uid :block/order (inc (:block/order parent))}\n        reindex-grandpa (->> (inc-after (:db/id grandpa) (:block/order parent))\n                             (concat [new-block]))]\n    ;; if parent is context-root or has node/title, no-op\n    (when-not (or (:node/title parent) (= (:block/uid parent) context-root-uid))\n      {:transact! [[:db/retract (:db/id parent) :block/children [:block/uid uid]]\n                   {:db/id (:db/id grandpa) :block/children reindex-grandpa}]})))\n\n\n(reg-event-fx\n  :unindent\n  (fn [{rfdb :db} [_ uid]]\n    (let [context-root-uid (get-in rfdb [:current-route :path-params :id])]\n      (unindent uid context-root-uid))))\n\n\n(defn drop-child\n  \"Order will always be 0\"\n  [source source-parent target]\n  (let [new-source-block {:block/uid (:block/uid source) :block/order 0}\n        reindex-source-parent (dec-after (:db/id source-parent) (:block/order source))\n        reindex-target-parent (->> (inc-after (:dbid target) (dec 0))\n                                   (concat [new-source-block]))]\n    [[:db/retract (:db/id source-parent) :block/children [:block/uid (:block/uid source)]]\n     {:db/id (:db/id source-parent) :block/children reindex-source-parent}\n     {:db/id (:db/id target) :block/children reindex-target-parent}]))\n\n\n(defn between\n  \"http://blog.jenkster.com/2013/11/clojure-less-than-greater-than-tip.html\"\n  [s t x]\n  (if (< s t)\n    (and (< s x) (< x t))\n    (and (< t x) (< x s))))\n\n\n(defn drop-above-same-parent\n  \"Give source block target block's order\n    When source is below target, increment block orders between source and target-1\n    When source is above target, decrement block order between...\";; TODO\n\n  [source target parent]\n  (let [s-order (:block/order source)\n        t-order (:block/order target)]\n    (if (= s-order (dec t-order))\n      nil\n      (let [new-source-block {:db/id (:db/id source) :block/order t-order}\n            inc-or-dec       (if (> s-order t-order) inc dec)\n            reindex          (->> (d/q '[:find ?ch ?new-order\n                                         :keys db/id block/order\n                                         :in $ ?parent ?s-order ?t-order ?between ?inc-or-dec\n                                         :where\n                                         [?parent :block/children ?ch]\n                                         [?ch :block/order ?order]\n                                         [(?between ?s-order ?t-order ?order)]\n                                         [(?inc-or-dec ?order) ?new-order]]\n                                       @db/dsdb (:db/id parent) s-order (dec t-order) between inc-or-dec)\n                                  (concat [new-source-block]))]\n        [{:db/id (:db/id parent) :block/children reindex}]))))\n\n\n(defn drop-above-diff-parent\n  [source target source-parent target-parent]\n  (let [new-block             {:db/id (:db/id source) :block/order (:block/order target)}\n        reindex-source-parent (dec-after (:db/id source-parent) (:block/order source))\n        reindex-target-parent (->> (inc-after (:db/id target-parent) (dec (:block/order target)))\n                                   (concat [new-block]))]\n    [[:db/retract (:db/id source-parent) :block/children (:db/id source)]\n     {:db/id (:db/id source-parent) :block/children reindex-source-parent}\n     {:db/id (:db/id target-parent) :block/children reindex-target-parent}]))\n\n\n(defn drop-below-same-parent\n  \"source block's new order is target block's order\"\n  [source source-parent target]\n  (let [new-source-block {:db/id (:db/id source) :block/order (:block/order target)}\n        reindex (dec-after (:db/id source-parent) (:block/order source))]\n    (concat [new-source-block] reindex)))\n\n\n(defn drop-below-diff-parent\n  \"source block's new order is target-order + 1\"\n  [source source-parent target target-parent]\n  (let [new-source-block {:db/id (:db/id source) :block/order (inc (:block/order target))}\n        reindex-source-parent   (dec-after (:db/id source-parent) (:block/order source))]\n    [[:db/retract (:db/id source-parent) :block/children (:db/id source)]\n     {:db/id (:db/id source-parent) :block/children reindex-source-parent}\n     {:db/id (:db/id target-parent) :block/children [new-source-block]}]))\n\n\n;; TODO: don't transact when we know TXes won't change anything\n(defn drop-bullet\n  [source-uid target-uid kind]\n  (let [source        (db/get-block [:block/uid source-uid])\n        target        (db/get-block [:block/uid target-uid])\n        source-parent (db/get-parent [:block/uid source-uid])\n        target-parent (db/get-parent [:block/uid target-uid])\n        same-parent? (= source-parent target-parent)]\n    {:transact!\n     (cond\n       (= kind :child)                          (drop-child             source source-parent target)\n       (and (= kind :below) same-parent?)       (drop-below-same-parent source source-parent target)\n       (and (= kind :below) (not same-parent?)) (drop-below-diff-parent source source-parent target target-parent)\n       (and (= kind :above) same-parent?)       (drop-above-same-parent source target source-parent)\n       (and (= kind :above) (not same-parent?)) (drop-above-diff-parent source target source-parent target-parent))}))\n\n\n(reg-event-fx\n  :drop-bullet\n  (fn-traced [_ [_ source-uid target-uid kind]]\n             (drop-bullet source-uid target-uid kind)))\n\n\n(defn left-sidebar-drop-above\n  [s-order t-order]\n  (let [source-eid (d/q '[:find ?e .\n                          :in $ ?s-order\n                          :where [?e :page/sidebar ?s-order]]\n                        @db/dsdb s-order)\n        new-source {:db/id source-eid :page/sidebar (if (< s-order t-order)\n                                                      (dec t-order)\n                                                      t-order)}\n        inc-or-dec (if (< s-order t-order) dec inc)\n        new-indices (->> (d/q '[:find ?shortcut ?new-order\n                                :keys db/id page/sidebar\n                                :in $ ?s-order ?t-order ?between ?inc-or-dec\n                                :where\n                                [?shortcut :page/sidebar ?order]\n                                [(?between ?s-order ?t-order ?order)]\n                                [(?inc-or-dec ?order) ?new-order]]\n                              @db/dsdb s-order (if (< s-order t-order)\n                                                 t-order\n                                                 (dec t-order))\n                              between inc-or-dec)\n                         (concat [new-source]))]\n    new-indices))\n\n\n(reg-event-fx\n  :left-sidebar/drop-above\n  (fn-traced [_ [_ source-order target-order]]\n             {:dispatch [:transact (left-sidebar-drop-above source-order target-order)]}))\n\n\n(defn left-sidebar-drop-below\n  [s-order t-order]\n  (let [source-eid (d/q '[:find ?e .\n                          :in $ ?s-order\n                          :where [?e :page/sidebar ?s-order]]\n                        @db/dsdb s-order)\n        new-source {:db/id source-eid :page/sidebar t-order}\n        new-indices (->> (d/q '[:find ?shortcut ?new-order\n                                :keys db/id page/sidebar\n                                :in $ ?s-order ?t-order ?between\n                                :where\n                                [?shortcut :page/sidebar ?order]\n                                [(?between ?s-order ?t-order ?order)]\n                                [(dec ?order) ?new-order]]\n                              @db/dsdb s-order (inc t-order) between)\n                         (concat [new-source]))]\n    new-indices))\n\n\n(reg-event-fx\n  :left-sidebar/drop-below\n  (fn-traced [_ [_ source-order target-order]]\n             {:dispatch [:transact (left-sidebar-drop-below source-order target-order)]}))\n\n\n;;;; TODO: delete the following logic when re-implementing title merge\n\n;;(defn node-with-title\n;;  [ds title]\n;;  (d/q '[:find ?e .\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]]\n;;       ds title))\n;;\n;;\n;;(defn referencing-blocks\n;;  [ds title]\n;;  (d/q '[:find ?e ?s\n;;         :in $ ?regex\n;;         :where\n;;         [?e :block/string ?s]\n;;         [(re-find ?regex ?s)]]\n;;       ds (patterns/linked title)))\n;;\n;;\n;;(defn rename-refs-tx\n;;  [old-title new-title [eid s]]\n;;  (let [new-s (str/replace\n;;                s\n;;                (patterns/linked old-title)\n;;                (str \"$1$3$4\" new-title \"$2$5\"))]\n;;    [:db/add eid :block/string new-s]))\n;;\n;;\n;;(defn rename-tx\n;;  [ds old-title new-title]\n;;  (let [eid (node-with-title ds old-title)\n;;        blocks (referencing-blocks ds old-title)]\n;;    (->> blocks\n;;         (map (partial rename-refs-tx old-title new-title))\n;;         (into [[:db/add eid :node/title new-title]]))))\n;;\n;;\n;;(reg-event-fx\n;;  :node/renamed\n;;  [(rp/inject-cofx :ds)]\n;;  (fn-traced [{:keys [db ds]} [_ old-title new-title]]\n;;             (when (not= old-title new-title)\n;;               (if (node-with-title ds new-title)\n;;                 {:db (assoc db :merge-prompt {:active true\n;;                                               :old-title old-title\n;;                                               :new-title new-title})\n;;                  :timeout {:action :start\n;;                            :id :merge-prompt\n;;                            :wait 7000\n;;                            :event [:node/merge-canceled]}}\n;;                 {:transact (rename-tx ds old-title new-title)}))))\n;;\n;;\n;;(defn count-children\n;;  [ds title]\n;;  (d/q '[:find (count ?children) .\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]\n;;         [?e :block/children ?children]]\n;;       ds title))\n;;\n;;\n;;(defn get-children-eids\n;;  [ds title]\n;;  (d/q '[:find [?children ...]\n;;         :in $ ?title\n;;         :where [?e :node/title ?title]\n;;         [?e :block/children ?children]]\n;;       ds title))\n;;\n;;\n;;(defn move-blocks-tx\n;;  [ds from-title to-title]\n;;  (let [block-count (count-children ds to-title)\n;;        block-eids (get-children-eids ds from-title)]\n;;    (mapcat (fn [eid]\n;;              (let [order (:block/order (d/pull ds [:block/order] eid))]\n;;                [[:db/add [:node/title to-title] :block/children eid]\n;;                 [:db/add eid :block/order (+ order block-count)]]))\n;;            block-eids)))\n;;\n;;\n;;(reg-event-fx\n;;  :node/merged\n;;  [(rp/inject-cofx :ds)]\n;;  (fn-traced [{:keys [db ds]} [_ primary-title secondary-title]]\n;;             {:db (dissoc db :merge-prompt)\n;;              :timeout {:action :clear\n;;                        :id :merge-prompt}\n;;              :transact (concat [[:db.fn/retractEntity [:node/title secondary-title]]]\n;;                                (move-blocks-tx ds secondary-title primary-title)\n;;                                (rename-tx ds primary-title secondary-title))}))\n;;\n;;\n;;(reg-event-fx\n;;  :node/merge-canceled\n;;  (fn-traced [{:keys [db]} _]\n;;             {:db (dissoc db :merge-prompt)\n;;              :timeout {:action :clear\n;;                        :id :merge-prompt}}))\n\n"]}