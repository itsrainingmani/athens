{"version":3,"sources":["shadow/remote/runtime/obj_support.cljc"],"mappings":"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","names":["this__4380__auto__","k__4381__auto__","this__4382__auto__","k59829","else__4383__auto__","G__59833","cljs.core/Keyword","obj","cljs.core.get","__extmap","this__4399__auto__","f__4400__auto__","init__4401__auto__","cljs.core.reduce","ret__4402__auto__","p__59834","vec__59835","k__4403__auto__","cljs.core.nth","v__4404__auto__","this__4394__auto__","writer__4395__auto__","opts__4396__auto__","pr-pair__4397__auto__","keyval__4398__auto__","cljs.core/pr-sequential-writer","cljs.core.concat","cljs.core/PersistentVector","G__59828","cljs.core/RecordIter","cljs.core/-iterator","cljs.core/nil-iter","this__4378__auto__","__meta","this__4375__auto__","__hash","this__4384__auto__","cljs.core/count","this__4376__auto__","h__4238__auto__","coll__4377__auto__","cljs.core/hash-unordered-coll","this59830","other59831","cljs.core._EQ_","this__4389__auto__","k__4390__auto__","cljs.core/contains?","cljs.core.dissoc","cljs.core/-with-meta","cljs.core.into","cljs.core/not-empty","this__4387__auto__","k__4388__auto__","pred__59838","cljs.core/keyword-identical?","expr__59839","cljs.core.assoc","this__4392__auto__","cljs.core/seq","cljs.core/MapEntry","this__4379__auto__","this__4385__auto__","entry__4386__auto__","cljs.core/vector?","cljs.core/-nth","cljs.core/-conj","shadow.remote.runtime.obj-support/Reference","this__4423__auto__","cljs.core/List","writer__4424__auto__","cljs.core/-write","G__59832","extmap__4419__auto__","G__59841","cljs.core/record?","shadow.remote.runtime.obj-support/->Reference","shadow.remote.runtime.obj-support/map->Reference","shadow.remote.runtime.obj-support/obj-ref","shadow.remote.runtime.obj-support/obj-ref?","result","shadow.remote.runtime.obj-support/now","js/Date.now","shadow.remote.runtime.obj-support/next-oid","cljs.core/random-uuid","shadow.remote.runtime.obj-support/register*","state","oid","obj-info","ts","obj-entry","cljs.core/assoc-in","shadow.remote.runtime.obj-support/obj-type-string","cljs.core.pr_str","cljs.core/type","js/shadow","js/shadow.remote","js/shadow.remote.runtime","js/shadow.remote.runtime.obj-support","js/shadow.remote.runtime.obj-support.make-view","method-table__4619__auto__","cljs.core.atom","prefer-table__4620__auto__","method-cache__4621__auto__","cached-hierarchy__4622__auto__","hierarchy__4623__auto__","fexpr__59842","cljs.core/MultiFn","cljs.core.symbol","shadow.remote.runtime.obj-support/make-view","p__59843","map__59844","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","state-ref","view-type","msg","entry","shadow.remote.runtime.obj-support/default-max-print-size","p__59846","map__59847","shadow.remote.runtime.obj-support/as-edn","data","limit","lw","shadow.remote.runtime.writer/limit-writer","cljs.core/pr-writer","cljs.core/pr-opts","shadow.remote.runtime.writer/get-string","p__59849","map__59850","shadow.remote.runtime.obj-support/as-pprint","cljs.pprint.pprint","p__59852","map__59853","shadow.remote.runtime.obj-support/as-edn-limit","shadow.remote.runtime.writer/pr-str-limit","shadow.remote.runtime.obj-support/attempt-to-sort","desc","coll","e59855","cljs.core/vec","cljs.core.sort","e","p__59856","map__59857","shadow.remote.runtime.obj-support/browseable-kv","view-order","p__59859","map__59860","idx","key","val","nav","clojure.datafy/nav","p__59862","map__59863","start","num","key-limit","val-limit","end","x__4217__auto__","y__4218__auto__","idxs","cljs.core.range","fragment","m","e59865","e59866","p__59867","map__59868","shadow.remote.runtime.obj-support/browseable-vec","p__59870","map__59871","p__59873","map__59874","p__59876","map__59877","shadow.remote.runtime.obj-support/browseable-seq","p__59879","map__59880","p__59882","map__59883","p__59885","map__59886","shadow.remote.runtime.obj-support/inspect-basic","opts","cljs.core.update","cljs.core/merge","cljs.core/boolean?","cljs.core/Symbol","cljs.core/map?","cljs.core/keys","cljs.core/set?","cljs.core/list?","shadow.remote.runtime.obj-support/inspect-type-info","shadow.remote.runtime.obj-support/inspect-source-info","cljs.core/select-keys","p__59888","map__59889","shadow.remote.runtime.obj-support/add-summary-op","summary","shadow.remote.runtime.obj-support/default-describe","o","clojure.datafy/datafy","p1__59891#","p1__59892#","p1__59893#","goog.object/set","shadow.remote.runtime.api/Inspectable","shadow.remote.runtime.api/describe","p__59894","map__59895","shadow.remote.runtime.obj-support/add-supports","handlers","cljs.core/set","p__59897","map__59898","shadow.remote.runtime.obj-support/ensure-descriptor","p__59902","map__59903","shadow.remote.runtime.obj-support/get-tap-history","svc","cljs.core/deref","cljs.core/vals","p1__59900#","cljs.core.filter","cljs.core.get_in","p1__59901#","cljs.core.sort_by","cljs.core/reverse","cljs.core.take","cljs.core.map","p__59905","map__59906","shadow.remote.runtime.obj-support/obj-describe*","cljs.core.swap_BANG_","cljs.core/update-in","p__59908","p__59909","map__59910","map__59911","shadow.remote.runtime.obj-support/obj-describe","runtime","temp__5733__auto__","shadow.remote.runtime.api/reply","p__59914","p__59915","map__59916","map__59917","shadow.remote.runtime.obj-support/obj-request","request-op","request-fn","cljs.core/not","e59920","new-oid","new-entry","js/console.warn","shadow.remote.runtime.obj-support/basic-gc!","objs-to-drop","cljs.core.drop","cljs.core/dissoc","shadow.remote.runtime.obj-support/start","p1__59921#","p1__59922#","shadow.remote.runtime.api/add-extension","p__59923","map__59924","shadow.remote.runtime.obj-support/register","cljs.core/first","cljs.core.merge","p__59926","map__59927","shadow.remote.runtime.obj-support/get-ref","obj-id","p__59929","map__59930","shadow.remote.runtime.obj-support/stop","shadow.remote.runtime.api/del-extension"],"sourcesContent":["(ns shadow.remote.runtime.obj-support\n  (:require\n    [clojure.datafy :as d]\n    [clojure.pprint :refer (pprint)]\n    [shadow.remote.runtime.api :as p]\n    [shadow.remote.runtime.shared :as shared]\n    [shadow.remote.runtime.writer :as lw])\n  #?(:clj (:import [java.util UUID])))\n\n(defrecord Reference [obj])\n\n(defn obj-ref [obj]\n  (when (some? obj)\n    (Reference. obj)))\n\n(defn obj-ref? [result]\n  (instance? Reference result))\n\n(defn now []\n  #?(:clj\n     (System/currentTimeMillis)\n     :cljs\n     (js/Date.now)))\n\n(defn next-oid []\n  #?(:clj\n     (str (UUID/randomUUID))\n     :cljs\n     (str (random-uuid))))\n\n(defn register*\n  [state oid obj obj-info]\n\n  (let [ts (now)\n\n        obj-entry\n        {:oid oid\n         :obj obj\n         ;; tracking that for GC purposes\n         :access-at ts\n         :obj-info (assoc obj-info :added-at ts)}]\n\n    (assoc-in state [:objects oid] obj-entry)))\n\n(defn obj-type-string [obj]\n  (if (nil? obj)\n    \"nil\"\n    #?(:clj\n       (-> (class obj) (.getName))\n       :cljs\n       (pr-str (type obj)))))\n\n(defmulti make-view\n  (fn [state-ref {:keys [view-type] :as msg} entry]\n    view-type))\n\n;; 1meg?\n(def default-max-print-size (* 1 1024 1024))\n\n(defn as-edn\n  [data {:keys [limit] :or {limit default-max-print-size} :as msg}]\n  (let [lw (lw/limit-writer limit)]\n    #?(:clj\n       (print-method data lw)\n       :cljs\n       (pr-writer data lw (pr-opts)))\n    (lw/get-string lw)))\n\n(defn as-pprint\n  [data {:keys [limit] :or {limit default-max-print-size} :as msg}]\n  ;; CLJ pprint for some reason doesn't run out of memory when printing circular stuff\n  ;; but it never finishes either\n  (let [lw (lw/limit-writer limit)]\n    (pprint data lw)\n    (lw/get-string lw)))\n\n(defn as-edn-limit\n  [data {:keys [limit] :as msg}]\n  (lw/pr-str-limit data limit))\n\n(defn attempt-to-sort [desc coll]\n  (try\n    (-> desc\n        (assoc :view-order (vec (sort coll)))\n        (assoc-in [:summary :sorted] true))\n    (catch #?(:clj Exception :cljs :default) e\n      (-> desc\n          (assoc :view-order (vec coll))\n          (assoc-in [:summary :sorted] false)))))\n\n(defn browseable-kv [{:keys [view-order data] :as desc}]\n  (-> desc\n      (assoc-in [:handlers :nav]\n        (fn [{:keys [idx]}]\n          (let [key (nth view-order idx)\n                val (get data key)\n                nav (d/nav data key val)]\n            (obj-ref nav))))\n      (assoc-in [:handlers :fragment]\n        (fn [{:keys [start num key-limit val-limit]\n              :or {key-limit 50\n                   val-limit 50}\n              :as msg}]\n\n          (let [end (min (count view-order) (+ start num))\n                idxs (range start end)\n                fragment\n                (reduce\n                  (fn [m idx]\n                    (let [key (nth view-order idx)\n                          val (get data key)]\n                      (assoc m idx {:key (try\n                                           (lw/pr-str-limit key key-limit)\n                                           (catch #?(:clj Exception :cljs :default) e\n                                             [true \"... print failed ...\"]))\n                                    :val (try\n                                           (lw/pr-str-limit val val-limit)\n                                           (catch #?(:clj Exception :cljs :default) e\n                                             [true \"... print failed ...\"]))})))\n                  {}\n                  idxs)]\n\n            fragment)))))\n\n(defn browseable-vec [{:keys [data] :as desc}]\n  (-> desc\n      (assoc-in [:handlers :nav]\n        (fn [{:keys [idx]}]\n          (let [val (nth data idx)\n                nav (d/nav data idx val)]\n            (obj-ref nav))))\n      (assoc-in [:handlers :fragment]\n        (fn [{:keys [start num key-limit val-limit]\n              :or {key-limit 50\n                   val-limit 50}\n              :as msg}]\n\n          (let [end (min (count data) (+ start num))\n                idxs (range start end)\n                fragment\n                (reduce\n                  (fn [m idx]\n                    (let [val (nth data idx)]\n                      (assoc m idx {:val (lw/pr-str-limit val val-limit)})))\n                  {}\n                  idxs)]\n\n            fragment)))))\n\n(defn browseable-seq [{:keys [data view-order] :as desc}]\n  (-> desc\n      (assoc-in [:handlers :nav]\n        (fn [{:keys [idx]}]\n          (let [val (nth view-order idx)\n                nav (d/nav data idx val)]\n            (obj-ref nav))))\n      (assoc-in [:handlers :fragment]\n        (fn [{:keys [start num key-limit val-limit]\n              :or {key-limit 50\n                   val-limit 50}\n              :as msg}]\n\n          (let [end (min (count view-order) (+ start num))\n                idxs (range start end)\n                fragment\n                (reduce\n                  (fn [m idx]\n                    (let [val (nth view-order idx)]\n                      (assoc m idx {:val (lw/pr-str-limit val val-limit)})))\n                  {}\n                  idxs)]\n\n            fragment)))))\n\n(defn inspect-basic [{:keys [data] :as desc} obj opts]\n  (cond\n    (nil? data)\n    (assoc-in desc [:summary :data-type] :nil)\n\n    (string? data)\n    (-> desc\n        (update :summary merge {:data-type :string\n                                :length (count data)})\n        ;; FIXME: substring support?\n        (assoc-in [:handlers :get-value] (fn [msg] data)))\n\n    (boolean? data)\n    (-> desc\n        (assoc-in [:summary :data-type] :boolean)\n        (assoc-in [:handlers :get-value] (fn [msg] data)))\n\n    (number? data)\n    (-> desc\n        (assoc-in [:summary :data-type] :number)\n        (assoc-in [:handlers :get-value] (fn [msg] data)))\n\n    (keyword? data)\n    (-> desc\n        (assoc-in [:summary :data-type] :keyword)\n        (assoc-in [:handlers :get-value] (fn [msg] data)))\n\n    (symbol? data)\n    (-> desc\n        (assoc-in [:summary :data-type] :symbol)\n        (assoc-in [:handlers :get-value] (fn [msg] data)))\n\n    (map? data)\n    (-> desc\n        (update :summary merge {:data-type :map\n                                :entries (count data)})\n        (attempt-to-sort (keys data))\n        (browseable-kv))\n\n    (vector? data)\n    (-> desc\n        (update :summary merge {:data-type :vec\n                                :entries (count data)})\n        (browseable-vec))\n\n    (set? data)\n    (-> desc\n        (update :summary merge {:data-type :set\n                                :entries (count data)})\n        (attempt-to-sort data)\n        (browseable-seq))\n\n    (list? data)\n    (-> desc\n        (update :summary merge {:data-type :list\n                                :entries (count data)})\n        (assoc :view-order (vec data))\n        (browseable-seq))\n\n\n    ;; FIXME: lazy seqs / other seqs / records\n    :else\n    (assoc-in desc [:summary :data-type] :unsupported)))\n\n(defn inspect-type-info [desc obj opts]\n  (assoc-in desc [:summary :obj-type] (obj-type-string obj)))\n\n(defn inspect-source-info [desc obj opts]\n  (update desc :summary merge (select-keys opts [:ns :line :column :label])))\n\n(defn add-summary-op [{:keys [summary] :as desc}]\n  (assoc-in desc [:handlers :summary] (fn [msg] summary)))\n\n(defn default-describe [o opts]\n  (let [data (d/datafy o)]\n\n    (-> {:data data\n         :summary\n         {:added-at (:added-at opts)\n          :datafied (not (identical? data o))}\n\n         ;; FIXME: only add those for clojure values\n         ;; often pointless when datafy returned original object\n         :handlers\n         {:edn-limit #(as-edn-limit data %)\n          :edn #(as-edn data %)\n          :pprint #(as-pprint data %)}}\n\n        (inspect-basic o opts)\n        (inspect-type-info o opts)\n        (inspect-source-info o opts)\n        (add-summary-op))))\n\n(extend-protocol p/Inspectable\n  #?(:clj Object :cljs default)\n  (describe [o opts]\n    (default-describe o opts)))\n\n(comment\n  (p/describe\n    {:hello \"world\"}\n    {:added-at \"NOW\" :ns \"foo.bar\"}))\n\n;; called after describe so impls don't have to worry about this\n(defn add-supports [{:keys [handlers] :as desc}]\n  (assoc-in desc [:summary :supports] (set (keys handlers))))\n\n;; FIXME: this is running inside swap! which means it can potentially\n;; end up getting executed several times for the same object (in CLJ)\n;; that is not great and should be handled differently\n(defn ensure-descriptor [{:keys [obj obj-info desc] :as entry}]\n  (if desc\n    entry\n    (assoc entry :desc (-> (p/describe obj obj-info)\n                           (add-supports)))))\n\n(defn get-tap-history [{:keys [state-ref] :as svc} num]\n  (->> (:objects @state-ref)\n       (vals)\n       (filter #(= :tap (get-in % [:obj-info :from])))\n       (sort-by #(get-in % [:obj-info :added-at]))\n       (reverse)\n       (take num)\n       (map :oid)\n       (into [])))\n\n(defn obj-describe*\n  [{:keys [state-ref]}\n   oid]\n  (when (contains? (:objects @state-ref) oid)\n    (swap! state-ref update-in [:objects oid] ensure-descriptor)\n    (swap! state-ref assoc-in [:objects oid :access-at] (now))\n    (let [summary (get-in @state-ref [:objects oid :desc :summary])]\n      summary)))\n\n(defn obj-describe\n  [{:keys [runtime] :as svc}\n   {:keys [oid] :as msg}]\n  (if-let [summary (obj-describe* svc oid)]\n    (p/reply runtime msg {:op :obj-summary\n                          :oid oid\n                          :summary summary})\n    (p/reply runtime msg {:op :obj-not-found :oid oid})))\n\n(defn obj-request\n  [{:keys [state-ref runtime]}\n   {:keys [oid request-op] :as msg}]\n  (if-not (contains? (:objects @state-ref) oid)\n    (p/reply runtime msg {:op :obj-not-found :oid oid})\n    (do (swap! state-ref update-in [:objects oid] ensure-descriptor)\n        (swap! state-ref assoc-in [:objects oid :access-at] (now))\n        (let [entry (get-in @state-ref [:objects oid])\n              request-fn (get-in entry [:desc :handlers request-op])]\n          (if-not request-fn\n            (p/reply runtime msg {:op :obj-request-not-supported\n                                  :oid oid\n                                  :request-op request-op})\n            (try\n              (let [result (request-fn msg)]\n\n                ;; FIXME: add support for generic async results\n                ;; all handlers should already be sync but allow async results\n                (if-not (obj-ref? result)\n                  (p/reply runtime msg {:op :obj-result\n                                        :oid oid\n                                        :result result})\n\n                  (let [new-oid (next-oid)\n                        ts (now)\n\n                        new-entry\n                        {:oid new-oid\n                         :obj (:obj result)\n                         :access-at ts\n                         ;; FIXME: should keep some info on how this ref came to be\n                         :obj-info {:added-at ts\n                                    :added-via oid}}]\n\n                    (swap! state-ref assoc-in [:objects new-oid] new-entry)\n\n                    (p/reply runtime msg {:op :obj-result-ref\n                                          :oid oid\n                                          :ref-oid new-oid}))))\n\n              (catch #?(:clj Exception :cljs :default) e\n                #?(:cljs (js/console.warn \"action-request-action failed\" (:obj entry) e))\n                (p/reply runtime msg {:op :obj-request-failed\n                                      :oid oid\n                                      :msg msg\n                                      ;; FIXME: (d/datafy e) doesn't work for CLJS\n                                      :e (str e) #_#?(:clj  (.toString e)\n                                                      :cljs (.-message e))})))))\n        )))\n\n(defn basic-gc! [state]\n  (let [objs-to-drop\n        (->> (:objects state)\n             (vals)\n             (sort-by :access-at)\n             (reverse)\n             (drop 100) ;; FIXME: make configurable\n             (map :oid))]\n\n    (reduce\n      (fn [state oid]\n        (update state :objects dissoc oid))\n      state\n      objs-to-drop)))\n\n(defn start [runtime]\n  (let [state-ref (atom {:objects {}\n                         :id-seq-ref 0})\n\n        svc\n        {:runtime runtime\n         :state-ref state-ref}]\n\n    (p/add-extension runtime\n      ::ext\n      {:ops {:obj-describe #(obj-describe svc %)\n             :obj-request #(obj-request svc %)}\n       :on-idle #(swap! state-ref basic-gc!)})\n\n    svc))\n\n(defn register [{:keys [state-ref] :as svc} obj obj-info]\n  (let [oid (next-oid)]\n    (if-not (and (vector? obj) (= :shadow.remote/wrap (first obj)) (= (count obj) 3))\n      (swap! state-ref register* oid obj obj-info)\n      (swap! state-ref register* oid (nth obj 1) (merge obj-info (nth obj 2))))\n    oid))\n\n(defn get-ref [{:keys [state-ref]} obj-id]\n  (get-in @state-ref [:objects obj-id]))\n\n(defn stop [{:keys [runtime]}]\n  (p/del-extension runtime ::ext))\n\n(comment\n  (def obj-support (:clj-runtime-obj-support (shadow.cljs.devtools.server.runtime/get-instance)))\n  (swap! (:state-ref obj-support) assoc :objects {})\n  )"]}