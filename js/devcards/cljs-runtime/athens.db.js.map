{"version":3,"sources":["athens/db.cljs"],"mappings":"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","names":["athens.db/athens-url","athens.db/help-url","athens.db/ego-url","js/athens","js/athens.db","js/athens.db.rfdb","athens.db/rfdb","athens.db/str-kw-mappings","athens.db/convert-key","k","cljs.core.get","athens.db/parse-hms","hms","cljs.core/coll?","p1__38311#","cljs.core.map","cljs.core.reduce","p__38312","vec__38313","cljs.core.nth","acc","v","cljs.core.assoc","athens.db/parse-tuples","tuples","cljs.core.partition","cljs.core/rest","p1__38316#","clojure.edn/read-string","p1__38317#","cljs.core/cons","athens.db/json-str-to-edn","json-str","js/JSON.parse","cljs.core.js__GT_clj","athens.db/str-to-db-tx","edn-data","cljs.core/first","athens.db/schema","athens.db/welcome-datoms","js/athens.db.dsdb","athens.db/dsdb","datascript.core.create_conn","datascript.core.transact_BANG_","posh.reagent/posh!","athens.db/e-by-av","a","cljs.core/deref","datascript.core.datoms","athens.db/v-by-ea","e","athens.db/rules","athens.db/sort-block-children","block","temp__5733__auto__","children","cljs.core/seq","cljs.core/vec","cljs.core.sort_by","athens.db/get-block-document","id","posh.reagent/pull","athens.db/get-node-document","athens.db/shape-parent-query","pull-results","b","res","cljs.core.conj","cljs.core.dissoc","cljs.core/reverse","athens.db/get-parents-recursively","athens.db/get-block","athens.db/get-parent","G__38324","G__38325","datascript.core/entity","athens.db/deepest-child-block","document","ch","n","cljs.core/count","athens.db/get-children-recursively","uid","cljs.core/tree-seq","athens.db/re-case-insensitive","query","cljs.core/re-pattern","athens.util/escape-str","athens.db/search-exact-node-title","G__38330","G__38331","G__38332","datascript.core/q","var_args","G__38334","athens.db/search-in-node-title","js/Error","athens.db.search_in_node_title","G__38335","G__38336","G__38337","G__38338","cljs.core.take","athens.db/get-root-parent-node","G__38344","athens.db/search-in-block-content","athens.db.search_in_block_content","G__38345","G__38346","G__38347","p1__38339#","cljs.core.mapv","athens.db/prev-sibling-uid","G__38348","G__38349","G__38350","athens.db/prev-block-uid","parent","deepest-child-prev-sibling","athens.db/next-sibling-block","G__38356","G__38357","G__38358","athens.db/next-sibling-block-recursively","sib","or__4126__auto__","athens.db/next-block-uid","next-block-recursive","js/athens.db.history","athens.db/history","cljs.core.atom","athens.db/history-limit","athens.db/drop-tail","xs","pred","x","cljs.core/next","athens.db/trim-head","cljs.core.drop","athens.db/find-prev","cljs.core/last","p1__38365#","cljs.core.take_while","cljs.core/not","athens.db/find-next","cljs.core/fnext","p1__38366#","cljs.core.drop_while","datascript.core.listen_BANG_","tx-report","map__38368","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply","cljs.core/hash-map","db-before","db-after","and__4115__auto__","cljs.core.swap_BANG_","h","p1__38367#","athens.db/get-ref-ids","pattern","posh.reagent/q","athens.db/merge-parents-and-block","ref-ids","parents","cljs.core/reduce-kv","m","_","blocks","cljs.core.merge","athens.db/group-by-parent","cljs.core/group-by","athens.db/get-data","athens.db/get-data-by-block","athens.db/get-linked-references","title","athens.patterns/linked","athens.db/get-linked-references-by-block","athens.db/get-unlinked-references","athens.patterns/unlinked","athens.db/count-linked-references-excl-uid","p1__38379#","cljs.core.remove","cljs.core._EQ_","athens.db/find-links","athens.db/nested-links","athens.db/recursive-regex","input","all-matches","i","matches","cljs.core/re-seq","athens.db/construct-links","linked-refs","p1__38385#","cljs.core/second","cljs.core/flatten","p1__38386#","cljs.core/re-find","p1__38387#","cljs.core/nil?","cljs.core/frequencies","p__38388","vec__38389"],"sourcesContent":["(ns athens.db\n  (:require\n    [athens.patterns :as patterns]\n    [athens.util :refer [escape-str]]\n    [clojure.edn :as edn]\n    [datascript.core :as d]\n    [posh.reagent :refer [posh! pull q]]))\n\n\n;; -- Example Roam DBs ---------------------------------------------------\n\n(def athens-url \"https://raw.githubusercontent.com/athensresearch/athens/master/data/athens.datoms\")\n(def help-url   \"https://raw.githubusercontent.com/athensresearch/athens/master/data/help.datoms\")\n(def ego-url    \"https://raw.githubusercontent.com/athensresearch/athens/master/data/ego.datoms\")\n\n\n;; -- re-frame -----------------------------------------------------------\n\n(defonce rfdb {:user                \"Socrates\"\n               :current-route       nil\n               :loading?            true\n               :alert               nil\n               :athena/open         false\n               :athena/recent-items '()\n               :devtool/open        false\n               :left-sidebar/open   true\n               :right-sidebar/open  false\n               :right-sidebar/items {}\n               ;;:dragging-global     false\n               :daily-notes/items   []\n               :selected/items   []})\n\n\n;; -- JSON Parsing ----------------------------------------------------\n\n(def str-kw-mappings\n  \"Maps attributes from \\\"Export All as JSON\\\" to original datascript attributes.\"\n  {\"children\" :block/children\n   \"create-email\" :create/email\n   \"create-time\" :create/time\n   \"edit-email\" :edit/email\n   \"edit-time\" :edit/time\n   \"email\" :user/email\n   \"emoji\" :ent/emoji\n   \"emojis\" :ent/emojis\n   \"props\" :block/props\n   \"string\" :block/string\n   \"text-align\" :block/text-align\n   \"time\" nil\n   \"title\" :node/title\n   \"uid\" :block/uid\n   \"users\" nil\n   \"heading\" :block/heading})\n\n\n(defn convert-key\n  [k]\n  (get str-kw-mappings k k))\n\n\n(defn parse-hms\n  \"Parses JSON retrieved from Roam's \\\"Export all as JSON\\\". Not fully functional.\"\n  [hms]\n  (if (not (coll? hms))\n    hms\n    (map #(reduce (fn [acc [k v]]\n                    (assoc acc (convert-key k) (parse-hms v)))\n                  {}\n                  %)\n         hms)))\n\n\n(defn parse-tuples\n  \"Parse tuples exported via method specified in https://roamresearch.com/#/app/ego/page/eJ14YtH2G.\"\n  [tuples]\n  (->> tuples\n       (partition 3)            ; chunk into 3-tuples\n       rest                     ; drop first tuple which is (?e ?a ?v)\n       (map #(map edn/read-string %))\n       (map #(cons :db/add %))))\n\n\n(defn json-str-to-edn\n  \"Convert a JSON str to EDN. May receive JSON through an HTTP request or file upload.\"\n  [json-str]\n  (->> json-str\n       (js/JSON.parse)\n       (js->clj)))\n\n\n(defn str-to-db-tx\n  \"Deserializes a JSON string into EDN and then Datoms.\"\n  [json-str]\n  (let [edn-data (json-str-to-edn json-str)]\n    (if (coll? (first edn-data))\n      (parse-hms edn-data)\n      (parse-tuples edn-data))))\n\n\n;; -- Datascript and Posh ------------------------------------------------\n\n(def schema\n  {:block/uid      {:db/unique :db.unique/identity}\n   :node/title     {:db/unique :db.unique/identity}\n   :attrs/lookup   {:db/cardinality :db.cardinality/many}\n   :block/children {:db/cardinality :db.cardinality/many\n                    :db/valueType :db.type/ref}})\n\n\n(def welcome-datoms\n  [{:db/id -1\n    :node/title \"athens/Welcome\"\n    :block/uid \"0\"\n    :block/children [{:block/uid \"welcome\"\n                      :block/string \"Welcome to Athens, Open-Source Networked Thought.\"\n                      :block/order 0}\n                     {:block/uid \"features\"\n                      :block/string \"Markup Features\"\n                      :block/open true\n                      :block/order 1\n                      :block/children [{:block/uid \"bold\"\n                                        :block/order 0\n                                        :block/string \"cmd-b **bold text with double asterisks**\"}\n                                       {:block/uid \"single-backticks\"\n                                        :block/order 1\n                                        :block/string \"`mono-spaced text with backticks`\"}\n                                       {:block/uid \"links\"\n                                        :block/order 2\n                                        :block/string \"links with double brackets: [[athens/Welcome]]\"}\n                                       {:block/uid \"nested-links\"\n                                        :block/order 2\n                                        :block/string \"links with double brackets: [[nested [[links]]]]\"}\n                                       {:block/uid \"hashtags\"\n                                        :block/order 3\n                                        :block/string \"or hashtags: #athens/Welcome\"}\n                                       {:block/uid \"long-hashtags\"\n                                        :block/order 4\n                                        :block/string \"can use `#[[]]` for multi-word tags: #[[Hello Athens]]\"}\n                                       {:block/uid \"block-refs\"\n                                        :block/order 5\n                                        :block/string \"Can reference other blocks with `(())`: ((features))\"}\n                                       {:block/uid \"todo\"\n                                        :block/order 6\n                                        :block/string \"{{[[TODO]]}} `cmd-enter` for a TODO checkbox\"}\n                                       {:block/uid \"done\"\n                                        :block/order 7\n                                        :block/string \"{{[[DONE]]}} `cmd-enter` again for DONE\"}\n                                       {:block/uid \"embeds\"\n                                        :block/order 8\n                                        :block/string \"embeds with `{{[[youtube: ]]}}` and `{{``iframe: }}`\"\n                                        :block/children [{:block/uid \"youtube\"\n                                                          :block/order 0\n                                                          :block/string \"{{[[youtube]]: https://www.youtube.com/watch?v=dQw4w9WgXcQ}}\"}\n                                                         {:block/uid \"iframe\"\n                                                          :block/order 1\n                                                          :block/string \"{{iframe: https://www.openstreetmap.org/export/embed.html?bbox=-0.004017949104309083%2C51.47612752641776%2C0.00030577182769775396%2C51.478569861898606&layer=mapnik}}\"}]}\n                                       {:block/uid \"images\"\n                                        :block/order 9\n                                        :block/string \"images with `![]()` ![athens-splash](https://raw.githubusercontent.com/athensresearch/athens/master/doc/athens-puk-patrick-unsplash.jpg)\"}]}]}])\n\n\n(defonce dsdb (d/create-conn schema))\n\n\n(d/transact! dsdb welcome-datoms)\n\n\n(posh! dsdb)\n\n\n(defn e-by-av\n  [a v]\n  (-> (d/datoms @dsdb :avet a v) first :e))\n\n\n(defn v-by-ea\n  [e a]\n  (-> (d/datoms @dsdb :eavt e a) first :v))\n\n\n(def rules\n  '[[(after ?p ?at ?ch ?o)\n     [?p :block/children ?ch]\n     [?ch :block/order ?o]\n     [(> ?o ?at)]]\n    [(inc-after ?p ?at ?ch ?new-o)\n     (after ?p ?at ?ch ?o)\n     [(inc ?o) ?new-o]]\n    [(dec-after ?p ?at ?ch ?new-o)\n     (after ?p ?at ?ch ?o)\n     [(dec ?o) ?new-o]]])\n\n\n(defn sort-block-children\n  [block]\n  (if-let [children (seq (:block/children block))]\n    (assoc block :block/children\n           (vec (sort-by :block/order (map sort-block-children children))))\n    block))\n\n\n(defn get-block-document\n  [id]\n  (->> @(pull dsdb '[:db/id :block/uid :block/string :block/open :block/order {:block/children ...} :edit/time] id)\n       sort-block-children))\n\n\n(defn get-node-document\n  [id]\n  (->> @(pull dsdb '[:db/id :node/title :block/uid :block/string :block/open :block/order :page/sidebar {:block/children ...} :edit/time] id)\n       sort-block-children))\n\n\n(defn shape-parent-query\n  \"Normalize path from deeply nested block to root node.\"\n  [pull-results]\n  (->> (loop [b   pull-results\n              res []]\n         (if (:node/title b)\n           (conj res b)\n           (recur (first (:block/_children b))\n                  (conj res (dissoc b :block/_children)))))\n       (rest)\n       (reverse)\n       vec))\n\n\n(defn get-parents-recursively\n  [id]\n  (->> @(pull dsdb '[:db/id :node/title :block/uid :block/string {:block/_children ...}] id)\n       shape-parent-query))\n\n\n(defn get-block\n  [id]\n  @(pull dsdb '[:db/id :node/title :block/uid :block/order :block/string {:block/children [:block/uid :block/order]}] id))\n\n\n(defn get-parent\n  [id]\n  (-> (d/entity @dsdb id)\n      :block/_children\n      first\n      :db/id\n      get-block))\n\n\n(defn deepest-child-block\n  [id]\n  (let [document (->> @(pull dsdb '[:block/order :block/uid {:block/children ...}] id))]\n    (loop [block document]\n      (if (nil? (:block/children block))\n        block\n        (let [ch (:block/children block)\n              n  (count ch)]\n          (recur (get ch (dec n))))))))\n\n\n(defn get-children-recursively\n  \"Get list of children UIDs for given block ID (including the root block's UID)\"\n  [uid]\n  (->> @(pull dsdb '[:block/order :block/uid {:block/children ...}] (e-by-av :block/uid uid))\n       (tree-seq :block/children :block/children)\n       (map :block/uid)))\n\n\n(defn re-case-insensitive\n  \"More options here https://clojuredocs.org/clojure.core/re-pattern\"\n  [query]\n  (re-pattern (str \"(?i)\" (escape-str query))))\n\n\n(defn search-exact-node-title\n  [query]\n  (d/q '[:find (pull ?node [:db/id :node/title :block/uid]) .\n         :in $ ?query\n         :where [?node :node/title ?query]]\n       @dsdb\n       query))\n\n\n(defn search-in-node-title\n  ([query] (search-in-node-title query 20))\n  ([query n]\n   (->> (d/q '[:find [(pull ?node [:db/id :node/title :block/uid]) ...]\n               :in $ ?query-pattern ?query\n               :where\n               [?node :node/title ?title]\n               [(re-find ?query-pattern ?title)]\n               [(not= ?title ?query)]] ;; ignore exact match to avoid duplicate\n             @dsdb\n             (re-case-insensitive query)\n             query)\n        (take n))))\n\n\n(defn get-root-parent-node\n  [block]\n  (loop [b block]\n    (if (:node/title b)\n      (assoc block :block/parent b)\n      (recur (first (:block/_children b))))))\n\n\n(defn search-in-block-content\n  ([query] (search-in-block-content query 20))\n  ([query n]\n   (->>\n     (d/q '[:find [(pull ?block [:db/id :block/uid :block/string :node/title {:block/_children ...}]) ...]\n            :in $ ?query-pattern\n            :where\n            [?block :block/string ?txt]\n            [(re-find ?query-pattern ?txt)]]\n          @dsdb\n          (re-case-insensitive query))\n     (take n)\n     (map get-root-parent-node)\n     (mapv #(dissoc % :block/_children)))))\n\n\n;; xxx 2 kinds of operations\n;; write operations, it's nice to have entire block and entire parent block to make TXes\n;; read operations (navigation), only need uids\n\n;; xxx these all assume all blocks are open. have to skip closed blocks\n;; TODO: focus AND set selection-start for :editing/uid\n\n(defn prev-sibling-uid\n  [uid]\n  (d/q '[:find ?sib-uid .\n         :in $ ?block-uid\n         :where\n         [?block :block/uid ?block-uid]\n         [?block :block/order ?block-o]\n         [?parent :block/children ?block]\n         [?parent :block/children ?sib]\n         [?sib :block/order ?sib-o]\n         [?sib :block/uid ?sib-uid]\n         [(dec ?block-o) ?prev-sib-o]\n         [(= ?sib-o ?prev-sib-o)]]\n       @dsdb uid))\n\n;; if order 0, go to parent\n;; if order n, go to prev siblings deepest child\n(defn prev-block-uid\n  [uid]\n  (let [block (get-block [:block/uid uid])\n        parent (get-parent [:block/uid uid])\n        deepest-child-prev-sibling (deepest-child-block [:block/uid (prev-sibling-uid uid)])]\n    (if (zero? (:block/order block))\n      (:block/uid parent)\n      (:block/uid deepest-child-prev-sibling))))\n\n\n(defn next-sibling-block\n  [uid]\n  (d/q '[:find (pull ?sib [*]) .\n         :in $ ?block-uid\n         :where\n         [?block :block/uid ?block-uid]\n         [?block :block/order ?block-o]\n         [?parent :block/children ?block]\n         [?parent :block/children ?sib]\n         [?sib :block/order ?sib-o]\n         [?sib :block/uid ?sib-uid]\n         [(inc ?block-o) ?prev-sib-o]\n         [(= ?sib-o ?prev-sib-o)]]\n       @dsdb uid))\n\n\n(defn next-sibling-block-recursively\n  [uid]\n  (loop [uid uid]\n    (let [sib (next-sibling-block uid)\n          parent (get-parent [:block/uid uid])]\n      (if (or sib (:node/title parent))\n        sib\n        (recur (:block/uid parent))))))\n\n;; if child, go to child 0\n;; else recursively find next sibling of parent\n(defn next-block-uid\n  [uid]\n  (let [block (->> (get-block [:block/uid uid])\n                   sort-block-children)\n        ch (:block/children block)\n        next-block-recursive (next-sibling-block-recursively uid)]\n    (cond\n      ch (:block/uid (first ch))\n      next-block-recursive (:block/uid next-block-recursive))))\n\n;; history\n\n(defonce history (atom []))\n(def ^:const history-limit 10)\n\n\n(defn drop-tail\n  [xs pred]\n  (loop [acc []\n         xs  xs]\n    (let [x (first xs)]\n      (cond\n        (nil? x) acc\n        (pred x) (conj acc x)\n        :else  (recur (conj acc x) (next xs))))))\n\n\n(defn trim-head\n  [xs n]\n  (vec (drop (- (count xs) n) xs)))\n\n\n(defn find-prev\n  [xs pred]\n  (last (take-while #(not (pred %)) xs)))\n\n\n(defn find-next\n  [xs pred]\n  (fnext (drop-while #(not (pred %)) xs)))\n\n\n(d/listen! dsdb :history\n           (fn [tx-report]\n             (let [{:keys [db-before db-after]} tx-report]\n               (when (and db-before db-after)\n                 (swap! history (fn [h]\n                                  (-> h\n                                      (drop-tail #(identical? % db-before))\n                                      (conj db-after)\n                                      (trim-head history-limit))))))))\n\n;; -- Linked & Unlinked References ----------\n\n(defn get-ref-ids\n  [pattern]\n  @(q '[:find [?e ...]\n        :in $ ?regex\n        :where\n        [?e :block/string ?s]\n        [(re-find ?regex ?s)]]\n      dsdb\n      pattern))\n\n\n(defn merge-parents-and-block\n  [ref-ids]\n  (let [parents (reduce-kv (fn [m _ v] (assoc m v (get-parents-recursively v)))\n                           {}\n                           ref-ids)\n        blocks (map (fn [id] (get-block-document id)) ref-ids)]\n    (mapv\n      (fn [block]\n        (merge block {:block/parents (get parents (:db/id block))}))\n      blocks)))\n\n\n(defn group-by-parent\n  [blocks]\n  (group-by (fn [x]\n              (-> x\n                  :block/parents\n                  first\n                  :node/title))\n            blocks))\n\n\n(defn get-data\n  [pattern]\n  (-> pattern get-ref-ids merge-parents-and-block group-by-parent seq))\n\n\n(defn get-data-by-block\n  [pattern]\n  (-> pattern get-ref-ids merge-parents-and-block seq))\n\n\n(defn get-linked-references\n  [title]\n  (-> title patterns/linked get-data))\n\n\n(defn get-linked-references-by-block\n  [title]\n  (-> title patterns/linked get-data-by-block))\n\n\n(defn get-unlinked-references\n  [title]\n  (-> title patterns/unlinked get-data))\n\n\n(defn count-linked-references-excl-uid\n  [title uid]\n  (->> (get-linked-references-by-block title)\n       (remove #(= (:block/uid %) uid))\n       count))\n\n;; Pattern for finding links\n(def find-links\n  (re-pattern (str \"(\\\\[\\\\[(.+)\\\\]\\\\])|(#)(.+)|(#\\\\[\\\\[(.+)\\\\]\\\\])\")))\n\n\n;; This pattern works better at handling nested and multiple links in a string\n;; TODO: Pair this with recursive regex\n(def nested-links\n  (re-pattern \"\\\\[\\\\[([^\\\\]\\\\]]*)\\\\]\\\\]|(#)(.+)|#\\\\[([^\\\\]\\\\]]*)\\\\]\\\\]\"))\n\n\n;; TODO: Implement multiple link handling\n(defn recursive-regex\n  \"Naive implementation of a Recursive regex\"\n  [input]\n  (loop [all-matches '()\n         i input]\n    (let [matches (re-seq nested-links i)]\n      (if-not (nil? matches)\n        (recur (conj all-matches matches) matches)\n        all-matches))))\n\n\n(defn construct-links\n  \"Given a node, this gets all links within linked references\"\n  [title]\n  (let [linked-refs (get-linked-references (escape-str title))]\n    (->> linked-refs\n         (map #(first (second %1)))\n         (reduce (fn [acc v] (conj acc (flatten (tree-seq :block/children :block/children v)))) '())\n         flatten\n         (map #(re-find find-links (:block/string %1)))\n         (map #(nth %1 2))\n         (remove nil?)\n         frequencies\n         (reduce (fn [acc [k v]] (assoc acc k {:count v})) {}))))\n"]}